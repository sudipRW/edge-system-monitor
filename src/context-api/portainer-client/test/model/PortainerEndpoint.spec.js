/*
 * PortainerCE API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  # Private Registry  Using private registry, you will need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\>}’ inside the Request Header. The parameter name is \"X-Registry-Auth\". \\<registryID value\\> - The registry ID where the repository was created.  Example:  ``` eyJyZWdpc3RyeUlkIjoxfQ== ```  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/). 
 *
 * OpenAPI spec version: 2.21.3
 * Contact: info@portainer.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PortainerCeApi);
  }
}(this, function(expect, PortainerCeApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PortainerEndpoint', function() {
      beforeEach(function() {
        instance = new PortainerCeApi.PortainerEndpoint();
      });

      it('should create an instance of PortainerEndpoint', function() {
        // TODO: update the code to test PortainerEndpoint
        expect(instance).to.be.a(PortainerCeApi.PortainerEndpoint);
      });

      it('should have the property aMTDeviceGUID (base name: "AMTDeviceGUID")', function() {
        // TODO: update the code to test the property aMTDeviceGUID
        expect(instance).to.have.property('aMTDeviceGUID');
        // expect(instance.aMTDeviceGUID).to.be(expectedValueLiteral);
      });

      it('should have the property authorizedTeams (base name: "AuthorizedTeams")', function() {
        // TODO: update the code to test the property authorizedTeams
        expect(instance).to.have.property('authorizedTeams');
        // expect(instance.authorizedTeams).to.be(expectedValueLiteral);
      });

      it('should have the property authorizedUsers (base name: "AuthorizedUsers")', function() {
        // TODO: update the code to test the property authorizedUsers
        expect(instance).to.have.property('authorizedUsers');
        // expect(instance.authorizedUsers).to.be(expectedValueLiteral);
      });

      it('should have the property azureCredentials (base name: "AzureCredentials")', function() {
        // TODO: update the code to test the property azureCredentials
        expect(instance).to.have.property('azureCredentials');
        // expect(instance.azureCredentials).to.be(expectedValueLiteral);
      });

      it('should have the property composeSyntaxMaxVersion (base name: "ComposeSyntaxMaxVersion")', function() {
        // TODO: update the code to test the property composeSyntaxMaxVersion
        expect(instance).to.have.property('composeSyntaxMaxVersion');
        // expect(instance.composeSyntaxMaxVersion).to.be(expectedValueLiteral);
      });

      it('should have the property edgeCheckinInterval (base name: "EdgeCheckinInterval")', function() {
        // TODO: update the code to test the property edgeCheckinInterval
        expect(instance).to.have.property('edgeCheckinInterval');
        // expect(instance.edgeCheckinInterval).to.be(expectedValueLiteral);
      });

      it('should have the property edgeID (base name: "EdgeID")', function() {
        // TODO: update the code to test the property edgeID
        expect(instance).to.have.property('edgeID');
        // expect(instance.edgeID).to.be(expectedValueLiteral);
      });

      it('should have the property edgeKey (base name: "EdgeKey")', function() {
        // TODO: update the code to test the property edgeKey
        expect(instance).to.have.property('edgeKey');
        // expect(instance.edgeKey).to.be(expectedValueLiteral);
      });

      it('should have the property enableGPUManagement (base name: "EnableGPUManagement")', function() {
        // TODO: update the code to test the property enableGPUManagement
        expect(instance).to.have.property('enableGPUManagement');
        // expect(instance.enableGPUManagement).to.be(expectedValueLiteral);
      });

      it('should have the property gpus (base name: "Gpus")', function() {
        // TODO: update the code to test the property gpus
        expect(instance).to.have.property('gpus');
        // expect(instance.gpus).to.be(expectedValueLiteral);
      });

      it('should have the property groupId (base name: "GroupId")', function() {
        // TODO: update the code to test the property groupId
        expect(instance).to.have.property('groupId');
        // expect(instance.groupId).to.be(expectedValueLiteral);
      });

      it('should have the property heartbeat (base name: "Heartbeat")', function() {
        // TODO: update the code to test the property heartbeat
        expect(instance).to.have.property('heartbeat');
        // expect(instance.heartbeat).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "Id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property isEdgeDevice (base name: "IsEdgeDevice")', function() {
        // TODO: update the code to test the property isEdgeDevice
        expect(instance).to.have.property('isEdgeDevice');
        // expect(instance.isEdgeDevice).to.be(expectedValueLiteral);
      });

      it('should have the property kubernetes (base name: "Kubernetes")', function() {
        // TODO: update the code to test the property kubernetes
        expect(instance).to.have.property('kubernetes');
        // expect(instance.kubernetes).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "Name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property postInitMigrations (base name: "PostInitMigrations")', function() {
        // TODO: update the code to test the property postInitMigrations
        expect(instance).to.have.property('postInitMigrations');
        // expect(instance.postInitMigrations).to.be(expectedValueLiteral);
      });

      it('should have the property publicURL (base name: "PublicURL")', function() {
        // TODO: update the code to test the property publicURL
        expect(instance).to.have.property('publicURL');
        // expect(instance.publicURL).to.be(expectedValueLiteral);
      });

      it('should have the property snapshots (base name: "Snapshots")', function() {
        // TODO: update the code to test the property snapshots
        expect(instance).to.have.property('snapshots');
        // expect(instance.snapshots).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "Status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property TLS (base name: "TLS")', function() {
        // TODO: update the code to test the property TLS
        expect(instance).to.have.property('TLS');
        // expect(instance.TLS).to.be(expectedValueLiteral);
      });

      it('should have the property tLSCACert (base name: "TLSCACert")', function() {
        // TODO: update the code to test the property tLSCACert
        expect(instance).to.have.property('tLSCACert');
        // expect(instance.tLSCACert).to.be(expectedValueLiteral);
      });

      it('should have the property tLSCert (base name: "TLSCert")', function() {
        // TODO: update the code to test the property tLSCert
        expect(instance).to.have.property('tLSCert');
        // expect(instance.tLSCert).to.be(expectedValueLiteral);
      });

      it('should have the property tLSConfig (base name: "TLSConfig")', function() {
        // TODO: update the code to test the property tLSConfig
        expect(instance).to.have.property('tLSConfig');
        // expect(instance.tLSConfig).to.be(expectedValueLiteral);
      });

      it('should have the property tLSKey (base name: "TLSKey")', function() {
        // TODO: update the code to test the property tLSKey
        expect(instance).to.have.property('tLSKey');
        // expect(instance.tLSKey).to.be(expectedValueLiteral);
      });

      it('should have the property tagIds (base name: "TagIds")', function() {
        // TODO: update the code to test the property tagIds
        expect(instance).to.have.property('tagIds');
        // expect(instance.tagIds).to.be(expectedValueLiteral);
      });

      it('should have the property tags (base name: "Tags")', function() {
        // TODO: update the code to test the property tags
        expect(instance).to.have.property('tags');
        // expect(instance.tags).to.be(expectedValueLiteral);
      });

      it('should have the property teamAccessPolicies (base name: "TeamAccessPolicies")', function() {
        // TODO: update the code to test the property teamAccessPolicies
        expect(instance).to.have.property('teamAccessPolicies');
        // expect(instance.teamAccessPolicies).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "Type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property URL (base name: "URL")', function() {
        // TODO: update the code to test the property URL
        expect(instance).to.have.property('URL');
        // expect(instance.URL).to.be(expectedValueLiteral);
      });

      it('should have the property userAccessPolicies (base name: "UserAccessPolicies")', function() {
        // TODO: update the code to test the property userAccessPolicies
        expect(instance).to.have.property('userAccessPolicies');
        // expect(instance.userAccessPolicies).to.be(expectedValueLiteral);
      });

      it('should have the property userTrusted (base name: "UserTrusted")', function() {
        // TODO: update the code to test the property userTrusted
        expect(instance).to.have.property('userTrusted');
        // expect(instance.userTrusted).to.be(expectedValueLiteral);
      });

      it('should have the property agent (base name: "agent")', function() {
        // TODO: update the code to test the property agent
        expect(instance).to.have.property('agent');
        // expect(instance.agent).to.be(expectedValueLiteral);
      });

      it('should have the property edge (base name: "edge")', function() {
        // TODO: update the code to test the property edge
        expect(instance).to.have.property('edge');
        // expect(instance.edge).to.be(expectedValueLiteral);
      });

      it('should have the property lastCheckInDate (base name: "lastCheckInDate")', function() {
        // TODO: update the code to test the property lastCheckInDate
        expect(instance).to.have.property('lastCheckInDate');
        // expect(instance.lastCheckInDate).to.be(expectedValueLiteral);
      });

      it('should have the property queryDate (base name: "queryDate")', function() {
        // TODO: update the code to test the property queryDate
        expect(instance).to.have.property('queryDate');
        // expect(instance.queryDate).to.be(expectedValueLiteral);
      });

      it('should have the property securitySettings (base name: "securitySettings")', function() {
        // TODO: update the code to test the property securitySettings
        expect(instance).to.have.property('securitySettings');
        // expect(instance.securitySettings).to.be(expectedValueLiteral);
      });

    });
  });

}));
