/*
 * PortainerCE API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  # Private Registry  Using private registry, you will need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\>}’ inside the Request Header. The parameter name is \"X-Registry-Auth\". \\<registryID value\\> - The registry ID where the repository was created.  Example:  ``` eyJyZWdpc3RyeUlkIjoxfQ== ```  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/). 
 *
 * OpenAPI spec version: 2.21.3
 * Contact: info@portainer.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PortainerCeApi);
  }
}(this, function(expect, PortainerCeApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PortainerCeApi.EndpointsApi();
  });

  describe('(package)', function() {
    describe('EndpointsApi', function() {
      describe('endpointAssociationDelete', function() {
        it('should call endpointAssociationDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointAssociationDelete call
          /*
          var id = 56;

          instance.endpointAssociationDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointCreate', function() {
        it('should call endpointCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointCreate call and complete the assertions
          /*
          var name = "name_example";
          var endpointCreationType = 56;
          var edgeTunnelServerAddress = "edgeTunnelServerAddress_example";
          var opts = {};
          opts.URL = "URL_example";
          opts.publicURL = "publicURL_example";
          opts.groupID = 56;
          opts.TLS = true;
          opts.tLSSkipVerify = true;
          opts.tLSSkipClientVerify = true;
          opts.tLSCACertFile = "/path/to/file.txt";
          opts.tLSCertFile = "/path/to/file.txt";
          opts.tLSKeyFile = "/path/to/file.txt";
          opts.azureApplicationID = "azureApplicationID_example";
          opts.azureTenantID = "azureTenantID_example";
          opts.azureAuthenticationKey = "azureAuthenticationKey_example";
          opts.tagIds = [3.4];
          opts.edgeCheckinInterval = 56;
          opts.gpus = "gpus_example";

          instance.endpointCreate(name, endpointCreationType, edgeTunnelServerAddress, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerEndpoint);
            expect(data.aMTDeviceGUID).to.be.a('string');
            expect(data.aMTDeviceGUID).to.be("4c4c4544-004b-3910-8037-b6c04f504633");
            {
              let dataCtr = data.authorizedTeams;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(1);
              }
            }
            {
              let dataCtr = data.authorizedUsers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(1);
              }
            }
            expect(data.azureCredentials).to.be.a(PortainerCeApi.PortainerAzureCredentials);
                  expect(data.azureCredentials.applicationID).to.be.a('string');
              expect(data.azureCredentials.applicationID).to.be("eag7cdo9-o09l-9i83-9dO9-f0b23oe78db4");
              expect(data.azureCredentials.authenticationKey).to.be.a('string');
              expect(data.azureCredentials.authenticationKey).to.be("cOrXoK/1D35w8YQ8nH1/8ZGwzz45JIYD5jxHKXEQknk=");
              expect(data.azureCredentials.tenantID).to.be.a('string');
              expect(data.azureCredentials.tenantID).to.be("34ddc78d-4fel-2358-8cc1-df84c8o839f5");
            expect(data.composeSyntaxMaxVersion).to.be.a('string');
            expect(data.composeSyntaxMaxVersion).to.be("3.8");
            expect(data.edgeCheckinInterval).to.be.a('number');
            expect(data.edgeCheckinInterval).to.be(5);
            expect(data.edgeID).to.be.a('string');
            expect(data.edgeID).to.be("");
            expect(data.edgeKey).to.be.a('string');
            expect(data.edgeKey).to.be("");
            expect(data.enableGPUManagement).to.be.a('boolean');
            expect(data.enableGPUManagement).to.be(false);
            {
              let dataCtr = data.gpus;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.groupId).to.be.a('number');
            expect(data.groupId).to.be(1);
            expect(data.heartbeat).to.be.a('boolean');
            expect(data.heartbeat).to.be(true);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.isEdgeDevice).to.be.a('boolean');
            expect(data.isEdgeDevice).to.be(false);
            expect(data.kubernetes).to.be.a(PortainerCeApi.PortainerKubernetesData);
                  expect(data.kubernetes.configuration).to.be.a(PortainerCeApi.PortainerKubernetesConfiguration);
                    expect(data.kubernetes.configuration.allowNoneIngressClass).to.be.a('boolean');
                expect(data.kubernetes.configuration.allowNoneIngressClass).to.be(false);
                expect(data.kubernetes.configuration.enableResourceOverCommit).to.be.a('boolean');
                expect(data.kubernetes.configuration.enableResourceOverCommit).to.be(false);
                expect(data.kubernetes.configuration.ingressAvailabilityPerNamespace).to.be.a('boolean');
                expect(data.kubernetes.configuration.ingressAvailabilityPerNamespace).to.be(false);
                {
                  let dataCtr = data.kubernetes.configuration.ingressClasses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PortainerCeApi.PortainerKubernetesIngressClassConfig);
                    expect(data.blocked).to.be.a('boolean');
                    expect(data.blocked).to.be(false);
                    {
                      let dataCtr = data.blockedNamespaces;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
    
                          }
                }
                expect(data.kubernetes.configuration.resourceOverCommitPercentage).to.be.a('number');
                expect(data.kubernetes.configuration.resourceOverCommitPercentage).to.be(0);
                expect(data.kubernetes.configuration.restrictDefaultNamespace).to.be.a('boolean');
                expect(data.kubernetes.configuration.restrictDefaultNamespace).to.be(false);
                {
                  let dataCtr = data.kubernetes.configuration.storageClasses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PortainerCeApi.PortainerKubernetesStorageClassConfig);
                    {
                      let dataCtr = data.accessModes;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.allowVolumeExpansion).to.be.a('boolean');
                    expect(data.allowVolumeExpansion).to.be(false);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.provisioner).to.be.a('string');
                    expect(data.provisioner).to.be("");
    
                          }
                }
                expect(data.kubernetes.configuration.useLoadBalancer).to.be.a('boolean');
                expect(data.kubernetes.configuration.useLoadBalancer).to.be(false);
                expect(data.kubernetes.configuration.useServerMetrics).to.be.a('boolean');
                expect(data.kubernetes.configuration.useServerMetrics).to.be(false);
              expect(data.kubernetes.flags).to.be.a(PortainerCeApi.PortainerKubernetesFlags);
                    expect(data.kubernetes.flags.isServerIngressClassDetected).to.be.a('boolean');
                expect(data.kubernetes.flags.isServerIngressClassDetected).to.be(false);
                expect(data.kubernetes.flags.isServerMetricsDetected).to.be.a('boolean');
                expect(data.kubernetes.flags.isServerMetricsDetected).to.be(false);
                expect(data.kubernetes.flags.isServerStorageDetected).to.be.a('boolean');
                expect(data.kubernetes.flags.isServerStorageDetected).to.be(false);
              {
                let dataCtr = data.kubernetes.snapshots;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerKubernetesSnapshot);
                  expect(data.kubernetesVersion).to.be.a('string');
                  expect(data.kubernetesVersion).to.be("");
                  expect(data.nodeCount).to.be.a('number');
                  expect(data.nodeCount).to.be(0);
                  expect(data.time).to.be.a('number');
                  expect(data.time).to.be(0);
                  expect(data.totalCPU).to.be.a('number');
                  expect(data.totalCPU).to.be(0);
                  expect(data.totalMemory).to.be.a('number');
                  expect(data.totalMemory).to.be(0);
  
                        }
              }
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("my-environment");
            expect(data.postInitMigrations).to.be.a(PortainerCeApi.PortainerEndpointPostInitMigrations);
                  expect(data.postInitMigrations.migrateGPUs).to.be.a('boolean');
              expect(data.postInitMigrations.migrateGPUs).to.be(false);
              expect(data.postInitMigrations.migrateIngresses).to.be.a('boolean');
              expect(data.postInitMigrations.migrateIngresses).to.be(false);
            expect(data.publicURL).to.be.a('string');
            expect(data.publicURL).to.be("docker.mydomain.tld:2375");
            {
              let dataCtr = data.snapshots;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerDockerSnapshot);
                expect(data.containerCount).to.be.a('number');
                expect(data.containerCount).to.be(0);
                expect(data.dockerSnapshotRaw).to.be.a(PortainerCeApi.PortainerDockerSnapshotRaw);
                    expect(data.dockerVersion).to.be.a('string');
                expect(data.dockerVersion).to.be("");
                expect(data.gpuUseAll).to.be.a('boolean');
                expect(data.gpuUseAll).to.be(false);
                {
                  let dataCtr = data.gpuUseList;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.healthyContainerCount).to.be.a('number');
                expect(data.healthyContainerCount).to.be(0);
                expect(data.imageCount).to.be.a('number');
                expect(data.imageCount).to.be(0);
                expect(data.nodeCount).to.be.a('number');
                expect(data.nodeCount).to.be(0);
                expect(data.runningContainerCount).to.be.a('number');
                expect(data.runningContainerCount).to.be(0);
                expect(data.serviceCount).to.be.a('number');
                expect(data.serviceCount).to.be(0);
                expect(data.stackCount).to.be.a('number');
                expect(data.stackCount).to.be(0);
                expect(data.stoppedContainerCount).to.be.a('number');
                expect(data.stoppedContainerCount).to.be(0);
                expect(data.swarm).to.be.a('boolean');
                expect(data.swarm).to.be(false);
                expect(data.time).to.be.a('number');
                expect(data.time).to.be(0);
                expect(data.totalCPU).to.be.a('number');
                expect(data.totalCPU).to.be(0);
                expect(data.totalMemory).to.be.a('number');
                expect(data.totalMemory).to.be(0);
                expect(data.unhealthyContainerCount).to.be.a('number');
                expect(data.unhealthyContainerCount).to.be(0);
                expect(data.volumeCount).to.be.a('number');
                expect(data.volumeCount).to.be(0);

                      }
            }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.TLS).to.be.a('boolean');
            expect(data.TLS).to.be(false);
            expect(data.tLSCACert).to.be.a('string');
            expect(data.tLSCACert).to.be("");
            expect(data.tLSCert).to.be.a('string');
            expect(data.tLSCert).to.be("");
            expect(data.tLSConfig).to.be.a(PortainerCeApi.PortainerTLSConfiguration);
                  expect(data.tLSConfig.TLS).to.be.a('boolean');
              expect(data.tLSConfig.TLS).to.be(true);
              expect(data.tLSConfig.tLSCACert).to.be.a('string');
              expect(data.tLSConfig.tLSCACert).to.be("/data/tls/ca.pem");
              expect(data.tLSConfig.tLSCert).to.be.a('string');
              expect(data.tLSConfig.tLSCert).to.be("/data/tls/cert.pem");
              expect(data.tLSConfig.tLSKey).to.be.a('string');
              expect(data.tLSConfig.tLSKey).to.be("/data/tls/key.pem");
              expect(data.tLSConfig.tLSSkipVerify).to.be.a('boolean');
              expect(data.tLSConfig.tLSSkipVerify).to.be(false);
            expect(data.tLSKey).to.be.a('string');
            expect(data.tLSKey).to.be("");
            {
              let dataCtr = data.tagIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(1);
              }
            }
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.teamAccessPolicies).to.be.a(PortainerCeApi.PortainerTeamAccessPolicies);
                expect(data.type).to.be.a('number');
            expect(data.type).to.be(1);
            expect(data.URL).to.be.a('string');
            expect(data.URL).to.be("docker.mydomain.tld:2375");
            expect(data.userAccessPolicies).to.be.a(PortainerCeApi.PortainerUserAccessPolicies);
                expect(data.userTrusted).to.be.a('boolean');
            expect(data.userTrusted).to.be(false);
            expect(data.agent).to.be.a(PortainerCeApi.PortainerEndpointAgent);
                  expect(data.agent.version).to.be.a('string');
              expect(data.agent.version).to.be("1.0.0");
            expect(data.edge).to.be.a(PortainerCeApi.PortainerEnvironmentEdgeSettings);
                  expect(data.edge.commandInterval).to.be.a('number');
              expect(data.edge.commandInterval).to.be(60);
              expect(data.edge.pingInterval).to.be.a('number');
              expect(data.edge.pingInterval).to.be(60);
              expect(data.edge.snapshotInterval).to.be.a('number');
              expect(data.edge.snapshotInterval).to.be(60);
              expect(data.edge.asyncMode).to.be.a('boolean');
              expect(data.edge.asyncMode).to.be(false);
            expect(data.lastCheckInDate).to.be.a('number');
            expect(data.lastCheckInDate).to.be(0);
            expect(data.queryDate).to.be.a('number');
            expect(data.queryDate).to.be(0);
            expect(data.securitySettings).to.be.a(PortainerCeApi.PortainerEndpointSecuritySettings);
                  expect(data.securitySettings.allowBindMountsForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowBindMountsForRegularUsers).to.be(false);
              expect(data.securitySettings.allowContainerCapabilitiesForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowContainerCapabilitiesForRegularUsers).to.be(true);
              expect(data.securitySettings.allowDeviceMappingForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowDeviceMappingForRegularUsers).to.be(true);
              expect(data.securitySettings.allowHostNamespaceForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowHostNamespaceForRegularUsers).to.be(true);
              expect(data.securitySettings.allowPrivilegedModeForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowPrivilegedModeForRegularUsers).to.be(false);
              expect(data.securitySettings.allowStackManagementForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowStackManagementForRegularUsers).to.be(true);
              expect(data.securitySettings.allowSysctlSettingForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowSysctlSettingForRegularUsers).to.be(true);
              expect(data.securitySettings.allowVolumeBrowserForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowVolumeBrowserForRegularUsers).to.be(true);
              expect(data.securitySettings.enableHostManagementFeatures).to.be.a('boolean');
              expect(data.securitySettings.enableHostManagementFeatures).to.be(true);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointCreateGlobalKey', function() {
        it('should call endpointCreateGlobalKey successfully', function(done) {
          // TODO: uncomment endpointCreateGlobalKey call and complete the assertions
          /*

          instance.endpointCreateGlobalKey(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.EndpointsEndpointCreateGlobalKeyResponse);
            expect(data.endpointID).to.be.a('number');
            expect(data.endpointID).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointDelete', function() {
        it('should call endpointDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointDelete call
          /*
          var id = 56;

          instance.endpointDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointDeleteBatch', function() {
        it('should call endpointDeleteBatch successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointDeleteBatch call
          /*
          var body = new PortainerCeApi.EndpointsEndpointDeleteBatchPayload();
          body.endpoints = [new PortainerCeApi.EndpointsEndpointDeleteRequest()];
          body.endpoints[0].deleteCluster = false;
          body.endpoints[0].id = 0;

          instance.endpointDeleteBatch(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointDockerhubStatus', function() {
        it('should call endpointDockerhubStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointDockerhubStatus call and complete the assertions
          /*
          var id = 56;
          var registryId = 56;

          instance.endpointDockerhubStatus(id, registryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.EndpointsDockerhubStatusResponse);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(0);
            expect(data.remaining).to.be.a('number');
            expect(data.remaining).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointEdgeStatusInspect', function() {
        it('should call endpointEdgeStatusInspect successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointEdgeStatusInspect call and complete the assertions
          /*
          var id = 56;

          instance.endpointEdgeStatusInspect(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.EndpointedgeEndpointEdgeStatusInspectResponse);
            expect(data.checkin).to.be.a('number');
            expect(data.checkin).to.be(5);
            expect(data.credentials).to.be.a('string');
            expect(data.credentials).to.be("");
            expect(data.port).to.be.a('number');
            expect(data.port).to.be(8732);
            {
              let dataCtr = data.schedules;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.EndpointedgeEdgeJobResponse);
                expect(data.collectLogs).to.be.a('boolean');
                expect(data.collectLogs).to.be(true);
                expect(data.cronExpression).to.be.a('string');
                expect(data.cronExpression).to.be("* * * * *");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(2);
                expect(data.script).to.be.a('string');
                expect(data.script).to.be("echo hello");
                expect(data.version).to.be.a('number');
                expect(data.version).to.be(2);

                      }
            }
            {
              let dataCtr = data.stacks;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.EndpointedgeStackStatusResponse);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.version).to.be.a('number');
                expect(data.version).to.be(3);

                      }
            }
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("REQUIRED");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointForceUpdateService', function() {
        it('should call endpointForceUpdateService successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointForceUpdateService call and complete the assertions
          /*
          var id = 56;
          var body = new PortainerCeApi.EndpointsForceUpdateServicePayload();
          body.pullImage = false;
          body.serviceID = "";

          instance.endpointForceUpdateService(id, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.SwarmServiceUpdateResponse);
            {
              let dataCtr = data.warnings;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointInspect', function() {
        it('should call endpointInspect successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointInspect call and complete the assertions
          /*
          var id = 56;

          instance.endpointInspect(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerEndpoint);
            expect(data.aMTDeviceGUID).to.be.a('string');
            expect(data.aMTDeviceGUID).to.be("4c4c4544-004b-3910-8037-b6c04f504633");
            {
              let dataCtr = data.authorizedTeams;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(1);
              }
            }
            {
              let dataCtr = data.authorizedUsers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(1);
              }
            }
            expect(data.azureCredentials).to.be.a(PortainerCeApi.PortainerAzureCredentials);
                  expect(data.azureCredentials.applicationID).to.be.a('string');
              expect(data.azureCredentials.applicationID).to.be("eag7cdo9-o09l-9i83-9dO9-f0b23oe78db4");
              expect(data.azureCredentials.authenticationKey).to.be.a('string');
              expect(data.azureCredentials.authenticationKey).to.be("cOrXoK/1D35w8YQ8nH1/8ZGwzz45JIYD5jxHKXEQknk=");
              expect(data.azureCredentials.tenantID).to.be.a('string');
              expect(data.azureCredentials.tenantID).to.be("34ddc78d-4fel-2358-8cc1-df84c8o839f5");
            expect(data.composeSyntaxMaxVersion).to.be.a('string');
            expect(data.composeSyntaxMaxVersion).to.be("3.8");
            expect(data.edgeCheckinInterval).to.be.a('number');
            expect(data.edgeCheckinInterval).to.be(5);
            expect(data.edgeID).to.be.a('string');
            expect(data.edgeID).to.be("");
            expect(data.edgeKey).to.be.a('string');
            expect(data.edgeKey).to.be("");
            expect(data.enableGPUManagement).to.be.a('boolean');
            expect(data.enableGPUManagement).to.be(false);
            {
              let dataCtr = data.gpus;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.groupId).to.be.a('number');
            expect(data.groupId).to.be(1);
            expect(data.heartbeat).to.be.a('boolean');
            expect(data.heartbeat).to.be(true);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.isEdgeDevice).to.be.a('boolean');
            expect(data.isEdgeDevice).to.be(false);
            expect(data.kubernetes).to.be.a(PortainerCeApi.PortainerKubernetesData);
                  expect(data.kubernetes.configuration).to.be.a(PortainerCeApi.PortainerKubernetesConfiguration);
                    expect(data.kubernetes.configuration.allowNoneIngressClass).to.be.a('boolean');
                expect(data.kubernetes.configuration.allowNoneIngressClass).to.be(false);
                expect(data.kubernetes.configuration.enableResourceOverCommit).to.be.a('boolean');
                expect(data.kubernetes.configuration.enableResourceOverCommit).to.be(false);
                expect(data.kubernetes.configuration.ingressAvailabilityPerNamespace).to.be.a('boolean');
                expect(data.kubernetes.configuration.ingressAvailabilityPerNamespace).to.be(false);
                {
                  let dataCtr = data.kubernetes.configuration.ingressClasses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PortainerCeApi.PortainerKubernetesIngressClassConfig);
                    expect(data.blocked).to.be.a('boolean');
                    expect(data.blocked).to.be(false);
                    {
                      let dataCtr = data.blockedNamespaces;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
    
                          }
                }
                expect(data.kubernetes.configuration.resourceOverCommitPercentage).to.be.a('number');
                expect(data.kubernetes.configuration.resourceOverCommitPercentage).to.be(0);
                expect(data.kubernetes.configuration.restrictDefaultNamespace).to.be.a('boolean');
                expect(data.kubernetes.configuration.restrictDefaultNamespace).to.be(false);
                {
                  let dataCtr = data.kubernetes.configuration.storageClasses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PortainerCeApi.PortainerKubernetesStorageClassConfig);
                    {
                      let dataCtr = data.accessModes;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.allowVolumeExpansion).to.be.a('boolean');
                    expect(data.allowVolumeExpansion).to.be(false);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.provisioner).to.be.a('string');
                    expect(data.provisioner).to.be("");
    
                          }
                }
                expect(data.kubernetes.configuration.useLoadBalancer).to.be.a('boolean');
                expect(data.kubernetes.configuration.useLoadBalancer).to.be(false);
                expect(data.kubernetes.configuration.useServerMetrics).to.be.a('boolean');
                expect(data.kubernetes.configuration.useServerMetrics).to.be(false);
              expect(data.kubernetes.flags).to.be.a(PortainerCeApi.PortainerKubernetesFlags);
                    expect(data.kubernetes.flags.isServerIngressClassDetected).to.be.a('boolean');
                expect(data.kubernetes.flags.isServerIngressClassDetected).to.be(false);
                expect(data.kubernetes.flags.isServerMetricsDetected).to.be.a('boolean');
                expect(data.kubernetes.flags.isServerMetricsDetected).to.be(false);
                expect(data.kubernetes.flags.isServerStorageDetected).to.be.a('boolean');
                expect(data.kubernetes.flags.isServerStorageDetected).to.be(false);
              {
                let dataCtr = data.kubernetes.snapshots;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerKubernetesSnapshot);
                  expect(data.kubernetesVersion).to.be.a('string');
                  expect(data.kubernetesVersion).to.be("");
                  expect(data.nodeCount).to.be.a('number');
                  expect(data.nodeCount).to.be(0);
                  expect(data.time).to.be.a('number');
                  expect(data.time).to.be(0);
                  expect(data.totalCPU).to.be.a('number');
                  expect(data.totalCPU).to.be(0);
                  expect(data.totalMemory).to.be.a('number');
                  expect(data.totalMemory).to.be(0);
  
                        }
              }
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("my-environment");
            expect(data.postInitMigrations).to.be.a(PortainerCeApi.PortainerEndpointPostInitMigrations);
                  expect(data.postInitMigrations.migrateGPUs).to.be.a('boolean');
              expect(data.postInitMigrations.migrateGPUs).to.be(false);
              expect(data.postInitMigrations.migrateIngresses).to.be.a('boolean');
              expect(data.postInitMigrations.migrateIngresses).to.be(false);
            expect(data.publicURL).to.be.a('string');
            expect(data.publicURL).to.be("docker.mydomain.tld:2375");
            {
              let dataCtr = data.snapshots;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerDockerSnapshot);
                expect(data.containerCount).to.be.a('number');
                expect(data.containerCount).to.be(0);
                expect(data.dockerSnapshotRaw).to.be.a(PortainerCeApi.PortainerDockerSnapshotRaw);
                    expect(data.dockerVersion).to.be.a('string');
                expect(data.dockerVersion).to.be("");
                expect(data.gpuUseAll).to.be.a('boolean');
                expect(data.gpuUseAll).to.be(false);
                {
                  let dataCtr = data.gpuUseList;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.healthyContainerCount).to.be.a('number');
                expect(data.healthyContainerCount).to.be(0);
                expect(data.imageCount).to.be.a('number');
                expect(data.imageCount).to.be(0);
                expect(data.nodeCount).to.be.a('number');
                expect(data.nodeCount).to.be(0);
                expect(data.runningContainerCount).to.be.a('number');
                expect(data.runningContainerCount).to.be(0);
                expect(data.serviceCount).to.be.a('number');
                expect(data.serviceCount).to.be(0);
                expect(data.stackCount).to.be.a('number');
                expect(data.stackCount).to.be(0);
                expect(data.stoppedContainerCount).to.be.a('number');
                expect(data.stoppedContainerCount).to.be(0);
                expect(data.swarm).to.be.a('boolean');
                expect(data.swarm).to.be(false);
                expect(data.time).to.be.a('number');
                expect(data.time).to.be(0);
                expect(data.totalCPU).to.be.a('number');
                expect(data.totalCPU).to.be(0);
                expect(data.totalMemory).to.be.a('number');
                expect(data.totalMemory).to.be(0);
                expect(data.unhealthyContainerCount).to.be.a('number');
                expect(data.unhealthyContainerCount).to.be(0);
                expect(data.volumeCount).to.be.a('number');
                expect(data.volumeCount).to.be(0);

                      }
            }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.TLS).to.be.a('boolean');
            expect(data.TLS).to.be(false);
            expect(data.tLSCACert).to.be.a('string');
            expect(data.tLSCACert).to.be("");
            expect(data.tLSCert).to.be.a('string');
            expect(data.tLSCert).to.be("");
            expect(data.tLSConfig).to.be.a(PortainerCeApi.PortainerTLSConfiguration);
                  expect(data.tLSConfig.TLS).to.be.a('boolean');
              expect(data.tLSConfig.TLS).to.be(true);
              expect(data.tLSConfig.tLSCACert).to.be.a('string');
              expect(data.tLSConfig.tLSCACert).to.be("/data/tls/ca.pem");
              expect(data.tLSConfig.tLSCert).to.be.a('string');
              expect(data.tLSConfig.tLSCert).to.be("/data/tls/cert.pem");
              expect(data.tLSConfig.tLSKey).to.be.a('string');
              expect(data.tLSConfig.tLSKey).to.be("/data/tls/key.pem");
              expect(data.tLSConfig.tLSSkipVerify).to.be.a('boolean');
              expect(data.tLSConfig.tLSSkipVerify).to.be(false);
            expect(data.tLSKey).to.be.a('string');
            expect(data.tLSKey).to.be("");
            {
              let dataCtr = data.tagIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(1);
              }
            }
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.teamAccessPolicies).to.be.a(PortainerCeApi.PortainerTeamAccessPolicies);
                expect(data.type).to.be.a('number');
            expect(data.type).to.be(1);
            expect(data.URL).to.be.a('string');
            expect(data.URL).to.be("docker.mydomain.tld:2375");
            expect(data.userAccessPolicies).to.be.a(PortainerCeApi.PortainerUserAccessPolicies);
                expect(data.userTrusted).to.be.a('boolean');
            expect(data.userTrusted).to.be(false);
            expect(data.agent).to.be.a(PortainerCeApi.PortainerEndpointAgent);
                  expect(data.agent.version).to.be.a('string');
              expect(data.agent.version).to.be("1.0.0");
            expect(data.edge).to.be.a(PortainerCeApi.PortainerEnvironmentEdgeSettings);
                  expect(data.edge.commandInterval).to.be.a('number');
              expect(data.edge.commandInterval).to.be(60);
              expect(data.edge.pingInterval).to.be.a('number');
              expect(data.edge.pingInterval).to.be(60);
              expect(data.edge.snapshotInterval).to.be.a('number');
              expect(data.edge.snapshotInterval).to.be(60);
              expect(data.edge.asyncMode).to.be.a('boolean');
              expect(data.edge.asyncMode).to.be(false);
            expect(data.lastCheckInDate).to.be.a('number');
            expect(data.lastCheckInDate).to.be(0);
            expect(data.queryDate).to.be.a('number');
            expect(data.queryDate).to.be(0);
            expect(data.securitySettings).to.be.a(PortainerCeApi.PortainerEndpointSecuritySettings);
                  expect(data.securitySettings.allowBindMountsForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowBindMountsForRegularUsers).to.be(false);
              expect(data.securitySettings.allowContainerCapabilitiesForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowContainerCapabilitiesForRegularUsers).to.be(true);
              expect(data.securitySettings.allowDeviceMappingForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowDeviceMappingForRegularUsers).to.be(true);
              expect(data.securitySettings.allowHostNamespaceForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowHostNamespaceForRegularUsers).to.be(true);
              expect(data.securitySettings.allowPrivilegedModeForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowPrivilegedModeForRegularUsers).to.be(false);
              expect(data.securitySettings.allowStackManagementForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowStackManagementForRegularUsers).to.be(true);
              expect(data.securitySettings.allowSysctlSettingForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowSysctlSettingForRegularUsers).to.be(true);
              expect(data.securitySettings.allowVolumeBrowserForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowVolumeBrowserForRegularUsers).to.be(true);
              expect(data.securitySettings.enableHostManagementFeatures).to.be.a('boolean');
              expect(data.securitySettings.enableHostManagementFeatures).to.be(true);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointList', function() {
        it('should call endpointList successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointList call and complete the assertions
          /*
          var opts = {};
          opts.start = 56;
          opts.limit = 56;
          opts.order = 56;
          opts.search = "search_example";
          opts.groupIds = [3.4];
          opts.status = [3.4];
          opts.types = [3.4];
          opts.tagIds = [3.4];
          opts.tagsPartialMatch = true;
          opts.endpointIds = [3.4];
          opts.provisioned = true;
          opts.agentVersions = ["agentVersions_example"];
          opts.edgeAsync = true;
          opts.edgeDeviceUntrusted = true;
          opts.edgeCheckInPassedSeconds = 8.14;
          opts.excludeSnapshots = true;
          opts.name = "name_example";
          opts.edgeStackStatus = "edgeStackStatus_example";

          instance.endpointList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PortainerCeApi.PortainerEndpoint);
              expect(data.aMTDeviceGUID).to.be.a('string');
              expect(data.aMTDeviceGUID).to.be("4c4c4544-004b-3910-8037-b6c04f504633");
              {
                let dataCtr = data.authorizedTeams;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(1);
                }
              }
              {
                let dataCtr = data.authorizedUsers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(1);
                }
              }
              expect(data.azureCredentials).to.be.a(PortainerCeApi.PortainerAzureCredentials);
                    expect(data.azureCredentials.applicationID).to.be.a('string');
                expect(data.azureCredentials.applicationID).to.be("eag7cdo9-o09l-9i83-9dO9-f0b23oe78db4");
                expect(data.azureCredentials.authenticationKey).to.be.a('string');
                expect(data.azureCredentials.authenticationKey).to.be("cOrXoK/1D35w8YQ8nH1/8ZGwzz45JIYD5jxHKXEQknk=");
                expect(data.azureCredentials.tenantID).to.be.a('string');
                expect(data.azureCredentials.tenantID).to.be("34ddc78d-4fel-2358-8cc1-df84c8o839f5");
              expect(data.composeSyntaxMaxVersion).to.be.a('string');
              expect(data.composeSyntaxMaxVersion).to.be("3.8");
              expect(data.edgeCheckinInterval).to.be.a('number');
              expect(data.edgeCheckinInterval).to.be(5);
              expect(data.edgeID).to.be.a('string');
              expect(data.edgeID).to.be("");
              expect(data.edgeKey).to.be.a('string');
              expect(data.edgeKey).to.be("");
              expect(data.enableGPUManagement).to.be.a('boolean');
              expect(data.enableGPUManagement).to.be(false);
              {
                let dataCtr = data.gpus;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerPair);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("name");
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("value");
  
                        }
              }
              expect(data.groupId).to.be.a('number');
              expect(data.groupId).to.be(1);
              expect(data.heartbeat).to.be.a('boolean');
              expect(data.heartbeat).to.be(true);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(1);
              expect(data.isEdgeDevice).to.be.a('boolean');
              expect(data.isEdgeDevice).to.be(false);
              expect(data.kubernetes).to.be.a(PortainerCeApi.PortainerKubernetesData);
                    expect(data.kubernetes.configuration).to.be.a(PortainerCeApi.PortainerKubernetesConfiguration);
                      expect(data.kubernetes.configuration.allowNoneIngressClass).to.be.a('boolean');
                  expect(data.kubernetes.configuration.allowNoneIngressClass).to.be(false);
                  expect(data.kubernetes.configuration.enableResourceOverCommit).to.be.a('boolean');
                  expect(data.kubernetes.configuration.enableResourceOverCommit).to.be(false);
                  expect(data.kubernetes.configuration.ingressAvailabilityPerNamespace).to.be.a('boolean');
                  expect(data.kubernetes.configuration.ingressAvailabilityPerNamespace).to.be(false);
                  {
                    let dataCtr = data.kubernetes.configuration.ingressClasses;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PortainerCeApi.PortainerKubernetesIngressClassConfig);
                      expect(data.blocked).to.be.a('boolean');
                      expect(data.blocked).to.be(false);
                      {
                        let dataCtr = data.blockedNamespaces;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("");
      
                            }
                  }
                  expect(data.kubernetes.configuration.resourceOverCommitPercentage).to.be.a('number');
                  expect(data.kubernetes.configuration.resourceOverCommitPercentage).to.be(0);
                  expect(data.kubernetes.configuration.restrictDefaultNamespace).to.be.a('boolean');
                  expect(data.kubernetes.configuration.restrictDefaultNamespace).to.be(false);
                  {
                    let dataCtr = data.kubernetes.configuration.storageClasses;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PortainerCeApi.PortainerKubernetesStorageClassConfig);
                      {
                        let dataCtr = data.accessModes;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      expect(data.allowVolumeExpansion).to.be.a('boolean');
                      expect(data.allowVolumeExpansion).to.be(false);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.provisioner).to.be.a('string');
                      expect(data.provisioner).to.be("");
      
                            }
                  }
                  expect(data.kubernetes.configuration.useLoadBalancer).to.be.a('boolean');
                  expect(data.kubernetes.configuration.useLoadBalancer).to.be(false);
                  expect(data.kubernetes.configuration.useServerMetrics).to.be.a('boolean');
                  expect(data.kubernetes.configuration.useServerMetrics).to.be(false);
                expect(data.kubernetes.flags).to.be.a(PortainerCeApi.PortainerKubernetesFlags);
                      expect(data.kubernetes.flags.isServerIngressClassDetected).to.be.a('boolean');
                  expect(data.kubernetes.flags.isServerIngressClassDetected).to.be(false);
                  expect(data.kubernetes.flags.isServerMetricsDetected).to.be.a('boolean');
                  expect(data.kubernetes.flags.isServerMetricsDetected).to.be(false);
                  expect(data.kubernetes.flags.isServerStorageDetected).to.be.a('boolean');
                  expect(data.kubernetes.flags.isServerStorageDetected).to.be(false);
                {
                  let dataCtr = data.kubernetes.snapshots;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PortainerCeApi.PortainerKubernetesSnapshot);
                    expect(data.kubernetesVersion).to.be.a('string');
                    expect(data.kubernetesVersion).to.be("");
                    expect(data.nodeCount).to.be.a('number');
                    expect(data.nodeCount).to.be(0);
                    expect(data.time).to.be.a('number');
                    expect(data.time).to.be(0);
                    expect(data.totalCPU).to.be.a('number');
                    expect(data.totalCPU).to.be(0);
                    expect(data.totalMemory).to.be.a('number');
                    expect(data.totalMemory).to.be(0);
    
                          }
                }
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("my-environment");
              expect(data.postInitMigrations).to.be.a(PortainerCeApi.PortainerEndpointPostInitMigrations);
                    expect(data.postInitMigrations.migrateGPUs).to.be.a('boolean');
                expect(data.postInitMigrations.migrateGPUs).to.be(false);
                expect(data.postInitMigrations.migrateIngresses).to.be.a('boolean');
                expect(data.postInitMigrations.migrateIngresses).to.be(false);
              expect(data.publicURL).to.be.a('string');
              expect(data.publicURL).to.be("docker.mydomain.tld:2375");
              {
                let dataCtr = data.snapshots;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerDockerSnapshot);
                  expect(data.containerCount).to.be.a('number');
                  expect(data.containerCount).to.be(0);
                  expect(data.dockerSnapshotRaw).to.be.a(PortainerCeApi.PortainerDockerSnapshotRaw);
                      expect(data.dockerVersion).to.be.a('string');
                  expect(data.dockerVersion).to.be("");
                  expect(data.gpuUseAll).to.be.a('boolean');
                  expect(data.gpuUseAll).to.be(false);
                  {
                    let dataCtr = data.gpuUseList;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.healthyContainerCount).to.be.a('number');
                  expect(data.healthyContainerCount).to.be(0);
                  expect(data.imageCount).to.be.a('number');
                  expect(data.imageCount).to.be(0);
                  expect(data.nodeCount).to.be.a('number');
                  expect(data.nodeCount).to.be(0);
                  expect(data.runningContainerCount).to.be.a('number');
                  expect(data.runningContainerCount).to.be(0);
                  expect(data.serviceCount).to.be.a('number');
                  expect(data.serviceCount).to.be(0);
                  expect(data.stackCount).to.be.a('number');
                  expect(data.stackCount).to.be(0);
                  expect(data.stoppedContainerCount).to.be.a('number');
                  expect(data.stoppedContainerCount).to.be(0);
                  expect(data.swarm).to.be.a('boolean');
                  expect(data.swarm).to.be(false);
                  expect(data.time).to.be.a('number');
                  expect(data.time).to.be(0);
                  expect(data.totalCPU).to.be.a('number');
                  expect(data.totalCPU).to.be(0);
                  expect(data.totalMemory).to.be.a('number');
                  expect(data.totalMemory).to.be(0);
                  expect(data.unhealthyContainerCount).to.be.a('number');
                  expect(data.unhealthyContainerCount).to.be(0);
                  expect(data.volumeCount).to.be.a('number');
                  expect(data.volumeCount).to.be(0);
  
                        }
              }
              expect(data.status).to.be.a('number');
              expect(data.status).to.be(1);
              expect(data.TLS).to.be.a('boolean');
              expect(data.TLS).to.be(false);
              expect(data.tLSCACert).to.be.a('string');
              expect(data.tLSCACert).to.be("");
              expect(data.tLSCert).to.be.a('string');
              expect(data.tLSCert).to.be("");
              expect(data.tLSConfig).to.be.a(PortainerCeApi.PortainerTLSConfiguration);
                    expect(data.tLSConfig.TLS).to.be.a('boolean');
                expect(data.tLSConfig.TLS).to.be(true);
                expect(data.tLSConfig.tLSCACert).to.be.a('string');
                expect(data.tLSConfig.tLSCACert).to.be("/data/tls/ca.pem");
                expect(data.tLSConfig.tLSCert).to.be.a('string');
                expect(data.tLSConfig.tLSCert).to.be("/data/tls/cert.pem");
                expect(data.tLSConfig.tLSKey).to.be.a('string');
                expect(data.tLSConfig.tLSKey).to.be("/data/tls/key.pem");
                expect(data.tLSConfig.tLSSkipVerify).to.be.a('boolean');
                expect(data.tLSConfig.tLSSkipVerify).to.be(false);
              expect(data.tLSKey).to.be.a('string');
              expect(data.tLSKey).to.be("");
              {
                let dataCtr = data.tagIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(1);
                }
              }
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.teamAccessPolicies).to.be.a(PortainerCeApi.PortainerTeamAccessPolicies);
                  expect(data.type).to.be.a('number');
              expect(data.type).to.be(1);
              expect(data.URL).to.be.a('string');
              expect(data.URL).to.be("docker.mydomain.tld:2375");
              expect(data.userAccessPolicies).to.be.a(PortainerCeApi.PortainerUserAccessPolicies);
                  expect(data.userTrusted).to.be.a('boolean');
              expect(data.userTrusted).to.be(false);
              expect(data.agent).to.be.a(PortainerCeApi.PortainerEndpointAgent);
                    expect(data.agent.version).to.be.a('string');
                expect(data.agent.version).to.be("1.0.0");
              expect(data.edge).to.be.a(PortainerCeApi.PortainerEnvironmentEdgeSettings);
                    expect(data.edge.commandInterval).to.be.a('number');
                expect(data.edge.commandInterval).to.be(60);
                expect(data.edge.pingInterval).to.be.a('number');
                expect(data.edge.pingInterval).to.be(60);
                expect(data.edge.snapshotInterval).to.be.a('number');
                expect(data.edge.snapshotInterval).to.be(60);
                expect(data.edge.asyncMode).to.be.a('boolean');
                expect(data.edge.asyncMode).to.be(false);
              expect(data.lastCheckInDate).to.be.a('number');
              expect(data.lastCheckInDate).to.be(0);
              expect(data.queryDate).to.be.a('number');
              expect(data.queryDate).to.be(0);
              expect(data.securitySettings).to.be.a(PortainerCeApi.PortainerEndpointSecuritySettings);
                    expect(data.securitySettings.allowBindMountsForRegularUsers).to.be.a('boolean');
                expect(data.securitySettings.allowBindMountsForRegularUsers).to.be(false);
                expect(data.securitySettings.allowContainerCapabilitiesForRegularUsers).to.be.a('boolean');
                expect(data.securitySettings.allowContainerCapabilitiesForRegularUsers).to.be(true);
                expect(data.securitySettings.allowDeviceMappingForRegularUsers).to.be.a('boolean');
                expect(data.securitySettings.allowDeviceMappingForRegularUsers).to.be(true);
                expect(data.securitySettings.allowHostNamespaceForRegularUsers).to.be.a('boolean');
                expect(data.securitySettings.allowHostNamespaceForRegularUsers).to.be(true);
                expect(data.securitySettings.allowPrivilegedModeForRegularUsers).to.be.a('boolean');
                expect(data.securitySettings.allowPrivilegedModeForRegularUsers).to.be(false);
                expect(data.securitySettings.allowStackManagementForRegularUsers).to.be.a('boolean');
                expect(data.securitySettings.allowStackManagementForRegularUsers).to.be(true);
                expect(data.securitySettings.allowSysctlSettingForRegularUsers).to.be.a('boolean');
                expect(data.securitySettings.allowSysctlSettingForRegularUsers).to.be(true);
                expect(data.securitySettings.allowVolumeBrowserForRegularUsers).to.be.a('boolean');
                expect(data.securitySettings.allowVolumeBrowserForRegularUsers).to.be(true);
                expect(data.securitySettings.enableHostManagementFeatures).to.be.a('boolean');
                expect(data.securitySettings.enableHostManagementFeatures).to.be(true);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointRegistriesList', function() {
        it('should call endpointRegistriesList successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointRegistriesList call and complete the assertions
          /*
          var id = 56;
          var opts = {};
          opts.namespace = "namespace_example";

          instance.endpointRegistriesList(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PortainerCeApi.PortainerRegistry);
              expect(data.accessToken).to.be.a('string');
              expect(data.accessToken).to.be("");
              expect(data.accessTokenExpiry).to.be.a('number');
              expect(data.accessTokenExpiry).to.be(0);
              expect(data.authentication).to.be.a('boolean');
              expect(data.authentication).to.be(true);
              {
                let dataCtr = data.authorizedTeams;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(1);
                }
              }
              {
                let dataCtr = data.authorizedUsers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(1);
                }
              }
              expect(data.baseURL).to.be.a('string');
              expect(data.baseURL).to.be("registry.mydomain.tld:2375");
              expect(data.ecr).to.be.a(PortainerCeApi.PortainerEcrData);
                    expect(data.ecr.region).to.be.a('string');
                expect(data.ecr.region).to.be("ap-southeast-2");
              expect(data.gitlab).to.be.a(PortainerCeApi.PortainerGitlabRegistryData);
                    expect(data.gitlab.instanceURL).to.be.a('string');
                expect(data.gitlab.instanceURL).to.be("");
                expect(data.gitlab.projectId).to.be.a('number');
                expect(data.gitlab.projectId).to.be(0);
                expect(data.gitlab.projectPath).to.be.a('string');
                expect(data.gitlab.projectPath).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(1);
              expect(data.managementConfiguration).to.be.a(PortainerCeApi.PortainerRegistryManagementConfiguration);
                    expect(data.managementConfiguration.accessToken).to.be.a('string');
                expect(data.managementConfiguration.accessToken).to.be("");
                expect(data.managementConfiguration.accessTokenExpiry).to.be.a('number');
                expect(data.managementConfiguration.accessTokenExpiry).to.be(0);
                expect(data.managementConfiguration.authentication).to.be.a('boolean');
                expect(data.managementConfiguration.authentication).to.be(false);
                expect(data.managementConfiguration.ecr).to.be.a(PortainerCeApi.PortainerEcrData);
                      expect(data.managementConfiguration.ecr.region).to.be.a('string');
                  expect(data.managementConfiguration.ecr.region).to.be("ap-southeast-2");
                expect(data.managementConfiguration.password).to.be.a('string');
                expect(data.managementConfiguration.password).to.be("");
                expect(data.managementConfiguration.tLSConfig).to.be.a(PortainerCeApi.PortainerTLSConfiguration);
                      expect(data.managementConfiguration.tLSConfig.TLS).to.be.a('boolean');
                  expect(data.managementConfiguration.tLSConfig.TLS).to.be(true);
                  expect(data.managementConfiguration.tLSConfig.tLSCACert).to.be.a('string');
                  expect(data.managementConfiguration.tLSConfig.tLSCACert).to.be("/data/tls/ca.pem");
                  expect(data.managementConfiguration.tLSConfig.tLSCert).to.be.a('string');
                  expect(data.managementConfiguration.tLSConfig.tLSCert).to.be("/data/tls/cert.pem");
                  expect(data.managementConfiguration.tLSConfig.tLSKey).to.be.a('string');
                  expect(data.managementConfiguration.tLSConfig.tLSKey).to.be("/data/tls/key.pem");
                  expect(data.managementConfiguration.tLSConfig.tLSSkipVerify).to.be.a('boolean');
                  expect(data.managementConfiguration.tLSConfig.tLSSkipVerify).to.be(false);
                expect(data.managementConfiguration.type).to.be.a('number');
                expect(data.managementConfiguration.type).to.be(0);
                expect(data.managementConfiguration.username).to.be.a('string');
                expect(data.managementConfiguration.username).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("my-registry");
              expect(data.password).to.be.a('string');
              expect(data.password).to.be("registry_password");
              expect(data.quay).to.be.a(PortainerCeApi.PortainerQuayRegistryData);
                    expect(data.quay.organisationName).to.be.a('string');
                expect(data.quay.organisationName).to.be("");
                expect(data.quay.useOrganisation).to.be.a('boolean');
                expect(data.quay.useOrganisation).to.be(false);
              expect(data.registryAccesses).to.be.a(PortainerCeApi.PortainerRegistryAccesses);
                  expect(data.teamAccessPolicies).to.be.a(PortainerCeApi.PortainerTeamAccessPolicies);
                  expect(data.type).to.be.a('number');
              expect(data.type).to.be(0);
              expect(data.URL).to.be.a('string');
              expect(data.URL).to.be("registry.mydomain.tld:2375");
              expect(data.userAccessPolicies).to.be.a(PortainerCeApi.PortainerUserAccessPolicies);
                  expect(data.username).to.be.a('string');
              expect(data.username).to.be("registry user");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointRegistryAccess', function() {
        it('should call endpointRegistryAccess successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointRegistryAccess call
          /*
          var id = 56;
          var registryId = 56;
          var body = new PortainerCeApi.EndpointsRegistryAccessPayload();
          body.namespaces = [""];
          body.teamAccessPolicies = new PortainerCeApi.PortainerTeamAccessPolicies();
          body.userAccessPolicies = new PortainerCeApi.PortainerUserAccessPolicies();

          instance.endpointRegistryAccess(id, registryId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointSettingsUpdate', function() {
        it('should call endpointSettingsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointSettingsUpdate call and complete the assertions
          /*
          var id = 56;
          var body = new PortainerCeApi.EndpointsEndpointSettingsUpdatePayload();
          body.allowBindMountsForRegularUsers = false;
          body.allowContainerCapabilitiesForRegularUsers = true;
          body.allowDeviceMappingForRegularUsers = true;
          body.allowHostNamespaceForRegularUsers = true;
          body.allowPrivilegedModeForRegularUsers = false;
          body.allowStackManagementForRegularUsers = true;
          body.allowSysctlSettingForRegularUsers = true;
          body.allowVolumeBrowserForRegularUsers = true;
          body.enableGPUManagement = false;
          body.enableHostManagementFeatures = true;
          body.gpus = [new PortainerCeApi.PortainerPair()];
          body.gpus[0].name = "name";
          body.gpus[0].value = "value";

          instance.endpointSettingsUpdate(id, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerEndpoint);
            expect(data.aMTDeviceGUID).to.be.a('string');
            expect(data.aMTDeviceGUID).to.be("4c4c4544-004b-3910-8037-b6c04f504633");
            {
              let dataCtr = data.authorizedTeams;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(1);
              }
            }
            {
              let dataCtr = data.authorizedUsers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(1);
              }
            }
            expect(data.azureCredentials).to.be.a(PortainerCeApi.PortainerAzureCredentials);
                  expect(data.azureCredentials.applicationID).to.be.a('string');
              expect(data.azureCredentials.applicationID).to.be("eag7cdo9-o09l-9i83-9dO9-f0b23oe78db4");
              expect(data.azureCredentials.authenticationKey).to.be.a('string');
              expect(data.azureCredentials.authenticationKey).to.be("cOrXoK/1D35w8YQ8nH1/8ZGwzz45JIYD5jxHKXEQknk=");
              expect(data.azureCredentials.tenantID).to.be.a('string');
              expect(data.azureCredentials.tenantID).to.be("34ddc78d-4fel-2358-8cc1-df84c8o839f5");
            expect(data.composeSyntaxMaxVersion).to.be.a('string');
            expect(data.composeSyntaxMaxVersion).to.be("3.8");
            expect(data.edgeCheckinInterval).to.be.a('number');
            expect(data.edgeCheckinInterval).to.be(5);
            expect(data.edgeID).to.be.a('string');
            expect(data.edgeID).to.be("");
            expect(data.edgeKey).to.be.a('string');
            expect(data.edgeKey).to.be("");
            expect(data.enableGPUManagement).to.be.a('boolean');
            expect(data.enableGPUManagement).to.be(false);
            {
              let dataCtr = data.gpus;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.groupId).to.be.a('number');
            expect(data.groupId).to.be(1);
            expect(data.heartbeat).to.be.a('boolean');
            expect(data.heartbeat).to.be(true);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.isEdgeDevice).to.be.a('boolean');
            expect(data.isEdgeDevice).to.be(false);
            expect(data.kubernetes).to.be.a(PortainerCeApi.PortainerKubernetesData);
                  expect(data.kubernetes.configuration).to.be.a(PortainerCeApi.PortainerKubernetesConfiguration);
                    expect(data.kubernetes.configuration.allowNoneIngressClass).to.be.a('boolean');
                expect(data.kubernetes.configuration.allowNoneIngressClass).to.be(false);
                expect(data.kubernetes.configuration.enableResourceOverCommit).to.be.a('boolean');
                expect(data.kubernetes.configuration.enableResourceOverCommit).to.be(false);
                expect(data.kubernetes.configuration.ingressAvailabilityPerNamespace).to.be.a('boolean');
                expect(data.kubernetes.configuration.ingressAvailabilityPerNamespace).to.be(false);
                {
                  let dataCtr = data.kubernetes.configuration.ingressClasses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PortainerCeApi.PortainerKubernetesIngressClassConfig);
                    expect(data.blocked).to.be.a('boolean');
                    expect(data.blocked).to.be(false);
                    {
                      let dataCtr = data.blockedNamespaces;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
    
                          }
                }
                expect(data.kubernetes.configuration.resourceOverCommitPercentage).to.be.a('number');
                expect(data.kubernetes.configuration.resourceOverCommitPercentage).to.be(0);
                expect(data.kubernetes.configuration.restrictDefaultNamespace).to.be.a('boolean');
                expect(data.kubernetes.configuration.restrictDefaultNamespace).to.be(false);
                {
                  let dataCtr = data.kubernetes.configuration.storageClasses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PortainerCeApi.PortainerKubernetesStorageClassConfig);
                    {
                      let dataCtr = data.accessModes;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.allowVolumeExpansion).to.be.a('boolean');
                    expect(data.allowVolumeExpansion).to.be(false);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.provisioner).to.be.a('string');
                    expect(data.provisioner).to.be("");
    
                          }
                }
                expect(data.kubernetes.configuration.useLoadBalancer).to.be.a('boolean');
                expect(data.kubernetes.configuration.useLoadBalancer).to.be(false);
                expect(data.kubernetes.configuration.useServerMetrics).to.be.a('boolean');
                expect(data.kubernetes.configuration.useServerMetrics).to.be(false);
              expect(data.kubernetes.flags).to.be.a(PortainerCeApi.PortainerKubernetesFlags);
                    expect(data.kubernetes.flags.isServerIngressClassDetected).to.be.a('boolean');
                expect(data.kubernetes.flags.isServerIngressClassDetected).to.be(false);
                expect(data.kubernetes.flags.isServerMetricsDetected).to.be.a('boolean');
                expect(data.kubernetes.flags.isServerMetricsDetected).to.be(false);
                expect(data.kubernetes.flags.isServerStorageDetected).to.be.a('boolean');
                expect(data.kubernetes.flags.isServerStorageDetected).to.be(false);
              {
                let dataCtr = data.kubernetes.snapshots;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerKubernetesSnapshot);
                  expect(data.kubernetesVersion).to.be.a('string');
                  expect(data.kubernetesVersion).to.be("");
                  expect(data.nodeCount).to.be.a('number');
                  expect(data.nodeCount).to.be(0);
                  expect(data.time).to.be.a('number');
                  expect(data.time).to.be(0);
                  expect(data.totalCPU).to.be.a('number');
                  expect(data.totalCPU).to.be(0);
                  expect(data.totalMemory).to.be.a('number');
                  expect(data.totalMemory).to.be(0);
  
                        }
              }
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("my-environment");
            expect(data.postInitMigrations).to.be.a(PortainerCeApi.PortainerEndpointPostInitMigrations);
                  expect(data.postInitMigrations.migrateGPUs).to.be.a('boolean');
              expect(data.postInitMigrations.migrateGPUs).to.be(false);
              expect(data.postInitMigrations.migrateIngresses).to.be.a('boolean');
              expect(data.postInitMigrations.migrateIngresses).to.be(false);
            expect(data.publicURL).to.be.a('string');
            expect(data.publicURL).to.be("docker.mydomain.tld:2375");
            {
              let dataCtr = data.snapshots;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerDockerSnapshot);
                expect(data.containerCount).to.be.a('number');
                expect(data.containerCount).to.be(0);
                expect(data.dockerSnapshotRaw).to.be.a(PortainerCeApi.PortainerDockerSnapshotRaw);
                    expect(data.dockerVersion).to.be.a('string');
                expect(data.dockerVersion).to.be("");
                expect(data.gpuUseAll).to.be.a('boolean');
                expect(data.gpuUseAll).to.be(false);
                {
                  let dataCtr = data.gpuUseList;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.healthyContainerCount).to.be.a('number');
                expect(data.healthyContainerCount).to.be(0);
                expect(data.imageCount).to.be.a('number');
                expect(data.imageCount).to.be(0);
                expect(data.nodeCount).to.be.a('number');
                expect(data.nodeCount).to.be(0);
                expect(data.runningContainerCount).to.be.a('number');
                expect(data.runningContainerCount).to.be(0);
                expect(data.serviceCount).to.be.a('number');
                expect(data.serviceCount).to.be(0);
                expect(data.stackCount).to.be.a('number');
                expect(data.stackCount).to.be(0);
                expect(data.stoppedContainerCount).to.be.a('number');
                expect(data.stoppedContainerCount).to.be(0);
                expect(data.swarm).to.be.a('boolean');
                expect(data.swarm).to.be(false);
                expect(data.time).to.be.a('number');
                expect(data.time).to.be(0);
                expect(data.totalCPU).to.be.a('number');
                expect(data.totalCPU).to.be(0);
                expect(data.totalMemory).to.be.a('number');
                expect(data.totalMemory).to.be(0);
                expect(data.unhealthyContainerCount).to.be.a('number');
                expect(data.unhealthyContainerCount).to.be(0);
                expect(data.volumeCount).to.be.a('number');
                expect(data.volumeCount).to.be(0);

                      }
            }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.TLS).to.be.a('boolean');
            expect(data.TLS).to.be(false);
            expect(data.tLSCACert).to.be.a('string');
            expect(data.tLSCACert).to.be("");
            expect(data.tLSCert).to.be.a('string');
            expect(data.tLSCert).to.be("");
            expect(data.tLSConfig).to.be.a(PortainerCeApi.PortainerTLSConfiguration);
                  expect(data.tLSConfig.TLS).to.be.a('boolean');
              expect(data.tLSConfig.TLS).to.be(true);
              expect(data.tLSConfig.tLSCACert).to.be.a('string');
              expect(data.tLSConfig.tLSCACert).to.be("/data/tls/ca.pem");
              expect(data.tLSConfig.tLSCert).to.be.a('string');
              expect(data.tLSConfig.tLSCert).to.be("/data/tls/cert.pem");
              expect(data.tLSConfig.tLSKey).to.be.a('string');
              expect(data.tLSConfig.tLSKey).to.be("/data/tls/key.pem");
              expect(data.tLSConfig.tLSSkipVerify).to.be.a('boolean');
              expect(data.tLSConfig.tLSSkipVerify).to.be(false);
            expect(data.tLSKey).to.be.a('string');
            expect(data.tLSKey).to.be("");
            {
              let dataCtr = data.tagIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(1);
              }
            }
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.teamAccessPolicies).to.be.a(PortainerCeApi.PortainerTeamAccessPolicies);
                expect(data.type).to.be.a('number');
            expect(data.type).to.be(1);
            expect(data.URL).to.be.a('string');
            expect(data.URL).to.be("docker.mydomain.tld:2375");
            expect(data.userAccessPolicies).to.be.a(PortainerCeApi.PortainerUserAccessPolicies);
                expect(data.userTrusted).to.be.a('boolean');
            expect(data.userTrusted).to.be(false);
            expect(data.agent).to.be.a(PortainerCeApi.PortainerEndpointAgent);
                  expect(data.agent.version).to.be.a('string');
              expect(data.agent.version).to.be("1.0.0");
            expect(data.edge).to.be.a(PortainerCeApi.PortainerEnvironmentEdgeSettings);
                  expect(data.edge.commandInterval).to.be.a('number');
              expect(data.edge.commandInterval).to.be(60);
              expect(data.edge.pingInterval).to.be.a('number');
              expect(data.edge.pingInterval).to.be(60);
              expect(data.edge.snapshotInterval).to.be.a('number');
              expect(data.edge.snapshotInterval).to.be(60);
              expect(data.edge.asyncMode).to.be.a('boolean');
              expect(data.edge.asyncMode).to.be(false);
            expect(data.lastCheckInDate).to.be.a('number');
            expect(data.lastCheckInDate).to.be(0);
            expect(data.queryDate).to.be.a('number');
            expect(data.queryDate).to.be(0);
            expect(data.securitySettings).to.be.a(PortainerCeApi.PortainerEndpointSecuritySettings);
                  expect(data.securitySettings.allowBindMountsForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowBindMountsForRegularUsers).to.be(false);
              expect(data.securitySettings.allowContainerCapabilitiesForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowContainerCapabilitiesForRegularUsers).to.be(true);
              expect(data.securitySettings.allowDeviceMappingForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowDeviceMappingForRegularUsers).to.be(true);
              expect(data.securitySettings.allowHostNamespaceForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowHostNamespaceForRegularUsers).to.be(true);
              expect(data.securitySettings.allowPrivilegedModeForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowPrivilegedModeForRegularUsers).to.be(false);
              expect(data.securitySettings.allowStackManagementForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowStackManagementForRegularUsers).to.be(true);
              expect(data.securitySettings.allowSysctlSettingForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowSysctlSettingForRegularUsers).to.be(true);
              expect(data.securitySettings.allowVolumeBrowserForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowVolumeBrowserForRegularUsers).to.be(true);
              expect(data.securitySettings.enableHostManagementFeatures).to.be.a('boolean');
              expect(data.securitySettings.enableHostManagementFeatures).to.be(true);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointSnapshot', function() {
        it('should call endpointSnapshot successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointSnapshot call
          /*
          var id = 56;

          instance.endpointSnapshot(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointSnapshots', function() {
        it('should call endpointSnapshots successfully', function(done) {
          // TODO: uncomment endpointSnapshots call
          /*

          instance.endpointSnapshots(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointUpdate', function() {
        it('should call endpointUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointUpdate call and complete the assertions
          /*
          var id = 56;
          var body = new PortainerCeApi.EndpointsEndpointUpdatePayload();
          body.azureApplicationID = "eag7cdo9-o09l-9i83-9dO9-f0b23oe78db4";
          body.azureAuthenticationKey = "cOrXoK/1D35w8YQ8nH1/8ZGwzz45JIYD5jxHKXEQknk=";
          body.azureTenantID = "34ddc78d-4fel-2358-8cc1-df84c8o839f5";
          body.edgeCheckinInterval = 5;
          body.gpus = [new PortainerCeApi.PortainerPair()];
          body.gpus[0].name = "name";
          body.gpus[0].value = "value";
          body.groupID = 1;
          body.kubernetes = new PortainerCeApi.PortainerKubernetesData();
          body.kubernetes.configuration = new PortainerCeApi.PortainerKubernetesConfiguration();
          body.kubernetes.configuration.allowNoneIngressClass = false;
          body.kubernetes.configuration.enableResourceOverCommit = false;
          body.kubernetes.configuration.ingressAvailabilityPerNamespace = false;
          body.kubernetes.configuration.ingressClasses = [new PortainerCeApi.PortainerKubernetesIngressClassConfig()];
          body.kubernetes.configuration.ingressClasses[0].blocked = false;
          body.kubernetes.configuration.ingressClasses[0].blockedNamespaces = [""];
          body.kubernetes.configuration.ingressClasses[0].name = "";
          body.kubernetes.configuration.ingressClasses[0].type = "";
          body.kubernetes.configuration.resourceOverCommitPercentage = 0;
          body.kubernetes.configuration.restrictDefaultNamespace = false;
          body.kubernetes.configuration.storageClasses = [new PortainerCeApi.PortainerKubernetesStorageClassConfig()];
          body.kubernetes.configuration.storageClasses[0].accessModes = [""];
          body.kubernetes.configuration.storageClasses[0].allowVolumeExpansion = false;
          body.kubernetes.configuration.storageClasses[0].name = "";
          body.kubernetes.configuration.storageClasses[0].provisioner = "";
          body.kubernetes.configuration.useLoadBalancer = false;
          body.kubernetes.configuration.useServerMetrics = false;
          body.kubernetes.flags = new PortainerCeApi.PortainerKubernetesFlags();
          body.kubernetes.flags.isServerIngressClassDetected = false;
          body.kubernetes.flags.isServerMetricsDetected = false;
          body.kubernetes.flags.isServerStorageDetected = false;
          body.kubernetes.snapshots = [new PortainerCeApi.PortainerKubernetesSnapshot()];
          body.kubernetes.snapshots[0].kubernetesVersion = "";
          body.kubernetes.snapshots[0].nodeCount = 0;
          body.kubernetes.snapshots[0].time = 0;
          body.kubernetes.snapshots[0].totalCPU = 0;
          body.kubernetes.snapshots[0].totalMemory = 0;
          body.name = "my-environment";
          body.publicURL = "docker.mydomain.tld:2375";
          body.status = 1;
          body.tagIDs = [1,2];
          body.teamAccessPolicies = new PortainerCeApi.PortainerTeamAccessPolicies();
          body.tls = true;
          body.tlsskipClientVerify = false;
          body.tlsskipVerify = false;
          body.url = "docker.mydomain.tld:2375";
          body.userAccessPolicies = new PortainerCeApi.PortainerUserAccessPolicies();

          instance.endpointUpdate(id, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerEndpoint);
            expect(data.aMTDeviceGUID).to.be.a('string');
            expect(data.aMTDeviceGUID).to.be("4c4c4544-004b-3910-8037-b6c04f504633");
            {
              let dataCtr = data.authorizedTeams;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(1);
              }
            }
            {
              let dataCtr = data.authorizedUsers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(1);
              }
            }
            expect(data.azureCredentials).to.be.a(PortainerCeApi.PortainerAzureCredentials);
                  expect(data.azureCredentials.applicationID).to.be.a('string');
              expect(data.azureCredentials.applicationID).to.be("eag7cdo9-o09l-9i83-9dO9-f0b23oe78db4");
              expect(data.azureCredentials.authenticationKey).to.be.a('string');
              expect(data.azureCredentials.authenticationKey).to.be("cOrXoK/1D35w8YQ8nH1/8ZGwzz45JIYD5jxHKXEQknk=");
              expect(data.azureCredentials.tenantID).to.be.a('string');
              expect(data.azureCredentials.tenantID).to.be("34ddc78d-4fel-2358-8cc1-df84c8o839f5");
            expect(data.composeSyntaxMaxVersion).to.be.a('string');
            expect(data.composeSyntaxMaxVersion).to.be("3.8");
            expect(data.edgeCheckinInterval).to.be.a('number');
            expect(data.edgeCheckinInterval).to.be(5);
            expect(data.edgeID).to.be.a('string');
            expect(data.edgeID).to.be("");
            expect(data.edgeKey).to.be.a('string');
            expect(data.edgeKey).to.be("");
            expect(data.enableGPUManagement).to.be.a('boolean');
            expect(data.enableGPUManagement).to.be(false);
            {
              let dataCtr = data.gpus;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.groupId).to.be.a('number');
            expect(data.groupId).to.be(1);
            expect(data.heartbeat).to.be.a('boolean');
            expect(data.heartbeat).to.be(true);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.isEdgeDevice).to.be.a('boolean');
            expect(data.isEdgeDevice).to.be(false);
            expect(data.kubernetes).to.be.a(PortainerCeApi.PortainerKubernetesData);
                  expect(data.kubernetes.configuration).to.be.a(PortainerCeApi.PortainerKubernetesConfiguration);
                    expect(data.kubernetes.configuration.allowNoneIngressClass).to.be.a('boolean');
                expect(data.kubernetes.configuration.allowNoneIngressClass).to.be(false);
                expect(data.kubernetes.configuration.enableResourceOverCommit).to.be.a('boolean');
                expect(data.kubernetes.configuration.enableResourceOverCommit).to.be(false);
                expect(data.kubernetes.configuration.ingressAvailabilityPerNamespace).to.be.a('boolean');
                expect(data.kubernetes.configuration.ingressAvailabilityPerNamespace).to.be(false);
                {
                  let dataCtr = data.kubernetes.configuration.ingressClasses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PortainerCeApi.PortainerKubernetesIngressClassConfig);
                    expect(data.blocked).to.be.a('boolean');
                    expect(data.blocked).to.be(false);
                    {
                      let dataCtr = data.blockedNamespaces;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
    
                          }
                }
                expect(data.kubernetes.configuration.resourceOverCommitPercentage).to.be.a('number');
                expect(data.kubernetes.configuration.resourceOverCommitPercentage).to.be(0);
                expect(data.kubernetes.configuration.restrictDefaultNamespace).to.be.a('boolean');
                expect(data.kubernetes.configuration.restrictDefaultNamespace).to.be(false);
                {
                  let dataCtr = data.kubernetes.configuration.storageClasses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PortainerCeApi.PortainerKubernetesStorageClassConfig);
                    {
                      let dataCtr = data.accessModes;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.allowVolumeExpansion).to.be.a('boolean');
                    expect(data.allowVolumeExpansion).to.be(false);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.provisioner).to.be.a('string');
                    expect(data.provisioner).to.be("");
    
                          }
                }
                expect(data.kubernetes.configuration.useLoadBalancer).to.be.a('boolean');
                expect(data.kubernetes.configuration.useLoadBalancer).to.be(false);
                expect(data.kubernetes.configuration.useServerMetrics).to.be.a('boolean');
                expect(data.kubernetes.configuration.useServerMetrics).to.be(false);
              expect(data.kubernetes.flags).to.be.a(PortainerCeApi.PortainerKubernetesFlags);
                    expect(data.kubernetes.flags.isServerIngressClassDetected).to.be.a('boolean');
                expect(data.kubernetes.flags.isServerIngressClassDetected).to.be(false);
                expect(data.kubernetes.flags.isServerMetricsDetected).to.be.a('boolean');
                expect(data.kubernetes.flags.isServerMetricsDetected).to.be(false);
                expect(data.kubernetes.flags.isServerStorageDetected).to.be.a('boolean');
                expect(data.kubernetes.flags.isServerStorageDetected).to.be(false);
              {
                let dataCtr = data.kubernetes.snapshots;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerKubernetesSnapshot);
                  expect(data.kubernetesVersion).to.be.a('string');
                  expect(data.kubernetesVersion).to.be("");
                  expect(data.nodeCount).to.be.a('number');
                  expect(data.nodeCount).to.be(0);
                  expect(data.time).to.be.a('number');
                  expect(data.time).to.be(0);
                  expect(data.totalCPU).to.be.a('number');
                  expect(data.totalCPU).to.be(0);
                  expect(data.totalMemory).to.be.a('number');
                  expect(data.totalMemory).to.be(0);
  
                        }
              }
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("my-environment");
            expect(data.postInitMigrations).to.be.a(PortainerCeApi.PortainerEndpointPostInitMigrations);
                  expect(data.postInitMigrations.migrateGPUs).to.be.a('boolean');
              expect(data.postInitMigrations.migrateGPUs).to.be(false);
              expect(data.postInitMigrations.migrateIngresses).to.be.a('boolean');
              expect(data.postInitMigrations.migrateIngresses).to.be(false);
            expect(data.publicURL).to.be.a('string');
            expect(data.publicURL).to.be("docker.mydomain.tld:2375");
            {
              let dataCtr = data.snapshots;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerDockerSnapshot);
                expect(data.containerCount).to.be.a('number');
                expect(data.containerCount).to.be(0);
                expect(data.dockerSnapshotRaw).to.be.a(PortainerCeApi.PortainerDockerSnapshotRaw);
                    expect(data.dockerVersion).to.be.a('string');
                expect(data.dockerVersion).to.be("");
                expect(data.gpuUseAll).to.be.a('boolean');
                expect(data.gpuUseAll).to.be(false);
                {
                  let dataCtr = data.gpuUseList;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.healthyContainerCount).to.be.a('number');
                expect(data.healthyContainerCount).to.be(0);
                expect(data.imageCount).to.be.a('number');
                expect(data.imageCount).to.be(0);
                expect(data.nodeCount).to.be.a('number');
                expect(data.nodeCount).to.be(0);
                expect(data.runningContainerCount).to.be.a('number');
                expect(data.runningContainerCount).to.be(0);
                expect(data.serviceCount).to.be.a('number');
                expect(data.serviceCount).to.be(0);
                expect(data.stackCount).to.be.a('number');
                expect(data.stackCount).to.be(0);
                expect(data.stoppedContainerCount).to.be.a('number');
                expect(data.stoppedContainerCount).to.be(0);
                expect(data.swarm).to.be.a('boolean');
                expect(data.swarm).to.be(false);
                expect(data.time).to.be.a('number');
                expect(data.time).to.be(0);
                expect(data.totalCPU).to.be.a('number');
                expect(data.totalCPU).to.be(0);
                expect(data.totalMemory).to.be.a('number');
                expect(data.totalMemory).to.be(0);
                expect(data.unhealthyContainerCount).to.be.a('number');
                expect(data.unhealthyContainerCount).to.be(0);
                expect(data.volumeCount).to.be.a('number');
                expect(data.volumeCount).to.be(0);

                      }
            }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.TLS).to.be.a('boolean');
            expect(data.TLS).to.be(false);
            expect(data.tLSCACert).to.be.a('string');
            expect(data.tLSCACert).to.be("");
            expect(data.tLSCert).to.be.a('string');
            expect(data.tLSCert).to.be("");
            expect(data.tLSConfig).to.be.a(PortainerCeApi.PortainerTLSConfiguration);
                  expect(data.tLSConfig.TLS).to.be.a('boolean');
              expect(data.tLSConfig.TLS).to.be(true);
              expect(data.tLSConfig.tLSCACert).to.be.a('string');
              expect(data.tLSConfig.tLSCACert).to.be("/data/tls/ca.pem");
              expect(data.tLSConfig.tLSCert).to.be.a('string');
              expect(data.tLSConfig.tLSCert).to.be("/data/tls/cert.pem");
              expect(data.tLSConfig.tLSKey).to.be.a('string');
              expect(data.tLSConfig.tLSKey).to.be("/data/tls/key.pem");
              expect(data.tLSConfig.tLSSkipVerify).to.be.a('boolean');
              expect(data.tLSConfig.tLSSkipVerify).to.be(false);
            expect(data.tLSKey).to.be.a('string');
            expect(data.tLSKey).to.be("");
            {
              let dataCtr = data.tagIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(1);
              }
            }
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.teamAccessPolicies).to.be.a(PortainerCeApi.PortainerTeamAccessPolicies);
                expect(data.type).to.be.a('number');
            expect(data.type).to.be(1);
            expect(data.URL).to.be.a('string');
            expect(data.URL).to.be("docker.mydomain.tld:2375");
            expect(data.userAccessPolicies).to.be.a(PortainerCeApi.PortainerUserAccessPolicies);
                expect(data.userTrusted).to.be.a('boolean');
            expect(data.userTrusted).to.be(false);
            expect(data.agent).to.be.a(PortainerCeApi.PortainerEndpointAgent);
                  expect(data.agent.version).to.be.a('string');
              expect(data.agent.version).to.be("1.0.0");
            expect(data.edge).to.be.a(PortainerCeApi.PortainerEnvironmentEdgeSettings);
                  expect(data.edge.commandInterval).to.be.a('number');
              expect(data.edge.commandInterval).to.be(60);
              expect(data.edge.pingInterval).to.be.a('number');
              expect(data.edge.pingInterval).to.be(60);
              expect(data.edge.snapshotInterval).to.be.a('number');
              expect(data.edge.snapshotInterval).to.be(60);
              expect(data.edge.asyncMode).to.be.a('boolean');
              expect(data.edge.asyncMode).to.be(false);
            expect(data.lastCheckInDate).to.be.a('number');
            expect(data.lastCheckInDate).to.be(0);
            expect(data.queryDate).to.be.a('number');
            expect(data.queryDate).to.be(0);
            expect(data.securitySettings).to.be.a(PortainerCeApi.PortainerEndpointSecuritySettings);
                  expect(data.securitySettings.allowBindMountsForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowBindMountsForRegularUsers).to.be(false);
              expect(data.securitySettings.allowContainerCapabilitiesForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowContainerCapabilitiesForRegularUsers).to.be(true);
              expect(data.securitySettings.allowDeviceMappingForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowDeviceMappingForRegularUsers).to.be(true);
              expect(data.securitySettings.allowHostNamespaceForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowHostNamespaceForRegularUsers).to.be(true);
              expect(data.securitySettings.allowPrivilegedModeForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowPrivilegedModeForRegularUsers).to.be(false);
              expect(data.securitySettings.allowStackManagementForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowStackManagementForRegularUsers).to.be(true);
              expect(data.securitySettings.allowSysctlSettingForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowSysctlSettingForRegularUsers).to.be(true);
              expect(data.securitySettings.allowVolumeBrowserForRegularUsers).to.be.a('boolean');
              expect(data.securitySettings.allowVolumeBrowserForRegularUsers).to.be(true);
              expect(data.securitySettings.enableHostManagementFeatures).to.be.a('boolean');
              expect(data.securitySettings.enableHostManagementFeatures).to.be(true);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointUpdateRelations', function() {
        it('should call endpointUpdateRelations successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointUpdateRelations call
          /*
          var body = new PortainerCeApi.EndpointsEndpointUpdateRelationsPayload();
          body.relations = {key: new PortainerCeApi.EndpointsEndpointUpdateRelationsPayloadRelations()}new PortainerCeApi.EndpointsEndpointUpdateRelationsPayloadRelations();
          body.relations.key.edgeGroups = [1];
          body.relations.key.group = 1;
          body.relations.key.tags = [1];

          instance.endpointUpdateRelations(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointsIdDockerV2BrowsePutPost', function() {
        it('should call endpointsIdDockerV2BrowsePutPost successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointsIdDockerV2BrowsePutPost call
          /*
          var id = 56;
          var path = "path_example";
          var file = "/path/to/file.txt";
          var opts = {};
          opts.volumeID = "volumeID_example";

          instance.endpointsIdDockerV2BrowsePutPost(id, path, file, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointsIdEdgeJobsJobIDLogsPost', function() {
        it('should call endpointsIdEdgeJobsJobIDLogsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointsIdEdgeJobsJobIDLogsPost call
          /*
          var id = 56;
          var jobID = 56;

          instance.endpointsIdEdgeJobsJobIDLogsPost(id, jobID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointsIdEdgeStacksStackIdGet', function() {
        it('should call endpointsIdEdgeStacksStackIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointsIdEdgeStacksStackIdGet call and complete the assertions
          /*
          var id = 56;
          var stackId = 56;

          instance.endpointsIdEdgeStacksStackIdGet(id, stackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.EdgeStackPayload);
            {
              let dataCtr = data.dirEntries;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.FilesystemDirEntry);
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.isFile).to.be.a('boolean');
                expect(data.isFile).to.be(false);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.permissions).to.be.a('number');
                expect(data.permissions).to.be(0);

                      }
            }
            expect(data.edgeUpdateID).to.be.a('number');
            expect(data.edgeUpdateID).to.be(0);
            expect(data.entryFileName).to.be.a('string');
            expect(data.entryFileName).to.be("");
            {
              let dataCtr = data.envVars;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.filesystemPath).to.be.a('string');
            expect(data.filesystemPath).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("");
            expect(data.prePullImage).to.be.a('boolean');
            expect(data.prePullImage).to.be(false);
            expect(data.rePullImage).to.be.a('boolean');
            expect(data.rePullImage).to.be(false);
            expect(data.readyRePullImage).to.be.a('boolean');
            expect(data.readyRePullImage).to.be(false);
            {
              let dataCtr = data.registryCredentials;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.EdgeRegistryCredentials);
                expect(data.secret).to.be.a('string');
                expect(data.secret).to.be("");
                expect(data.serverURL).to.be.a('string');
                expect(data.serverURL).to.be("");
                expect(data.username).to.be.a('string');
                expect(data.username).to.be("");

                      }
            }
            expect(data.retryDeploy).to.be.a('boolean');
            expect(data.retryDeploy).to.be(false);
            expect(data.rollbackTo).to.be.a('number');
            expect(data.rollbackTo).to.be(0);
            expect(data.stackFileContent).to.be.a('string');
            expect(data.stackFileContent).to.be("");
            expect(data.supportRelativePath).to.be.a('boolean');
            expect(data.supportRelativePath).to.be(false);
            expect(data.version).to.be.a('number');
            expect(data.version).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
