/*
 * PortainerCE API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  # Private Registry  Using private registry, you will need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\>}’ inside the Request Header. The parameter name is \"X-Registry-Auth\". \\<registryID value\\> - The registry ID where the repository was created.  Example:  ``` eyJyZWdpc3RyeUlkIjoxfQ== ```  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/). 
 *
 * OpenAPI spec version: 2.21.3
 * Contact: info@portainer.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PortainerCeApi);
  }
}(this, function(expect, PortainerCeApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PortainerCeApi.StacksApi();
  });

  describe('(package)', function() {
    describe('StacksApi', function() {
      describe('stackAssociate', function() {
        it('should call stackAssociate successfully', function(done) {
          // TODO: uncomment, update parameter values for stackAssociate call and complete the assertions
          /*
          var id = 56;
          var endpointId = 56;
          var swarmId = 56;
          var orphanedRunning = true;

          instance.stackAssociate(id, endpointId, swarmId, orphanedRunning, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerStack);
            {
              let dataCtr = data.additionalFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.autoUpdate).to.be.a(PortainerCeApi.PortainerAutoUpdateSettings);
                  expect(data.autoUpdate.forcePullImage).to.be.a('boolean');
              expect(data.autoUpdate.forcePullImage).to.be(false);
              expect(data.autoUpdate.forceUpdate).to.be.a('boolean');
              expect(data.autoUpdate.forceUpdate).to.be(false);
              expect(data.autoUpdate.interval).to.be.a('string');
              expect(data.autoUpdate.interval).to.be("1m30s");
              expect(data.autoUpdate.jobID).to.be.a('string');
              expect(data.autoUpdate.jobID).to.be("15");
              expect(data.autoUpdate.webhook).to.be.a('string');
              expect(data.autoUpdate.webhook).to.be("05de31a2-79fa-4644-9c12-faa67e5c49f0");
            expect(data.endpointId).to.be.a('number');
            expect(data.endpointId).to.be(1);
            expect(data.entryPoint).to.be.a('string');
            expect(data.entryPoint).to.be("docker-compose.yml");
            {
              let dataCtr = data.env;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("myStack");
            expect(data.option).to.be.a(PortainerCeApi.PortainerStackOption);
                  expect(data.option.prune).to.be.a('boolean');
              expect(data.option.prune).to.be(false);
            expect(data.resourceControl).to.be.a(PortainerCeApi.PortainerResourceControl);
                  expect(data.resourceControl.accessLevel).to.be.a('number');
              expect(data.resourceControl.accessLevel).to.be(0);
              expect(data.resourceControl.administratorsOnly).to.be.a('boolean');
              expect(data.resourceControl.administratorsOnly).to.be(true);
              expect(data.resourceControl.id).to.be.a('number');
              expect(data.resourceControl.id).to.be(1);
              expect(data.resourceControl.ownerId).to.be.a('number');
              expect(data.resourceControl.ownerId).to.be(0);
              expect(data.resourceControl._public).to.be.a('boolean');
              expect(data.resourceControl._public).to.be(true);
              expect(data.resourceControl.resourceId).to.be.a('string');
              expect(data.resourceControl.resourceId).to.be("617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08");
              {
                let dataCtr = data.resourceControl.subResourceIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.resourceControl.system).to.be.a('boolean');
              expect(data.resourceControl.system).to.be(false);
              {
                let dataCtr = data.resourceControl.teamAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerTeamResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.teamId).to.be.a('number');
                  expect(data.teamId).to.be(0);
  
                        }
              }
              expect(data.resourceControl.type).to.be.a('number');
              expect(data.resourceControl.type).to.be(1);
              {
                let dataCtr = data.resourceControl.userAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerUserResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
  
                        }
              }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.swarmId).to.be.a('string');
            expect(data.swarmId).to.be("jpofkc0i9uo9wtx1zesuk649w");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(2);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("admin");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1587399600);
            expect(data.fromAppTemplate).to.be.a('boolean');
            expect(data.fromAppTemplate).to.be(false);
            expect(data.gitConfig).to.be.a(PortainerCeApi.GittypesRepoConfig);
                  expect(data.gitConfig.authentication).to.be.a(PortainerCeApi.GittypesGitAuthentication);
                    expect(data.gitConfig.authentication.gitCredentialID).to.be.a('number');
                expect(data.gitConfig.authentication.gitCredentialID).to.be(0);
                expect(data.gitConfig.authentication.password).to.be.a('string');
                expect(data.gitConfig.authentication.password).to.be("");
                expect(data.gitConfig.authentication.username).to.be.a('string');
                expect(data.gitConfig.authentication.username).to.be("");
              expect(data.gitConfig.configFilePath).to.be.a('string');
              expect(data.gitConfig.configFilePath).to.be("docker-compose.yml");
              expect(data.gitConfig.configHash).to.be.a('string');
              expect(data.gitConfig.configHash).to.be("bc4c183d756879ea4d173315338110b31004b8e0");
              expect(data.gitConfig.referenceName).to.be.a('string');
              expect(data.gitConfig.referenceName).to.be("refs/heads/branch_name");
              expect(data.gitConfig.tlsskipVerify).to.be.a('boolean');
              expect(data.gitConfig.tlsskipVerify).to.be(false);
              expect(data.gitConfig.url).to.be.a('string');
              expect(data.gitConfig.url).to.be("https://github.com/portainer/portainer.git");
            expect(data.isComposeFormat).to.be.a('boolean');
            expect(data.isComposeFormat).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("default");
            expect(data.projectPath).to.be.a('string');
            expect(data.projectPath).to.be("/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w");
            expect(data.updateDate).to.be.a('number');
            expect(data.updateDate).to.be(1587399600);
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("bob");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stackCreate', function() {
        it('should call stackCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for stackCreate call and complete the assertions
          /*
          var type = 56;
          var method = "method_example";
          var endpointId = 56;
          var body = null;

          instance.stackCreate(type, method, endpointId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerStack);
            {
              let dataCtr = data.additionalFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.autoUpdate).to.be.a(PortainerCeApi.PortainerAutoUpdateSettings);
                  expect(data.autoUpdate.forcePullImage).to.be.a('boolean');
              expect(data.autoUpdate.forcePullImage).to.be(false);
              expect(data.autoUpdate.forceUpdate).to.be.a('boolean');
              expect(data.autoUpdate.forceUpdate).to.be(false);
              expect(data.autoUpdate.interval).to.be.a('string');
              expect(data.autoUpdate.interval).to.be("1m30s");
              expect(data.autoUpdate.jobID).to.be.a('string');
              expect(data.autoUpdate.jobID).to.be("15");
              expect(data.autoUpdate.webhook).to.be.a('string');
              expect(data.autoUpdate.webhook).to.be("05de31a2-79fa-4644-9c12-faa67e5c49f0");
            expect(data.endpointId).to.be.a('number');
            expect(data.endpointId).to.be(1);
            expect(data.entryPoint).to.be.a('string');
            expect(data.entryPoint).to.be("docker-compose.yml");
            {
              let dataCtr = data.env;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("myStack");
            expect(data.option).to.be.a(PortainerCeApi.PortainerStackOption);
                  expect(data.option.prune).to.be.a('boolean');
              expect(data.option.prune).to.be(false);
            expect(data.resourceControl).to.be.a(PortainerCeApi.PortainerResourceControl);
                  expect(data.resourceControl.accessLevel).to.be.a('number');
              expect(data.resourceControl.accessLevel).to.be(0);
              expect(data.resourceControl.administratorsOnly).to.be.a('boolean');
              expect(data.resourceControl.administratorsOnly).to.be(true);
              expect(data.resourceControl.id).to.be.a('number');
              expect(data.resourceControl.id).to.be(1);
              expect(data.resourceControl.ownerId).to.be.a('number');
              expect(data.resourceControl.ownerId).to.be(0);
              expect(data.resourceControl._public).to.be.a('boolean');
              expect(data.resourceControl._public).to.be(true);
              expect(data.resourceControl.resourceId).to.be.a('string');
              expect(data.resourceControl.resourceId).to.be("617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08");
              {
                let dataCtr = data.resourceControl.subResourceIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.resourceControl.system).to.be.a('boolean');
              expect(data.resourceControl.system).to.be(false);
              {
                let dataCtr = data.resourceControl.teamAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerTeamResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.teamId).to.be.a('number');
                  expect(data.teamId).to.be(0);
  
                        }
              }
              expect(data.resourceControl.type).to.be.a('number');
              expect(data.resourceControl.type).to.be(1);
              {
                let dataCtr = data.resourceControl.userAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerUserResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
  
                        }
              }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.swarmId).to.be.a('string');
            expect(data.swarmId).to.be("jpofkc0i9uo9wtx1zesuk649w");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(2);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("admin");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1587399600);
            expect(data.fromAppTemplate).to.be.a('boolean');
            expect(data.fromAppTemplate).to.be(false);
            expect(data.gitConfig).to.be.a(PortainerCeApi.GittypesRepoConfig);
                  expect(data.gitConfig.authentication).to.be.a(PortainerCeApi.GittypesGitAuthentication);
                    expect(data.gitConfig.authentication.gitCredentialID).to.be.a('number');
                expect(data.gitConfig.authentication.gitCredentialID).to.be(0);
                expect(data.gitConfig.authentication.password).to.be.a('string');
                expect(data.gitConfig.authentication.password).to.be("");
                expect(data.gitConfig.authentication.username).to.be.a('string');
                expect(data.gitConfig.authentication.username).to.be("");
              expect(data.gitConfig.configFilePath).to.be.a('string');
              expect(data.gitConfig.configFilePath).to.be("docker-compose.yml");
              expect(data.gitConfig.configHash).to.be.a('string');
              expect(data.gitConfig.configHash).to.be("bc4c183d756879ea4d173315338110b31004b8e0");
              expect(data.gitConfig.referenceName).to.be.a('string');
              expect(data.gitConfig.referenceName).to.be("refs/heads/branch_name");
              expect(data.gitConfig.tlsskipVerify).to.be.a('boolean');
              expect(data.gitConfig.tlsskipVerify).to.be(false);
              expect(data.gitConfig.url).to.be.a('string');
              expect(data.gitConfig.url).to.be("https://github.com/portainer/portainer.git");
            expect(data.isComposeFormat).to.be.a('boolean');
            expect(data.isComposeFormat).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("default");
            expect(data.projectPath).to.be.a('string');
            expect(data.projectPath).to.be("/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w");
            expect(data.updateDate).to.be.a('number');
            expect(data.updateDate).to.be(1587399600);
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("bob");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stackCreateDockerStandaloneFile', function() {
        it('should call stackCreateDockerStandaloneFile successfully', function(done) {
          // TODO: uncomment, update parameter values for stackCreateDockerStandaloneFile call and complete the assertions
          /*
          var name = "name_example";
          var endpointId = 56;
          var opts = {};
          opts.env = "env_example";
          opts.file = "/path/to/file.txt";

          instance.stackCreateDockerStandaloneFile(name, endpointId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerStack);
            {
              let dataCtr = data.additionalFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.autoUpdate).to.be.a(PortainerCeApi.PortainerAutoUpdateSettings);
                  expect(data.autoUpdate.forcePullImage).to.be.a('boolean');
              expect(data.autoUpdate.forcePullImage).to.be(false);
              expect(data.autoUpdate.forceUpdate).to.be.a('boolean');
              expect(data.autoUpdate.forceUpdate).to.be(false);
              expect(data.autoUpdate.interval).to.be.a('string');
              expect(data.autoUpdate.interval).to.be("1m30s");
              expect(data.autoUpdate.jobID).to.be.a('string');
              expect(data.autoUpdate.jobID).to.be("15");
              expect(data.autoUpdate.webhook).to.be.a('string');
              expect(data.autoUpdate.webhook).to.be("05de31a2-79fa-4644-9c12-faa67e5c49f0");
            expect(data.endpointId).to.be.a('number');
            expect(data.endpointId).to.be(1);
            expect(data.entryPoint).to.be.a('string');
            expect(data.entryPoint).to.be("docker-compose.yml");
            {
              let dataCtr = data.env;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("myStack");
            expect(data.option).to.be.a(PortainerCeApi.PortainerStackOption);
                  expect(data.option.prune).to.be.a('boolean');
              expect(data.option.prune).to.be(false);
            expect(data.resourceControl).to.be.a(PortainerCeApi.PortainerResourceControl);
                  expect(data.resourceControl.accessLevel).to.be.a('number');
              expect(data.resourceControl.accessLevel).to.be(0);
              expect(data.resourceControl.administratorsOnly).to.be.a('boolean');
              expect(data.resourceControl.administratorsOnly).to.be(true);
              expect(data.resourceControl.id).to.be.a('number');
              expect(data.resourceControl.id).to.be(1);
              expect(data.resourceControl.ownerId).to.be.a('number');
              expect(data.resourceControl.ownerId).to.be(0);
              expect(data.resourceControl._public).to.be.a('boolean');
              expect(data.resourceControl._public).to.be(true);
              expect(data.resourceControl.resourceId).to.be.a('string');
              expect(data.resourceControl.resourceId).to.be("617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08");
              {
                let dataCtr = data.resourceControl.subResourceIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.resourceControl.system).to.be.a('boolean');
              expect(data.resourceControl.system).to.be(false);
              {
                let dataCtr = data.resourceControl.teamAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerTeamResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.teamId).to.be.a('number');
                  expect(data.teamId).to.be(0);
  
                        }
              }
              expect(data.resourceControl.type).to.be.a('number');
              expect(data.resourceControl.type).to.be(1);
              {
                let dataCtr = data.resourceControl.userAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerUserResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
  
                        }
              }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.swarmId).to.be.a('string');
            expect(data.swarmId).to.be("jpofkc0i9uo9wtx1zesuk649w");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(2);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("admin");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1587399600);
            expect(data.fromAppTemplate).to.be.a('boolean');
            expect(data.fromAppTemplate).to.be(false);
            expect(data.gitConfig).to.be.a(PortainerCeApi.GittypesRepoConfig);
                  expect(data.gitConfig.authentication).to.be.a(PortainerCeApi.GittypesGitAuthentication);
                    expect(data.gitConfig.authentication.gitCredentialID).to.be.a('number');
                expect(data.gitConfig.authentication.gitCredentialID).to.be(0);
                expect(data.gitConfig.authentication.password).to.be.a('string');
                expect(data.gitConfig.authentication.password).to.be("");
                expect(data.gitConfig.authentication.username).to.be.a('string');
                expect(data.gitConfig.authentication.username).to.be("");
              expect(data.gitConfig.configFilePath).to.be.a('string');
              expect(data.gitConfig.configFilePath).to.be("docker-compose.yml");
              expect(data.gitConfig.configHash).to.be.a('string');
              expect(data.gitConfig.configHash).to.be("bc4c183d756879ea4d173315338110b31004b8e0");
              expect(data.gitConfig.referenceName).to.be.a('string');
              expect(data.gitConfig.referenceName).to.be("refs/heads/branch_name");
              expect(data.gitConfig.tlsskipVerify).to.be.a('boolean');
              expect(data.gitConfig.tlsskipVerify).to.be(false);
              expect(data.gitConfig.url).to.be.a('string');
              expect(data.gitConfig.url).to.be("https://github.com/portainer/portainer.git");
            expect(data.isComposeFormat).to.be.a('boolean');
            expect(data.isComposeFormat).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("default");
            expect(data.projectPath).to.be.a('string');
            expect(data.projectPath).to.be("/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w");
            expect(data.updateDate).to.be.a('number');
            expect(data.updateDate).to.be(1587399600);
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("bob");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stackCreateDockerStandaloneRepository', function() {
        it('should call stackCreateDockerStandaloneRepository successfully', function(done) {
          // TODO: uncomment, update parameter values for stackCreateDockerStandaloneRepository call and complete the assertions
          /*
          var endpointId = 56;
          var body = new PortainerCeApi.StacksComposeStackFromGitRepositoryPayload();
          body.additionalFiles = ["[nz.compose.yml"," uat.compose.yml]"];
          body.autoUpdate = new PortainerCeApi.PortainerAutoUpdateSettings();
          body.autoUpdate.forcePullImage = false;
          body.autoUpdate.forceUpdate = false;
          body.autoUpdate.interval = "1m30s";
          body.autoUpdate.jobID = "15";
          body.autoUpdate.webhook = "05de31a2-79fa-4644-9c12-faa67e5c49f0";
          body.composeFile = "docker-compose.yml";
          body.env = [new PortainerCeApi.PortainerPair()];
          body.env[0].name = "name";
          body.env[0].value = "value";
          body.fromAppTemplate = false;
          body.name = "myStack";
          body.repositoryAuthentication = true;
          body.repositoryPassword = "myGitPassword";
          body.repositoryReferenceName = "refs/heads/master";
          body.repositoryURL = "https://github.com/openfaas/faas";
          body.repositoryUsername = "myGitUsername";
          body.tlsskipVerify = false;

          instance.stackCreateDockerStandaloneRepository(endpointId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerStack);
            {
              let dataCtr = data.additionalFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.autoUpdate).to.be.a(PortainerCeApi.PortainerAutoUpdateSettings);
                  expect(data.autoUpdate.forcePullImage).to.be.a('boolean');
              expect(data.autoUpdate.forcePullImage).to.be(false);
              expect(data.autoUpdate.forceUpdate).to.be.a('boolean');
              expect(data.autoUpdate.forceUpdate).to.be(false);
              expect(data.autoUpdate.interval).to.be.a('string');
              expect(data.autoUpdate.interval).to.be("1m30s");
              expect(data.autoUpdate.jobID).to.be.a('string');
              expect(data.autoUpdate.jobID).to.be("15");
              expect(data.autoUpdate.webhook).to.be.a('string');
              expect(data.autoUpdate.webhook).to.be("05de31a2-79fa-4644-9c12-faa67e5c49f0");
            expect(data.endpointId).to.be.a('number');
            expect(data.endpointId).to.be(1);
            expect(data.entryPoint).to.be.a('string');
            expect(data.entryPoint).to.be("docker-compose.yml");
            {
              let dataCtr = data.env;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("myStack");
            expect(data.option).to.be.a(PortainerCeApi.PortainerStackOption);
                  expect(data.option.prune).to.be.a('boolean');
              expect(data.option.prune).to.be(false);
            expect(data.resourceControl).to.be.a(PortainerCeApi.PortainerResourceControl);
                  expect(data.resourceControl.accessLevel).to.be.a('number');
              expect(data.resourceControl.accessLevel).to.be(0);
              expect(data.resourceControl.administratorsOnly).to.be.a('boolean');
              expect(data.resourceControl.administratorsOnly).to.be(true);
              expect(data.resourceControl.id).to.be.a('number');
              expect(data.resourceControl.id).to.be(1);
              expect(data.resourceControl.ownerId).to.be.a('number');
              expect(data.resourceControl.ownerId).to.be(0);
              expect(data.resourceControl._public).to.be.a('boolean');
              expect(data.resourceControl._public).to.be(true);
              expect(data.resourceControl.resourceId).to.be.a('string');
              expect(data.resourceControl.resourceId).to.be("617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08");
              {
                let dataCtr = data.resourceControl.subResourceIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.resourceControl.system).to.be.a('boolean');
              expect(data.resourceControl.system).to.be(false);
              {
                let dataCtr = data.resourceControl.teamAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerTeamResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.teamId).to.be.a('number');
                  expect(data.teamId).to.be(0);
  
                        }
              }
              expect(data.resourceControl.type).to.be.a('number');
              expect(data.resourceControl.type).to.be(1);
              {
                let dataCtr = data.resourceControl.userAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerUserResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
  
                        }
              }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.swarmId).to.be.a('string');
            expect(data.swarmId).to.be("jpofkc0i9uo9wtx1zesuk649w");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(2);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("admin");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1587399600);
            expect(data.fromAppTemplate).to.be.a('boolean');
            expect(data.fromAppTemplate).to.be(false);
            expect(data.gitConfig).to.be.a(PortainerCeApi.GittypesRepoConfig);
                  expect(data.gitConfig.authentication).to.be.a(PortainerCeApi.GittypesGitAuthentication);
                    expect(data.gitConfig.authentication.gitCredentialID).to.be.a('number');
                expect(data.gitConfig.authentication.gitCredentialID).to.be(0);
                expect(data.gitConfig.authentication.password).to.be.a('string');
                expect(data.gitConfig.authentication.password).to.be("");
                expect(data.gitConfig.authentication.username).to.be.a('string');
                expect(data.gitConfig.authentication.username).to.be("");
              expect(data.gitConfig.configFilePath).to.be.a('string');
              expect(data.gitConfig.configFilePath).to.be("docker-compose.yml");
              expect(data.gitConfig.configHash).to.be.a('string');
              expect(data.gitConfig.configHash).to.be("bc4c183d756879ea4d173315338110b31004b8e0");
              expect(data.gitConfig.referenceName).to.be.a('string');
              expect(data.gitConfig.referenceName).to.be("refs/heads/branch_name");
              expect(data.gitConfig.tlsskipVerify).to.be.a('boolean');
              expect(data.gitConfig.tlsskipVerify).to.be(false);
              expect(data.gitConfig.url).to.be.a('string');
              expect(data.gitConfig.url).to.be("https://github.com/portainer/portainer.git");
            expect(data.isComposeFormat).to.be.a('boolean');
            expect(data.isComposeFormat).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("default");
            expect(data.projectPath).to.be.a('string');
            expect(data.projectPath).to.be("/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w");
            expect(data.updateDate).to.be.a('number');
            expect(data.updateDate).to.be(1587399600);
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("bob");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stackCreateDockerStandaloneString', function() {
        it('should call stackCreateDockerStandaloneString successfully', function(done) {
          // TODO: uncomment, update parameter values for stackCreateDockerStandaloneString call and complete the assertions
          /*
          var body = new PortainerCeApi.StacksComposeStackFromFileContentPayload();
          body.env = [new PortainerCeApi.PortainerPair()];
          body.env[0].name = "name";
          body.env[0].value = "value";
          body.fromAppTemplate = false;
          body.name = "myStack";
          body.stackFileContent = "version: 3
 services:
 web:
 image:nginx";
          var endpointId = 56;

          instance.stackCreateDockerStandaloneString(body, endpointId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerStack);
            {
              let dataCtr = data.additionalFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.autoUpdate).to.be.a(PortainerCeApi.PortainerAutoUpdateSettings);
                  expect(data.autoUpdate.forcePullImage).to.be.a('boolean');
              expect(data.autoUpdate.forcePullImage).to.be(false);
              expect(data.autoUpdate.forceUpdate).to.be.a('boolean');
              expect(data.autoUpdate.forceUpdate).to.be(false);
              expect(data.autoUpdate.interval).to.be.a('string');
              expect(data.autoUpdate.interval).to.be("1m30s");
              expect(data.autoUpdate.jobID).to.be.a('string');
              expect(data.autoUpdate.jobID).to.be("15");
              expect(data.autoUpdate.webhook).to.be.a('string');
              expect(data.autoUpdate.webhook).to.be("05de31a2-79fa-4644-9c12-faa67e5c49f0");
            expect(data.endpointId).to.be.a('number');
            expect(data.endpointId).to.be(1);
            expect(data.entryPoint).to.be.a('string');
            expect(data.entryPoint).to.be("docker-compose.yml");
            {
              let dataCtr = data.env;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("myStack");
            expect(data.option).to.be.a(PortainerCeApi.PortainerStackOption);
                  expect(data.option.prune).to.be.a('boolean');
              expect(data.option.prune).to.be(false);
            expect(data.resourceControl).to.be.a(PortainerCeApi.PortainerResourceControl);
                  expect(data.resourceControl.accessLevel).to.be.a('number');
              expect(data.resourceControl.accessLevel).to.be(0);
              expect(data.resourceControl.administratorsOnly).to.be.a('boolean');
              expect(data.resourceControl.administratorsOnly).to.be(true);
              expect(data.resourceControl.id).to.be.a('number');
              expect(data.resourceControl.id).to.be(1);
              expect(data.resourceControl.ownerId).to.be.a('number');
              expect(data.resourceControl.ownerId).to.be(0);
              expect(data.resourceControl._public).to.be.a('boolean');
              expect(data.resourceControl._public).to.be(true);
              expect(data.resourceControl.resourceId).to.be.a('string');
              expect(data.resourceControl.resourceId).to.be("617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08");
              {
                let dataCtr = data.resourceControl.subResourceIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.resourceControl.system).to.be.a('boolean');
              expect(data.resourceControl.system).to.be(false);
              {
                let dataCtr = data.resourceControl.teamAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerTeamResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.teamId).to.be.a('number');
                  expect(data.teamId).to.be(0);
  
                        }
              }
              expect(data.resourceControl.type).to.be.a('number');
              expect(data.resourceControl.type).to.be(1);
              {
                let dataCtr = data.resourceControl.userAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerUserResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
  
                        }
              }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.swarmId).to.be.a('string');
            expect(data.swarmId).to.be("jpofkc0i9uo9wtx1zesuk649w");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(2);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("admin");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1587399600);
            expect(data.fromAppTemplate).to.be.a('boolean');
            expect(data.fromAppTemplate).to.be(false);
            expect(data.gitConfig).to.be.a(PortainerCeApi.GittypesRepoConfig);
                  expect(data.gitConfig.authentication).to.be.a(PortainerCeApi.GittypesGitAuthentication);
                    expect(data.gitConfig.authentication.gitCredentialID).to.be.a('number');
                expect(data.gitConfig.authentication.gitCredentialID).to.be(0);
                expect(data.gitConfig.authentication.password).to.be.a('string');
                expect(data.gitConfig.authentication.password).to.be("");
                expect(data.gitConfig.authentication.username).to.be.a('string');
                expect(data.gitConfig.authentication.username).to.be("");
              expect(data.gitConfig.configFilePath).to.be.a('string');
              expect(data.gitConfig.configFilePath).to.be("docker-compose.yml");
              expect(data.gitConfig.configHash).to.be.a('string');
              expect(data.gitConfig.configHash).to.be("bc4c183d756879ea4d173315338110b31004b8e0");
              expect(data.gitConfig.referenceName).to.be.a('string');
              expect(data.gitConfig.referenceName).to.be("refs/heads/branch_name");
              expect(data.gitConfig.tlsskipVerify).to.be.a('boolean');
              expect(data.gitConfig.tlsskipVerify).to.be(false);
              expect(data.gitConfig.url).to.be.a('string');
              expect(data.gitConfig.url).to.be("https://github.com/portainer/portainer.git");
            expect(data.isComposeFormat).to.be.a('boolean');
            expect(data.isComposeFormat).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("default");
            expect(data.projectPath).to.be.a('string');
            expect(data.projectPath).to.be("/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w");
            expect(data.updateDate).to.be.a('number');
            expect(data.updateDate).to.be(1587399600);
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("bob");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stackCreateDockerSwarmFile', function() {
        it('should call stackCreateDockerSwarmFile successfully', function(done) {
          // TODO: uncomment, update parameter values for stackCreateDockerSwarmFile call and complete the assertions
          /*
          var endpointId = 56;
          var opts = {};
          opts.name = "name_example";
          opts.swarmID = "swarmID_example";
          opts.env = "env_example";
          opts.file = "/path/to/file.txt";

          instance.stackCreateDockerSwarmFile(endpointId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerStack);
            {
              let dataCtr = data.additionalFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.autoUpdate).to.be.a(PortainerCeApi.PortainerAutoUpdateSettings);
                  expect(data.autoUpdate.forcePullImage).to.be.a('boolean');
              expect(data.autoUpdate.forcePullImage).to.be(false);
              expect(data.autoUpdate.forceUpdate).to.be.a('boolean');
              expect(data.autoUpdate.forceUpdate).to.be(false);
              expect(data.autoUpdate.interval).to.be.a('string');
              expect(data.autoUpdate.interval).to.be("1m30s");
              expect(data.autoUpdate.jobID).to.be.a('string');
              expect(data.autoUpdate.jobID).to.be("15");
              expect(data.autoUpdate.webhook).to.be.a('string');
              expect(data.autoUpdate.webhook).to.be("05de31a2-79fa-4644-9c12-faa67e5c49f0");
            expect(data.endpointId).to.be.a('number');
            expect(data.endpointId).to.be(1);
            expect(data.entryPoint).to.be.a('string');
            expect(data.entryPoint).to.be("docker-compose.yml");
            {
              let dataCtr = data.env;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("myStack");
            expect(data.option).to.be.a(PortainerCeApi.PortainerStackOption);
                  expect(data.option.prune).to.be.a('boolean');
              expect(data.option.prune).to.be(false);
            expect(data.resourceControl).to.be.a(PortainerCeApi.PortainerResourceControl);
                  expect(data.resourceControl.accessLevel).to.be.a('number');
              expect(data.resourceControl.accessLevel).to.be(0);
              expect(data.resourceControl.administratorsOnly).to.be.a('boolean');
              expect(data.resourceControl.administratorsOnly).to.be(true);
              expect(data.resourceControl.id).to.be.a('number');
              expect(data.resourceControl.id).to.be(1);
              expect(data.resourceControl.ownerId).to.be.a('number');
              expect(data.resourceControl.ownerId).to.be(0);
              expect(data.resourceControl._public).to.be.a('boolean');
              expect(data.resourceControl._public).to.be(true);
              expect(data.resourceControl.resourceId).to.be.a('string');
              expect(data.resourceControl.resourceId).to.be("617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08");
              {
                let dataCtr = data.resourceControl.subResourceIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.resourceControl.system).to.be.a('boolean');
              expect(data.resourceControl.system).to.be(false);
              {
                let dataCtr = data.resourceControl.teamAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerTeamResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.teamId).to.be.a('number');
                  expect(data.teamId).to.be(0);
  
                        }
              }
              expect(data.resourceControl.type).to.be.a('number');
              expect(data.resourceControl.type).to.be(1);
              {
                let dataCtr = data.resourceControl.userAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerUserResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
  
                        }
              }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.swarmId).to.be.a('string');
            expect(data.swarmId).to.be("jpofkc0i9uo9wtx1zesuk649w");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(2);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("admin");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1587399600);
            expect(data.fromAppTemplate).to.be.a('boolean');
            expect(data.fromAppTemplate).to.be(false);
            expect(data.gitConfig).to.be.a(PortainerCeApi.GittypesRepoConfig);
                  expect(data.gitConfig.authentication).to.be.a(PortainerCeApi.GittypesGitAuthentication);
                    expect(data.gitConfig.authentication.gitCredentialID).to.be.a('number');
                expect(data.gitConfig.authentication.gitCredentialID).to.be(0);
                expect(data.gitConfig.authentication.password).to.be.a('string');
                expect(data.gitConfig.authentication.password).to.be("");
                expect(data.gitConfig.authentication.username).to.be.a('string');
                expect(data.gitConfig.authentication.username).to.be("");
              expect(data.gitConfig.configFilePath).to.be.a('string');
              expect(data.gitConfig.configFilePath).to.be("docker-compose.yml");
              expect(data.gitConfig.configHash).to.be.a('string');
              expect(data.gitConfig.configHash).to.be("bc4c183d756879ea4d173315338110b31004b8e0");
              expect(data.gitConfig.referenceName).to.be.a('string');
              expect(data.gitConfig.referenceName).to.be("refs/heads/branch_name");
              expect(data.gitConfig.tlsskipVerify).to.be.a('boolean');
              expect(data.gitConfig.tlsskipVerify).to.be(false);
              expect(data.gitConfig.url).to.be.a('string');
              expect(data.gitConfig.url).to.be("https://github.com/portainer/portainer.git");
            expect(data.isComposeFormat).to.be.a('boolean');
            expect(data.isComposeFormat).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("default");
            expect(data.projectPath).to.be.a('string');
            expect(data.projectPath).to.be("/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w");
            expect(data.updateDate).to.be.a('number');
            expect(data.updateDate).to.be(1587399600);
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("bob");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stackCreateDockerSwarmRepository', function() {
        it('should call stackCreateDockerSwarmRepository successfully', function(done) {
          // TODO: uncomment, update parameter values for stackCreateDockerSwarmRepository call and complete the assertions
          /*
          var endpointId = 56;
          var body = new PortainerCeApi.StacksSwarmStackFromGitRepositoryPayload();
          body.additionalFiles = ["[nz.compose.yml"," uat.compose.yml]"];
          body.autoUpdate = new PortainerCeApi.PortainerAutoUpdateSettings();
          body.autoUpdate.forcePullImage = false;
          body.autoUpdate.forceUpdate = false;
          body.autoUpdate.interval = "1m30s";
          body.autoUpdate.jobID = "15";
          body.autoUpdate.webhook = "05de31a2-79fa-4644-9c12-faa67e5c49f0";
          body.composeFile = "docker-compose.yml";
          body.env = [new PortainerCeApi.PortainerPair()];
          body.env[0].name = "name";
          body.env[0].value = "value";
          body.fromAppTemplate = false;
          body.name = "myStack";
          body.repositoryAuthentication = true;
          body.repositoryPassword = "myGitPassword";
          body.repositoryReferenceName = "refs/heads/master";
          body.repositoryURL = "https://github.com/openfaas/faas";
          body.repositoryUsername = "myGitUsername";
          body.swarmID = "jpofkc0i9uo9wtx1zesuk649w";
          body.tlsskipVerify = false;

          instance.stackCreateDockerSwarmRepository(endpointId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerStack);
            {
              let dataCtr = data.additionalFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.autoUpdate).to.be.a(PortainerCeApi.PortainerAutoUpdateSettings);
                  expect(data.autoUpdate.forcePullImage).to.be.a('boolean');
              expect(data.autoUpdate.forcePullImage).to.be(false);
              expect(data.autoUpdate.forceUpdate).to.be.a('boolean');
              expect(data.autoUpdate.forceUpdate).to.be(false);
              expect(data.autoUpdate.interval).to.be.a('string');
              expect(data.autoUpdate.interval).to.be("1m30s");
              expect(data.autoUpdate.jobID).to.be.a('string');
              expect(data.autoUpdate.jobID).to.be("15");
              expect(data.autoUpdate.webhook).to.be.a('string');
              expect(data.autoUpdate.webhook).to.be("05de31a2-79fa-4644-9c12-faa67e5c49f0");
            expect(data.endpointId).to.be.a('number');
            expect(data.endpointId).to.be(1);
            expect(data.entryPoint).to.be.a('string');
            expect(data.entryPoint).to.be("docker-compose.yml");
            {
              let dataCtr = data.env;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("myStack");
            expect(data.option).to.be.a(PortainerCeApi.PortainerStackOption);
                  expect(data.option.prune).to.be.a('boolean');
              expect(data.option.prune).to.be(false);
            expect(data.resourceControl).to.be.a(PortainerCeApi.PortainerResourceControl);
                  expect(data.resourceControl.accessLevel).to.be.a('number');
              expect(data.resourceControl.accessLevel).to.be(0);
              expect(data.resourceControl.administratorsOnly).to.be.a('boolean');
              expect(data.resourceControl.administratorsOnly).to.be(true);
              expect(data.resourceControl.id).to.be.a('number');
              expect(data.resourceControl.id).to.be(1);
              expect(data.resourceControl.ownerId).to.be.a('number');
              expect(data.resourceControl.ownerId).to.be(0);
              expect(data.resourceControl._public).to.be.a('boolean');
              expect(data.resourceControl._public).to.be(true);
              expect(data.resourceControl.resourceId).to.be.a('string');
              expect(data.resourceControl.resourceId).to.be("617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08");
              {
                let dataCtr = data.resourceControl.subResourceIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.resourceControl.system).to.be.a('boolean');
              expect(data.resourceControl.system).to.be(false);
              {
                let dataCtr = data.resourceControl.teamAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerTeamResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.teamId).to.be.a('number');
                  expect(data.teamId).to.be(0);
  
                        }
              }
              expect(data.resourceControl.type).to.be.a('number');
              expect(data.resourceControl.type).to.be(1);
              {
                let dataCtr = data.resourceControl.userAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerUserResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
  
                        }
              }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.swarmId).to.be.a('string');
            expect(data.swarmId).to.be("jpofkc0i9uo9wtx1zesuk649w");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(2);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("admin");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1587399600);
            expect(data.fromAppTemplate).to.be.a('boolean');
            expect(data.fromAppTemplate).to.be(false);
            expect(data.gitConfig).to.be.a(PortainerCeApi.GittypesRepoConfig);
                  expect(data.gitConfig.authentication).to.be.a(PortainerCeApi.GittypesGitAuthentication);
                    expect(data.gitConfig.authentication.gitCredentialID).to.be.a('number');
                expect(data.gitConfig.authentication.gitCredentialID).to.be(0);
                expect(data.gitConfig.authentication.password).to.be.a('string');
                expect(data.gitConfig.authentication.password).to.be("");
                expect(data.gitConfig.authentication.username).to.be.a('string');
                expect(data.gitConfig.authentication.username).to.be("");
              expect(data.gitConfig.configFilePath).to.be.a('string');
              expect(data.gitConfig.configFilePath).to.be("docker-compose.yml");
              expect(data.gitConfig.configHash).to.be.a('string');
              expect(data.gitConfig.configHash).to.be("bc4c183d756879ea4d173315338110b31004b8e0");
              expect(data.gitConfig.referenceName).to.be.a('string');
              expect(data.gitConfig.referenceName).to.be("refs/heads/branch_name");
              expect(data.gitConfig.tlsskipVerify).to.be.a('boolean');
              expect(data.gitConfig.tlsskipVerify).to.be(false);
              expect(data.gitConfig.url).to.be.a('string');
              expect(data.gitConfig.url).to.be("https://github.com/portainer/portainer.git");
            expect(data.isComposeFormat).to.be.a('boolean');
            expect(data.isComposeFormat).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("default");
            expect(data.projectPath).to.be.a('string');
            expect(data.projectPath).to.be("/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w");
            expect(data.updateDate).to.be.a('number');
            expect(data.updateDate).to.be(1587399600);
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("bob");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stackCreateDockerSwarmString', function() {
        it('should call stackCreateDockerSwarmString successfully', function(done) {
          // TODO: uncomment, update parameter values for stackCreateDockerSwarmString call and complete the assertions
          /*
          var body = new PortainerCeApi.StacksSwarmStackFromFileContentPayload();
          body.env = [new PortainerCeApi.PortainerPair()];
          body.env[0].name = "name";
          body.env[0].value = "value";
          body.fromAppTemplate = false;
          body.name = "myStack";
          body.stackFileContent = "version: 3
 services:
 web:
 image:nginx";
          body.swarmID = "jpofkc0i9uo9wtx1zesuk649w";
          var endpointId = 56;

          instance.stackCreateDockerSwarmString(body, endpointId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerStack);
            {
              let dataCtr = data.additionalFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.autoUpdate).to.be.a(PortainerCeApi.PortainerAutoUpdateSettings);
                  expect(data.autoUpdate.forcePullImage).to.be.a('boolean');
              expect(data.autoUpdate.forcePullImage).to.be(false);
              expect(data.autoUpdate.forceUpdate).to.be.a('boolean');
              expect(data.autoUpdate.forceUpdate).to.be(false);
              expect(data.autoUpdate.interval).to.be.a('string');
              expect(data.autoUpdate.interval).to.be("1m30s");
              expect(data.autoUpdate.jobID).to.be.a('string');
              expect(data.autoUpdate.jobID).to.be("15");
              expect(data.autoUpdate.webhook).to.be.a('string');
              expect(data.autoUpdate.webhook).to.be("05de31a2-79fa-4644-9c12-faa67e5c49f0");
            expect(data.endpointId).to.be.a('number');
            expect(data.endpointId).to.be(1);
            expect(data.entryPoint).to.be.a('string');
            expect(data.entryPoint).to.be("docker-compose.yml");
            {
              let dataCtr = data.env;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("myStack");
            expect(data.option).to.be.a(PortainerCeApi.PortainerStackOption);
                  expect(data.option.prune).to.be.a('boolean');
              expect(data.option.prune).to.be(false);
            expect(data.resourceControl).to.be.a(PortainerCeApi.PortainerResourceControl);
                  expect(data.resourceControl.accessLevel).to.be.a('number');
              expect(data.resourceControl.accessLevel).to.be(0);
              expect(data.resourceControl.administratorsOnly).to.be.a('boolean');
              expect(data.resourceControl.administratorsOnly).to.be(true);
              expect(data.resourceControl.id).to.be.a('number');
              expect(data.resourceControl.id).to.be(1);
              expect(data.resourceControl.ownerId).to.be.a('number');
              expect(data.resourceControl.ownerId).to.be(0);
              expect(data.resourceControl._public).to.be.a('boolean');
              expect(data.resourceControl._public).to.be(true);
              expect(data.resourceControl.resourceId).to.be.a('string');
              expect(data.resourceControl.resourceId).to.be("617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08");
              {
                let dataCtr = data.resourceControl.subResourceIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.resourceControl.system).to.be.a('boolean');
              expect(data.resourceControl.system).to.be(false);
              {
                let dataCtr = data.resourceControl.teamAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerTeamResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.teamId).to.be.a('number');
                  expect(data.teamId).to.be(0);
  
                        }
              }
              expect(data.resourceControl.type).to.be.a('number');
              expect(data.resourceControl.type).to.be(1);
              {
                let dataCtr = data.resourceControl.userAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerUserResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
  
                        }
              }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.swarmId).to.be.a('string');
            expect(data.swarmId).to.be("jpofkc0i9uo9wtx1zesuk649w");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(2);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("admin");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1587399600);
            expect(data.fromAppTemplate).to.be.a('boolean');
            expect(data.fromAppTemplate).to.be(false);
            expect(data.gitConfig).to.be.a(PortainerCeApi.GittypesRepoConfig);
                  expect(data.gitConfig.authentication).to.be.a(PortainerCeApi.GittypesGitAuthentication);
                    expect(data.gitConfig.authentication.gitCredentialID).to.be.a('number');
                expect(data.gitConfig.authentication.gitCredentialID).to.be(0);
                expect(data.gitConfig.authentication.password).to.be.a('string');
                expect(data.gitConfig.authentication.password).to.be("");
                expect(data.gitConfig.authentication.username).to.be.a('string');
                expect(data.gitConfig.authentication.username).to.be("");
              expect(data.gitConfig.configFilePath).to.be.a('string');
              expect(data.gitConfig.configFilePath).to.be("docker-compose.yml");
              expect(data.gitConfig.configHash).to.be.a('string');
              expect(data.gitConfig.configHash).to.be("bc4c183d756879ea4d173315338110b31004b8e0");
              expect(data.gitConfig.referenceName).to.be.a('string');
              expect(data.gitConfig.referenceName).to.be("refs/heads/branch_name");
              expect(data.gitConfig.tlsskipVerify).to.be.a('boolean');
              expect(data.gitConfig.tlsskipVerify).to.be(false);
              expect(data.gitConfig.url).to.be.a('string');
              expect(data.gitConfig.url).to.be("https://github.com/portainer/portainer.git");
            expect(data.isComposeFormat).to.be.a('boolean');
            expect(data.isComposeFormat).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("default");
            expect(data.projectPath).to.be.a('string');
            expect(data.projectPath).to.be("/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w");
            expect(data.updateDate).to.be.a('number');
            expect(data.updateDate).to.be(1587399600);
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("bob");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stackCreateKubernetesFile', function() {
        it('should call stackCreateKubernetesFile successfully', function(done) {
          // TODO: uncomment, update parameter values for stackCreateKubernetesFile call and complete the assertions
          /*
          var body = new PortainerCeApi.StacksKubernetesStringDeploymentPayload();
          body.composeFormat = false;
          body.fromAppTemplate = false;
          body.namespace = "";
          body.stackFileContent = "";
          body.stackName = "";
          var endpointId = 56;

          instance.stackCreateKubernetesFile(body, endpointId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerStack);
            {
              let dataCtr = data.additionalFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.autoUpdate).to.be.a(PortainerCeApi.PortainerAutoUpdateSettings);
                  expect(data.autoUpdate.forcePullImage).to.be.a('boolean');
              expect(data.autoUpdate.forcePullImage).to.be(false);
              expect(data.autoUpdate.forceUpdate).to.be.a('boolean');
              expect(data.autoUpdate.forceUpdate).to.be(false);
              expect(data.autoUpdate.interval).to.be.a('string');
              expect(data.autoUpdate.interval).to.be("1m30s");
              expect(data.autoUpdate.jobID).to.be.a('string');
              expect(data.autoUpdate.jobID).to.be("15");
              expect(data.autoUpdate.webhook).to.be.a('string');
              expect(data.autoUpdate.webhook).to.be("05de31a2-79fa-4644-9c12-faa67e5c49f0");
            expect(data.endpointId).to.be.a('number');
            expect(data.endpointId).to.be(1);
            expect(data.entryPoint).to.be.a('string');
            expect(data.entryPoint).to.be("docker-compose.yml");
            {
              let dataCtr = data.env;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("myStack");
            expect(data.option).to.be.a(PortainerCeApi.PortainerStackOption);
                  expect(data.option.prune).to.be.a('boolean');
              expect(data.option.prune).to.be(false);
            expect(data.resourceControl).to.be.a(PortainerCeApi.PortainerResourceControl);
                  expect(data.resourceControl.accessLevel).to.be.a('number');
              expect(data.resourceControl.accessLevel).to.be(0);
              expect(data.resourceControl.administratorsOnly).to.be.a('boolean');
              expect(data.resourceControl.administratorsOnly).to.be(true);
              expect(data.resourceControl.id).to.be.a('number');
              expect(data.resourceControl.id).to.be(1);
              expect(data.resourceControl.ownerId).to.be.a('number');
              expect(data.resourceControl.ownerId).to.be(0);
              expect(data.resourceControl._public).to.be.a('boolean');
              expect(data.resourceControl._public).to.be(true);
              expect(data.resourceControl.resourceId).to.be.a('string');
              expect(data.resourceControl.resourceId).to.be("617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08");
              {
                let dataCtr = data.resourceControl.subResourceIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.resourceControl.system).to.be.a('boolean');
              expect(data.resourceControl.system).to.be(false);
              {
                let dataCtr = data.resourceControl.teamAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerTeamResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.teamId).to.be.a('number');
                  expect(data.teamId).to.be(0);
  
                        }
              }
              expect(data.resourceControl.type).to.be.a('number');
              expect(data.resourceControl.type).to.be(1);
              {
                let dataCtr = data.resourceControl.userAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerUserResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
  
                        }
              }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.swarmId).to.be.a('string');
            expect(data.swarmId).to.be("jpofkc0i9uo9wtx1zesuk649w");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(2);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("admin");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1587399600);
            expect(data.fromAppTemplate).to.be.a('boolean');
            expect(data.fromAppTemplate).to.be(false);
            expect(data.gitConfig).to.be.a(PortainerCeApi.GittypesRepoConfig);
                  expect(data.gitConfig.authentication).to.be.a(PortainerCeApi.GittypesGitAuthentication);
                    expect(data.gitConfig.authentication.gitCredentialID).to.be.a('number');
                expect(data.gitConfig.authentication.gitCredentialID).to.be(0);
                expect(data.gitConfig.authentication.password).to.be.a('string');
                expect(data.gitConfig.authentication.password).to.be("");
                expect(data.gitConfig.authentication.username).to.be.a('string');
                expect(data.gitConfig.authentication.username).to.be("");
              expect(data.gitConfig.configFilePath).to.be.a('string');
              expect(data.gitConfig.configFilePath).to.be("docker-compose.yml");
              expect(data.gitConfig.configHash).to.be.a('string');
              expect(data.gitConfig.configHash).to.be("bc4c183d756879ea4d173315338110b31004b8e0");
              expect(data.gitConfig.referenceName).to.be.a('string');
              expect(data.gitConfig.referenceName).to.be("refs/heads/branch_name");
              expect(data.gitConfig.tlsskipVerify).to.be.a('boolean');
              expect(data.gitConfig.tlsskipVerify).to.be(false);
              expect(data.gitConfig.url).to.be.a('string');
              expect(data.gitConfig.url).to.be("https://github.com/portainer/portainer.git");
            expect(data.isComposeFormat).to.be.a('boolean');
            expect(data.isComposeFormat).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("default");
            expect(data.projectPath).to.be.a('string');
            expect(data.projectPath).to.be("/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w");
            expect(data.updateDate).to.be.a('number');
            expect(data.updateDate).to.be(1587399600);
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("bob");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stackCreateKubernetesGit', function() {
        it('should call stackCreateKubernetesGit successfully', function(done) {
          // TODO: uncomment, update parameter values for stackCreateKubernetesGit call and complete the assertions
          /*
          var body = new PortainerCeApi.StacksKubernetesGitDeploymentPayload();
          body.additionalFiles = [""];
          body.autoUpdate = new PortainerCeApi.PortainerAutoUpdateSettings();
          body.autoUpdate.forcePullImage = false;
          body.autoUpdate.forceUpdate = false;
          body.autoUpdate.interval = "1m30s";
          body.autoUpdate.jobID = "15";
          body.autoUpdate.webhook = "05de31a2-79fa-4644-9c12-faa67e5c49f0";
          body.composeFormat = false;
          body.manifestFile = "";
          body.namespace = "";
          body.repositoryAuthentication = false;
          body.repositoryPassword = "";
          body.repositoryReferenceName = "";
          body.repositoryURL = "";
          body.repositoryUsername = "";
          body.stackName = "";
          body.tlsskipVerify = false;
          var endpointId = 56;

          instance.stackCreateKubernetesGit(body, endpointId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerStack);
            {
              let dataCtr = data.additionalFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.autoUpdate).to.be.a(PortainerCeApi.PortainerAutoUpdateSettings);
                  expect(data.autoUpdate.forcePullImage).to.be.a('boolean');
              expect(data.autoUpdate.forcePullImage).to.be(false);
              expect(data.autoUpdate.forceUpdate).to.be.a('boolean');
              expect(data.autoUpdate.forceUpdate).to.be(false);
              expect(data.autoUpdate.interval).to.be.a('string');
              expect(data.autoUpdate.interval).to.be("1m30s");
              expect(data.autoUpdate.jobID).to.be.a('string');
              expect(data.autoUpdate.jobID).to.be("15");
              expect(data.autoUpdate.webhook).to.be.a('string');
              expect(data.autoUpdate.webhook).to.be("05de31a2-79fa-4644-9c12-faa67e5c49f0");
            expect(data.endpointId).to.be.a('number');
            expect(data.endpointId).to.be(1);
            expect(data.entryPoint).to.be.a('string');
            expect(data.entryPoint).to.be("docker-compose.yml");
            {
              let dataCtr = data.env;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("myStack");
            expect(data.option).to.be.a(PortainerCeApi.PortainerStackOption);
                  expect(data.option.prune).to.be.a('boolean');
              expect(data.option.prune).to.be(false);
            expect(data.resourceControl).to.be.a(PortainerCeApi.PortainerResourceControl);
                  expect(data.resourceControl.accessLevel).to.be.a('number');
              expect(data.resourceControl.accessLevel).to.be(0);
              expect(data.resourceControl.administratorsOnly).to.be.a('boolean');
              expect(data.resourceControl.administratorsOnly).to.be(true);
              expect(data.resourceControl.id).to.be.a('number');
              expect(data.resourceControl.id).to.be(1);
              expect(data.resourceControl.ownerId).to.be.a('number');
              expect(data.resourceControl.ownerId).to.be(0);
              expect(data.resourceControl._public).to.be.a('boolean');
              expect(data.resourceControl._public).to.be(true);
              expect(data.resourceControl.resourceId).to.be.a('string');
              expect(data.resourceControl.resourceId).to.be("617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08");
              {
                let dataCtr = data.resourceControl.subResourceIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.resourceControl.system).to.be.a('boolean');
              expect(data.resourceControl.system).to.be(false);
              {
                let dataCtr = data.resourceControl.teamAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerTeamResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.teamId).to.be.a('number');
                  expect(data.teamId).to.be(0);
  
                        }
              }
              expect(data.resourceControl.type).to.be.a('number');
              expect(data.resourceControl.type).to.be(1);
              {
                let dataCtr = data.resourceControl.userAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerUserResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
  
                        }
              }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.swarmId).to.be.a('string');
            expect(data.swarmId).to.be("jpofkc0i9uo9wtx1zesuk649w");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(2);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("admin");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1587399600);
            expect(data.fromAppTemplate).to.be.a('boolean');
            expect(data.fromAppTemplate).to.be(false);
            expect(data.gitConfig).to.be.a(PortainerCeApi.GittypesRepoConfig);
                  expect(data.gitConfig.authentication).to.be.a(PortainerCeApi.GittypesGitAuthentication);
                    expect(data.gitConfig.authentication.gitCredentialID).to.be.a('number');
                expect(data.gitConfig.authentication.gitCredentialID).to.be(0);
                expect(data.gitConfig.authentication.password).to.be.a('string');
                expect(data.gitConfig.authentication.password).to.be("");
                expect(data.gitConfig.authentication.username).to.be.a('string');
                expect(data.gitConfig.authentication.username).to.be("");
              expect(data.gitConfig.configFilePath).to.be.a('string');
              expect(data.gitConfig.configFilePath).to.be("docker-compose.yml");
              expect(data.gitConfig.configHash).to.be.a('string');
              expect(data.gitConfig.configHash).to.be("bc4c183d756879ea4d173315338110b31004b8e0");
              expect(data.gitConfig.referenceName).to.be.a('string');
              expect(data.gitConfig.referenceName).to.be("refs/heads/branch_name");
              expect(data.gitConfig.tlsskipVerify).to.be.a('boolean');
              expect(data.gitConfig.tlsskipVerify).to.be(false);
              expect(data.gitConfig.url).to.be.a('string');
              expect(data.gitConfig.url).to.be("https://github.com/portainer/portainer.git");
            expect(data.isComposeFormat).to.be.a('boolean');
            expect(data.isComposeFormat).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("default");
            expect(data.projectPath).to.be.a('string');
            expect(data.projectPath).to.be("/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w");
            expect(data.updateDate).to.be.a('number');
            expect(data.updateDate).to.be(1587399600);
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("bob");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stackCreateKubernetesUrl', function() {
        it('should call stackCreateKubernetesUrl successfully', function(done) {
          // TODO: uncomment, update parameter values for stackCreateKubernetesUrl call and complete the assertions
          /*
          var body = new PortainerCeApi.StacksKubernetesManifestURLDeploymentPayload();
          body.composeFormat = false;
          body.manifestURL = "";
          body.namespace = "";
          body.stackName = "";
          var endpointId = 56;

          instance.stackCreateKubernetesUrl(body, endpointId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerStack);
            {
              let dataCtr = data.additionalFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.autoUpdate).to.be.a(PortainerCeApi.PortainerAutoUpdateSettings);
                  expect(data.autoUpdate.forcePullImage).to.be.a('boolean');
              expect(data.autoUpdate.forcePullImage).to.be(false);
              expect(data.autoUpdate.forceUpdate).to.be.a('boolean');
              expect(data.autoUpdate.forceUpdate).to.be(false);
              expect(data.autoUpdate.interval).to.be.a('string');
              expect(data.autoUpdate.interval).to.be("1m30s");
              expect(data.autoUpdate.jobID).to.be.a('string');
              expect(data.autoUpdate.jobID).to.be("15");
              expect(data.autoUpdate.webhook).to.be.a('string');
              expect(data.autoUpdate.webhook).to.be("05de31a2-79fa-4644-9c12-faa67e5c49f0");
            expect(data.endpointId).to.be.a('number');
            expect(data.endpointId).to.be(1);
            expect(data.entryPoint).to.be.a('string');
            expect(data.entryPoint).to.be("docker-compose.yml");
            {
              let dataCtr = data.env;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("myStack");
            expect(data.option).to.be.a(PortainerCeApi.PortainerStackOption);
                  expect(data.option.prune).to.be.a('boolean');
              expect(data.option.prune).to.be(false);
            expect(data.resourceControl).to.be.a(PortainerCeApi.PortainerResourceControl);
                  expect(data.resourceControl.accessLevel).to.be.a('number');
              expect(data.resourceControl.accessLevel).to.be(0);
              expect(data.resourceControl.administratorsOnly).to.be.a('boolean');
              expect(data.resourceControl.administratorsOnly).to.be(true);
              expect(data.resourceControl.id).to.be.a('number');
              expect(data.resourceControl.id).to.be(1);
              expect(data.resourceControl.ownerId).to.be.a('number');
              expect(data.resourceControl.ownerId).to.be(0);
              expect(data.resourceControl._public).to.be.a('boolean');
              expect(data.resourceControl._public).to.be(true);
              expect(data.resourceControl.resourceId).to.be.a('string');
              expect(data.resourceControl.resourceId).to.be("617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08");
              {
                let dataCtr = data.resourceControl.subResourceIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.resourceControl.system).to.be.a('boolean');
              expect(data.resourceControl.system).to.be(false);
              {
                let dataCtr = data.resourceControl.teamAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerTeamResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.teamId).to.be.a('number');
                  expect(data.teamId).to.be(0);
  
                        }
              }
              expect(data.resourceControl.type).to.be.a('number');
              expect(data.resourceControl.type).to.be(1);
              {
                let dataCtr = data.resourceControl.userAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerUserResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
  
                        }
              }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.swarmId).to.be.a('string');
            expect(data.swarmId).to.be("jpofkc0i9uo9wtx1zesuk649w");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(2);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("admin");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1587399600);
            expect(data.fromAppTemplate).to.be.a('boolean');
            expect(data.fromAppTemplate).to.be(false);
            expect(data.gitConfig).to.be.a(PortainerCeApi.GittypesRepoConfig);
                  expect(data.gitConfig.authentication).to.be.a(PortainerCeApi.GittypesGitAuthentication);
                    expect(data.gitConfig.authentication.gitCredentialID).to.be.a('number');
                expect(data.gitConfig.authentication.gitCredentialID).to.be(0);
                expect(data.gitConfig.authentication.password).to.be.a('string');
                expect(data.gitConfig.authentication.password).to.be("");
                expect(data.gitConfig.authentication.username).to.be.a('string');
                expect(data.gitConfig.authentication.username).to.be("");
              expect(data.gitConfig.configFilePath).to.be.a('string');
              expect(data.gitConfig.configFilePath).to.be("docker-compose.yml");
              expect(data.gitConfig.configHash).to.be.a('string');
              expect(data.gitConfig.configHash).to.be("bc4c183d756879ea4d173315338110b31004b8e0");
              expect(data.gitConfig.referenceName).to.be.a('string');
              expect(data.gitConfig.referenceName).to.be("refs/heads/branch_name");
              expect(data.gitConfig.tlsskipVerify).to.be.a('boolean');
              expect(data.gitConfig.tlsskipVerify).to.be(false);
              expect(data.gitConfig.url).to.be.a('string');
              expect(data.gitConfig.url).to.be("https://github.com/portainer/portainer.git");
            expect(data.isComposeFormat).to.be.a('boolean');
            expect(data.isComposeFormat).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("default");
            expect(data.projectPath).to.be.a('string');
            expect(data.projectPath).to.be("/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w");
            expect(data.updateDate).to.be.a('number');
            expect(data.updateDate).to.be(1587399600);
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("bob");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stackDelete', function() {
        it('should call stackDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for stackDelete call
          /*
          var id = 56;
          var endpointId = 56;
          var opts = {};
          opts.external = true;

          instance.stackDelete(id, endpointId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stackDeleteKubernetesByName', function() {
        it('should call stackDeleteKubernetesByName successfully', function(done) {
          // TODO: uncomment, update parameter values for stackDeleteKubernetesByName call
          /*
          var name = "name_example";
          var endpointId = 56;
          var opts = {};
          opts.external = true;

          instance.stackDeleteKubernetesByName(name, endpointId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stackFileInspect', function() {
        it('should call stackFileInspect successfully', function(done) {
          // TODO: uncomment, update parameter values for stackFileInspect call and complete the assertions
          /*
          var id = 56;

          instance.stackFileInspect(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.StacksStackFileResponse);
            expect(data.stackFileContent).to.be.a('string');
            expect(data.stackFileContent).to.be("version: 3
 services:
 web:
 image:nginx");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stackGitRedeploy', function() {
        it('should call stackGitRedeploy successfully', function(done) {
          // TODO: uncomment, update parameter values for stackGitRedeploy call and complete the assertions
          /*
          var id = 56;
          var body = new PortainerCeApi.StacksStackGitRedployPayload();
          body.env = [new PortainerCeApi.PortainerPair()];
          body.env[0].name = "name";
          body.env[0].value = "value";
          body.prune = false;
          body.pullImage = false;
          body.repositoryAuthentication = false;
          body.repositoryPassword = "";
          body.repositoryReferenceName = "";
          body.repositoryUsername = "";
          body.stackName = "";
          var opts = {};
          opts.endpointId = 56;

          instance.stackGitRedeploy(id, body, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerStack);
            {
              let dataCtr = data.additionalFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.autoUpdate).to.be.a(PortainerCeApi.PortainerAutoUpdateSettings);
                  expect(data.autoUpdate.forcePullImage).to.be.a('boolean');
              expect(data.autoUpdate.forcePullImage).to.be(false);
              expect(data.autoUpdate.forceUpdate).to.be.a('boolean');
              expect(data.autoUpdate.forceUpdate).to.be(false);
              expect(data.autoUpdate.interval).to.be.a('string');
              expect(data.autoUpdate.interval).to.be("1m30s");
              expect(data.autoUpdate.jobID).to.be.a('string');
              expect(data.autoUpdate.jobID).to.be("15");
              expect(data.autoUpdate.webhook).to.be.a('string');
              expect(data.autoUpdate.webhook).to.be("05de31a2-79fa-4644-9c12-faa67e5c49f0");
            expect(data.endpointId).to.be.a('number');
            expect(data.endpointId).to.be(1);
            expect(data.entryPoint).to.be.a('string');
            expect(data.entryPoint).to.be("docker-compose.yml");
            {
              let dataCtr = data.env;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("myStack");
            expect(data.option).to.be.a(PortainerCeApi.PortainerStackOption);
                  expect(data.option.prune).to.be.a('boolean');
              expect(data.option.prune).to.be(false);
            expect(data.resourceControl).to.be.a(PortainerCeApi.PortainerResourceControl);
                  expect(data.resourceControl.accessLevel).to.be.a('number');
              expect(data.resourceControl.accessLevel).to.be(0);
              expect(data.resourceControl.administratorsOnly).to.be.a('boolean');
              expect(data.resourceControl.administratorsOnly).to.be(true);
              expect(data.resourceControl.id).to.be.a('number');
              expect(data.resourceControl.id).to.be(1);
              expect(data.resourceControl.ownerId).to.be.a('number');
              expect(data.resourceControl.ownerId).to.be(0);
              expect(data.resourceControl._public).to.be.a('boolean');
              expect(data.resourceControl._public).to.be(true);
              expect(data.resourceControl.resourceId).to.be.a('string');
              expect(data.resourceControl.resourceId).to.be("617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08");
              {
                let dataCtr = data.resourceControl.subResourceIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.resourceControl.system).to.be.a('boolean');
              expect(data.resourceControl.system).to.be(false);
              {
                let dataCtr = data.resourceControl.teamAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerTeamResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.teamId).to.be.a('number');
                  expect(data.teamId).to.be(0);
  
                        }
              }
              expect(data.resourceControl.type).to.be.a('number');
              expect(data.resourceControl.type).to.be(1);
              {
                let dataCtr = data.resourceControl.userAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerUserResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
  
                        }
              }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.swarmId).to.be.a('string');
            expect(data.swarmId).to.be("jpofkc0i9uo9wtx1zesuk649w");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(2);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("admin");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1587399600);
            expect(data.fromAppTemplate).to.be.a('boolean');
            expect(data.fromAppTemplate).to.be(false);
            expect(data.gitConfig).to.be.a(PortainerCeApi.GittypesRepoConfig);
                  expect(data.gitConfig.authentication).to.be.a(PortainerCeApi.GittypesGitAuthentication);
                    expect(data.gitConfig.authentication.gitCredentialID).to.be.a('number');
                expect(data.gitConfig.authentication.gitCredentialID).to.be(0);
                expect(data.gitConfig.authentication.password).to.be.a('string');
                expect(data.gitConfig.authentication.password).to.be("");
                expect(data.gitConfig.authentication.username).to.be.a('string');
                expect(data.gitConfig.authentication.username).to.be("");
              expect(data.gitConfig.configFilePath).to.be.a('string');
              expect(data.gitConfig.configFilePath).to.be("docker-compose.yml");
              expect(data.gitConfig.configHash).to.be.a('string');
              expect(data.gitConfig.configHash).to.be("bc4c183d756879ea4d173315338110b31004b8e0");
              expect(data.gitConfig.referenceName).to.be.a('string');
              expect(data.gitConfig.referenceName).to.be("refs/heads/branch_name");
              expect(data.gitConfig.tlsskipVerify).to.be.a('boolean');
              expect(data.gitConfig.tlsskipVerify).to.be(false);
              expect(data.gitConfig.url).to.be.a('string');
              expect(data.gitConfig.url).to.be("https://github.com/portainer/portainer.git");
            expect(data.isComposeFormat).to.be.a('boolean');
            expect(data.isComposeFormat).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("default");
            expect(data.projectPath).to.be.a('string');
            expect(data.projectPath).to.be("/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w");
            expect(data.updateDate).to.be.a('number');
            expect(data.updateDate).to.be(1587399600);
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("bob");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stackInspect', function() {
        it('should call stackInspect successfully', function(done) {
          // TODO: uncomment, update parameter values for stackInspect call and complete the assertions
          /*
          var id = 56;

          instance.stackInspect(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerStack);
            {
              let dataCtr = data.additionalFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.autoUpdate).to.be.a(PortainerCeApi.PortainerAutoUpdateSettings);
                  expect(data.autoUpdate.forcePullImage).to.be.a('boolean');
              expect(data.autoUpdate.forcePullImage).to.be(false);
              expect(data.autoUpdate.forceUpdate).to.be.a('boolean');
              expect(data.autoUpdate.forceUpdate).to.be(false);
              expect(data.autoUpdate.interval).to.be.a('string');
              expect(data.autoUpdate.interval).to.be("1m30s");
              expect(data.autoUpdate.jobID).to.be.a('string');
              expect(data.autoUpdate.jobID).to.be("15");
              expect(data.autoUpdate.webhook).to.be.a('string');
              expect(data.autoUpdate.webhook).to.be("05de31a2-79fa-4644-9c12-faa67e5c49f0");
            expect(data.endpointId).to.be.a('number');
            expect(data.endpointId).to.be(1);
            expect(data.entryPoint).to.be.a('string');
            expect(data.entryPoint).to.be("docker-compose.yml");
            {
              let dataCtr = data.env;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("myStack");
            expect(data.option).to.be.a(PortainerCeApi.PortainerStackOption);
                  expect(data.option.prune).to.be.a('boolean');
              expect(data.option.prune).to.be(false);
            expect(data.resourceControl).to.be.a(PortainerCeApi.PortainerResourceControl);
                  expect(data.resourceControl.accessLevel).to.be.a('number');
              expect(data.resourceControl.accessLevel).to.be(0);
              expect(data.resourceControl.administratorsOnly).to.be.a('boolean');
              expect(data.resourceControl.administratorsOnly).to.be(true);
              expect(data.resourceControl.id).to.be.a('number');
              expect(data.resourceControl.id).to.be(1);
              expect(data.resourceControl.ownerId).to.be.a('number');
              expect(data.resourceControl.ownerId).to.be(0);
              expect(data.resourceControl._public).to.be.a('boolean');
              expect(data.resourceControl._public).to.be(true);
              expect(data.resourceControl.resourceId).to.be.a('string');
              expect(data.resourceControl.resourceId).to.be("617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08");
              {
                let dataCtr = data.resourceControl.subResourceIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.resourceControl.system).to.be.a('boolean');
              expect(data.resourceControl.system).to.be(false);
              {
                let dataCtr = data.resourceControl.teamAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerTeamResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.teamId).to.be.a('number');
                  expect(data.teamId).to.be(0);
  
                        }
              }
              expect(data.resourceControl.type).to.be.a('number');
              expect(data.resourceControl.type).to.be(1);
              {
                let dataCtr = data.resourceControl.userAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerUserResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
  
                        }
              }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.swarmId).to.be.a('string');
            expect(data.swarmId).to.be("jpofkc0i9uo9wtx1zesuk649w");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(2);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("admin");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1587399600);
            expect(data.fromAppTemplate).to.be.a('boolean');
            expect(data.fromAppTemplate).to.be(false);
            expect(data.gitConfig).to.be.a(PortainerCeApi.GittypesRepoConfig);
                  expect(data.gitConfig.authentication).to.be.a(PortainerCeApi.GittypesGitAuthentication);
                    expect(data.gitConfig.authentication.gitCredentialID).to.be.a('number');
                expect(data.gitConfig.authentication.gitCredentialID).to.be(0);
                expect(data.gitConfig.authentication.password).to.be.a('string');
                expect(data.gitConfig.authentication.password).to.be("");
                expect(data.gitConfig.authentication.username).to.be.a('string');
                expect(data.gitConfig.authentication.username).to.be("");
              expect(data.gitConfig.configFilePath).to.be.a('string');
              expect(data.gitConfig.configFilePath).to.be("docker-compose.yml");
              expect(data.gitConfig.configHash).to.be.a('string');
              expect(data.gitConfig.configHash).to.be("bc4c183d756879ea4d173315338110b31004b8e0");
              expect(data.gitConfig.referenceName).to.be.a('string');
              expect(data.gitConfig.referenceName).to.be("refs/heads/branch_name");
              expect(data.gitConfig.tlsskipVerify).to.be.a('boolean');
              expect(data.gitConfig.tlsskipVerify).to.be(false);
              expect(data.gitConfig.url).to.be.a('string');
              expect(data.gitConfig.url).to.be("https://github.com/portainer/portainer.git");
            expect(data.isComposeFormat).to.be.a('boolean');
            expect(data.isComposeFormat).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("default");
            expect(data.projectPath).to.be.a('string');
            expect(data.projectPath).to.be("/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w");
            expect(data.updateDate).to.be.a('number');
            expect(data.updateDate).to.be(1587399600);
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("bob");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stackList', function() {
        it('should call stackList successfully', function(done) {
          // TODO: uncomment, update parameter values for stackList call and complete the assertions
          /*
          var opts = {};
          opts.filters = "filters_example";

          instance.stackList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PortainerCeApi.PortainerStack);
              {
                let dataCtr = data.additionalFiles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.autoUpdate).to.be.a(PortainerCeApi.PortainerAutoUpdateSettings);
                    expect(data.autoUpdate.forcePullImage).to.be.a('boolean');
                expect(data.autoUpdate.forcePullImage).to.be(false);
                expect(data.autoUpdate.forceUpdate).to.be.a('boolean');
                expect(data.autoUpdate.forceUpdate).to.be(false);
                expect(data.autoUpdate.interval).to.be.a('string');
                expect(data.autoUpdate.interval).to.be("1m30s");
                expect(data.autoUpdate.jobID).to.be.a('string');
                expect(data.autoUpdate.jobID).to.be("15");
                expect(data.autoUpdate.webhook).to.be.a('string');
                expect(data.autoUpdate.webhook).to.be("05de31a2-79fa-4644-9c12-faa67e5c49f0");
              expect(data.endpointId).to.be.a('number');
              expect(data.endpointId).to.be(1);
              expect(data.entryPoint).to.be.a('string');
              expect(data.entryPoint).to.be("docker-compose.yml");
              {
                let dataCtr = data.env;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerPair);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("name");
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("value");
  
                        }
              }
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(1);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("myStack");
              expect(data.option).to.be.a(PortainerCeApi.PortainerStackOption);
                    expect(data.option.prune).to.be.a('boolean');
                expect(data.option.prune).to.be(false);
              expect(data.resourceControl).to.be.a(PortainerCeApi.PortainerResourceControl);
                    expect(data.resourceControl.accessLevel).to.be.a('number');
                expect(data.resourceControl.accessLevel).to.be(0);
                expect(data.resourceControl.administratorsOnly).to.be.a('boolean');
                expect(data.resourceControl.administratorsOnly).to.be(true);
                expect(data.resourceControl.id).to.be.a('number');
                expect(data.resourceControl.id).to.be(1);
                expect(data.resourceControl.ownerId).to.be.a('number');
                expect(data.resourceControl.ownerId).to.be(0);
                expect(data.resourceControl._public).to.be.a('boolean');
                expect(data.resourceControl._public).to.be(true);
                expect(data.resourceControl.resourceId).to.be.a('string');
                expect(data.resourceControl.resourceId).to.be("617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08");
                {
                  let dataCtr = data.resourceControl.subResourceIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.resourceControl.system).to.be.a('boolean');
                expect(data.resourceControl.system).to.be(false);
                {
                  let dataCtr = data.resourceControl.teamAccesses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PortainerCeApi.PortainerTeamResourceAccess);
                    expect(data.accessLevel).to.be.a('number');
                    expect(data.accessLevel).to.be(0);
                    expect(data.teamId).to.be.a('number');
                    expect(data.teamId).to.be(0);
    
                          }
                }
                expect(data.resourceControl.type).to.be.a('number');
                expect(data.resourceControl.type).to.be(1);
                {
                  let dataCtr = data.resourceControl.userAccesses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PortainerCeApi.PortainerUserResourceAccess);
                    expect(data.accessLevel).to.be.a('number');
                    expect(data.accessLevel).to.be(0);
                    expect(data.userId).to.be.a('number');
                    expect(data.userId).to.be(0);
    
                          }
                }
              expect(data.status).to.be.a('number');
              expect(data.status).to.be(1);
              expect(data.swarmId).to.be.a('string');
              expect(data.swarmId).to.be("jpofkc0i9uo9wtx1zesuk649w");
              expect(data.type).to.be.a('number');
              expect(data.type).to.be(2);
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("admin");
              expect(data.creationDate).to.be.a('number');
              expect(data.creationDate).to.be(1587399600);
              expect(data.fromAppTemplate).to.be.a('boolean');
              expect(data.fromAppTemplate).to.be(false);
              expect(data.gitConfig).to.be.a(PortainerCeApi.GittypesRepoConfig);
                    expect(data.gitConfig.authentication).to.be.a(PortainerCeApi.GittypesGitAuthentication);
                      expect(data.gitConfig.authentication.gitCredentialID).to.be.a('number');
                  expect(data.gitConfig.authentication.gitCredentialID).to.be(0);
                  expect(data.gitConfig.authentication.password).to.be.a('string');
                  expect(data.gitConfig.authentication.password).to.be("");
                  expect(data.gitConfig.authentication.username).to.be.a('string');
                  expect(data.gitConfig.authentication.username).to.be("");
                expect(data.gitConfig.configFilePath).to.be.a('string');
                expect(data.gitConfig.configFilePath).to.be("docker-compose.yml");
                expect(data.gitConfig.configHash).to.be.a('string');
                expect(data.gitConfig.configHash).to.be("bc4c183d756879ea4d173315338110b31004b8e0");
                expect(data.gitConfig.referenceName).to.be.a('string');
                expect(data.gitConfig.referenceName).to.be("refs/heads/branch_name");
                expect(data.gitConfig.tlsskipVerify).to.be.a('boolean');
                expect(data.gitConfig.tlsskipVerify).to.be(false);
                expect(data.gitConfig.url).to.be.a('string');
                expect(data.gitConfig.url).to.be("https://github.com/portainer/portainer.git");
              expect(data.isComposeFormat).to.be.a('boolean');
              expect(data.isComposeFormat).to.be(false);
              expect(data.namespace).to.be.a('string');
              expect(data.namespace).to.be("default");
              expect(data.projectPath).to.be.a('string');
              expect(data.projectPath).to.be("/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w");
              expect(data.updateDate).to.be.a('number');
              expect(data.updateDate).to.be(1587399600);
              expect(data.updatedBy).to.be.a('string');
              expect(data.updatedBy).to.be("bob");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stackMigrate', function() {
        it('should call stackMigrate successfully', function(done) {
          // TODO: uncomment, update parameter values for stackMigrate call and complete the assertions
          /*
          var id = 56;
          var body = new PortainerCeApi.StacksStackMigratePayload();
          body.endpointID = 2;
          body.name = "new-stack";
          body.swarmID = "jpofkc0i9uo9wtx1zesuk649w";
          var opts = {};
          opts.endpointId = 56;

          instance.stackMigrate(id, body, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerStack);
            {
              let dataCtr = data.additionalFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.autoUpdate).to.be.a(PortainerCeApi.PortainerAutoUpdateSettings);
                  expect(data.autoUpdate.forcePullImage).to.be.a('boolean');
              expect(data.autoUpdate.forcePullImage).to.be(false);
              expect(data.autoUpdate.forceUpdate).to.be.a('boolean');
              expect(data.autoUpdate.forceUpdate).to.be(false);
              expect(data.autoUpdate.interval).to.be.a('string');
              expect(data.autoUpdate.interval).to.be("1m30s");
              expect(data.autoUpdate.jobID).to.be.a('string');
              expect(data.autoUpdate.jobID).to.be("15");
              expect(data.autoUpdate.webhook).to.be.a('string');
              expect(data.autoUpdate.webhook).to.be("05de31a2-79fa-4644-9c12-faa67e5c49f0");
            expect(data.endpointId).to.be.a('number');
            expect(data.endpointId).to.be(1);
            expect(data.entryPoint).to.be.a('string');
            expect(data.entryPoint).to.be("docker-compose.yml");
            {
              let dataCtr = data.env;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("myStack");
            expect(data.option).to.be.a(PortainerCeApi.PortainerStackOption);
                  expect(data.option.prune).to.be.a('boolean');
              expect(data.option.prune).to.be(false);
            expect(data.resourceControl).to.be.a(PortainerCeApi.PortainerResourceControl);
                  expect(data.resourceControl.accessLevel).to.be.a('number');
              expect(data.resourceControl.accessLevel).to.be(0);
              expect(data.resourceControl.administratorsOnly).to.be.a('boolean');
              expect(data.resourceControl.administratorsOnly).to.be(true);
              expect(data.resourceControl.id).to.be.a('number');
              expect(data.resourceControl.id).to.be(1);
              expect(data.resourceControl.ownerId).to.be.a('number');
              expect(data.resourceControl.ownerId).to.be(0);
              expect(data.resourceControl._public).to.be.a('boolean');
              expect(data.resourceControl._public).to.be(true);
              expect(data.resourceControl.resourceId).to.be.a('string');
              expect(data.resourceControl.resourceId).to.be("617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08");
              {
                let dataCtr = data.resourceControl.subResourceIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.resourceControl.system).to.be.a('boolean');
              expect(data.resourceControl.system).to.be(false);
              {
                let dataCtr = data.resourceControl.teamAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerTeamResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.teamId).to.be.a('number');
                  expect(data.teamId).to.be(0);
  
                        }
              }
              expect(data.resourceControl.type).to.be.a('number');
              expect(data.resourceControl.type).to.be(1);
              {
                let dataCtr = data.resourceControl.userAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerUserResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
  
                        }
              }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.swarmId).to.be.a('string');
            expect(data.swarmId).to.be("jpofkc0i9uo9wtx1zesuk649w");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(2);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("admin");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1587399600);
            expect(data.fromAppTemplate).to.be.a('boolean');
            expect(data.fromAppTemplate).to.be(false);
            expect(data.gitConfig).to.be.a(PortainerCeApi.GittypesRepoConfig);
                  expect(data.gitConfig.authentication).to.be.a(PortainerCeApi.GittypesGitAuthentication);
                    expect(data.gitConfig.authentication.gitCredentialID).to.be.a('number');
                expect(data.gitConfig.authentication.gitCredentialID).to.be(0);
                expect(data.gitConfig.authentication.password).to.be.a('string');
                expect(data.gitConfig.authentication.password).to.be("");
                expect(data.gitConfig.authentication.username).to.be.a('string');
                expect(data.gitConfig.authentication.username).to.be("");
              expect(data.gitConfig.configFilePath).to.be.a('string');
              expect(data.gitConfig.configFilePath).to.be("docker-compose.yml");
              expect(data.gitConfig.configHash).to.be.a('string');
              expect(data.gitConfig.configHash).to.be("bc4c183d756879ea4d173315338110b31004b8e0");
              expect(data.gitConfig.referenceName).to.be.a('string');
              expect(data.gitConfig.referenceName).to.be("refs/heads/branch_name");
              expect(data.gitConfig.tlsskipVerify).to.be.a('boolean');
              expect(data.gitConfig.tlsskipVerify).to.be(false);
              expect(data.gitConfig.url).to.be.a('string');
              expect(data.gitConfig.url).to.be("https://github.com/portainer/portainer.git");
            expect(data.isComposeFormat).to.be.a('boolean');
            expect(data.isComposeFormat).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("default");
            expect(data.projectPath).to.be.a('string');
            expect(data.projectPath).to.be("/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w");
            expect(data.updateDate).to.be.a('number');
            expect(data.updateDate).to.be(1587399600);
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("bob");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stackStart', function() {
        it('should call stackStart successfully', function(done) {
          // TODO: uncomment, update parameter values for stackStart call and complete the assertions
          /*
          var id = 56;
          var endpointId = 56;

          instance.stackStart(id, endpointId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerStack);
            {
              let dataCtr = data.additionalFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.autoUpdate).to.be.a(PortainerCeApi.PortainerAutoUpdateSettings);
                  expect(data.autoUpdate.forcePullImage).to.be.a('boolean');
              expect(data.autoUpdate.forcePullImage).to.be(false);
              expect(data.autoUpdate.forceUpdate).to.be.a('boolean');
              expect(data.autoUpdate.forceUpdate).to.be(false);
              expect(data.autoUpdate.interval).to.be.a('string');
              expect(data.autoUpdate.interval).to.be("1m30s");
              expect(data.autoUpdate.jobID).to.be.a('string');
              expect(data.autoUpdate.jobID).to.be("15");
              expect(data.autoUpdate.webhook).to.be.a('string');
              expect(data.autoUpdate.webhook).to.be("05de31a2-79fa-4644-9c12-faa67e5c49f0");
            expect(data.endpointId).to.be.a('number');
            expect(data.endpointId).to.be(1);
            expect(data.entryPoint).to.be.a('string');
            expect(data.entryPoint).to.be("docker-compose.yml");
            {
              let dataCtr = data.env;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("myStack");
            expect(data.option).to.be.a(PortainerCeApi.PortainerStackOption);
                  expect(data.option.prune).to.be.a('boolean');
              expect(data.option.prune).to.be(false);
            expect(data.resourceControl).to.be.a(PortainerCeApi.PortainerResourceControl);
                  expect(data.resourceControl.accessLevel).to.be.a('number');
              expect(data.resourceControl.accessLevel).to.be(0);
              expect(data.resourceControl.administratorsOnly).to.be.a('boolean');
              expect(data.resourceControl.administratorsOnly).to.be(true);
              expect(data.resourceControl.id).to.be.a('number');
              expect(data.resourceControl.id).to.be(1);
              expect(data.resourceControl.ownerId).to.be.a('number');
              expect(data.resourceControl.ownerId).to.be(0);
              expect(data.resourceControl._public).to.be.a('boolean');
              expect(data.resourceControl._public).to.be(true);
              expect(data.resourceControl.resourceId).to.be.a('string');
              expect(data.resourceControl.resourceId).to.be("617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08");
              {
                let dataCtr = data.resourceControl.subResourceIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.resourceControl.system).to.be.a('boolean');
              expect(data.resourceControl.system).to.be(false);
              {
                let dataCtr = data.resourceControl.teamAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerTeamResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.teamId).to.be.a('number');
                  expect(data.teamId).to.be(0);
  
                        }
              }
              expect(data.resourceControl.type).to.be.a('number');
              expect(data.resourceControl.type).to.be(1);
              {
                let dataCtr = data.resourceControl.userAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerUserResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
  
                        }
              }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.swarmId).to.be.a('string');
            expect(data.swarmId).to.be("jpofkc0i9uo9wtx1zesuk649w");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(2);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("admin");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1587399600);
            expect(data.fromAppTemplate).to.be.a('boolean');
            expect(data.fromAppTemplate).to.be(false);
            expect(data.gitConfig).to.be.a(PortainerCeApi.GittypesRepoConfig);
                  expect(data.gitConfig.authentication).to.be.a(PortainerCeApi.GittypesGitAuthentication);
                    expect(data.gitConfig.authentication.gitCredentialID).to.be.a('number');
                expect(data.gitConfig.authentication.gitCredentialID).to.be(0);
                expect(data.gitConfig.authentication.password).to.be.a('string');
                expect(data.gitConfig.authentication.password).to.be("");
                expect(data.gitConfig.authentication.username).to.be.a('string');
                expect(data.gitConfig.authentication.username).to.be("");
              expect(data.gitConfig.configFilePath).to.be.a('string');
              expect(data.gitConfig.configFilePath).to.be("docker-compose.yml");
              expect(data.gitConfig.configHash).to.be.a('string');
              expect(data.gitConfig.configHash).to.be("bc4c183d756879ea4d173315338110b31004b8e0");
              expect(data.gitConfig.referenceName).to.be.a('string');
              expect(data.gitConfig.referenceName).to.be("refs/heads/branch_name");
              expect(data.gitConfig.tlsskipVerify).to.be.a('boolean');
              expect(data.gitConfig.tlsskipVerify).to.be(false);
              expect(data.gitConfig.url).to.be.a('string');
              expect(data.gitConfig.url).to.be("https://github.com/portainer/portainer.git");
            expect(data.isComposeFormat).to.be.a('boolean');
            expect(data.isComposeFormat).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("default");
            expect(data.projectPath).to.be.a('string');
            expect(data.projectPath).to.be("/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w");
            expect(data.updateDate).to.be.a('number');
            expect(data.updateDate).to.be(1587399600);
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("bob");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stackStop', function() {
        it('should call stackStop successfully', function(done) {
          // TODO: uncomment, update parameter values for stackStop call and complete the assertions
          /*
          var id = 56;
          var endpointId = 56;

          instance.stackStop(id, endpointId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerStack);
            {
              let dataCtr = data.additionalFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.autoUpdate).to.be.a(PortainerCeApi.PortainerAutoUpdateSettings);
                  expect(data.autoUpdate.forcePullImage).to.be.a('boolean');
              expect(data.autoUpdate.forcePullImage).to.be(false);
              expect(data.autoUpdate.forceUpdate).to.be.a('boolean');
              expect(data.autoUpdate.forceUpdate).to.be(false);
              expect(data.autoUpdate.interval).to.be.a('string');
              expect(data.autoUpdate.interval).to.be("1m30s");
              expect(data.autoUpdate.jobID).to.be.a('string');
              expect(data.autoUpdate.jobID).to.be("15");
              expect(data.autoUpdate.webhook).to.be.a('string');
              expect(data.autoUpdate.webhook).to.be("05de31a2-79fa-4644-9c12-faa67e5c49f0");
            expect(data.endpointId).to.be.a('number');
            expect(data.endpointId).to.be(1);
            expect(data.entryPoint).to.be.a('string');
            expect(data.entryPoint).to.be("docker-compose.yml");
            {
              let dataCtr = data.env;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("myStack");
            expect(data.option).to.be.a(PortainerCeApi.PortainerStackOption);
                  expect(data.option.prune).to.be.a('boolean');
              expect(data.option.prune).to.be(false);
            expect(data.resourceControl).to.be.a(PortainerCeApi.PortainerResourceControl);
                  expect(data.resourceControl.accessLevel).to.be.a('number');
              expect(data.resourceControl.accessLevel).to.be(0);
              expect(data.resourceControl.administratorsOnly).to.be.a('boolean');
              expect(data.resourceControl.administratorsOnly).to.be(true);
              expect(data.resourceControl.id).to.be.a('number');
              expect(data.resourceControl.id).to.be(1);
              expect(data.resourceControl.ownerId).to.be.a('number');
              expect(data.resourceControl.ownerId).to.be(0);
              expect(data.resourceControl._public).to.be.a('boolean');
              expect(data.resourceControl._public).to.be(true);
              expect(data.resourceControl.resourceId).to.be.a('string');
              expect(data.resourceControl.resourceId).to.be("617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08");
              {
                let dataCtr = data.resourceControl.subResourceIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.resourceControl.system).to.be.a('boolean');
              expect(data.resourceControl.system).to.be(false);
              {
                let dataCtr = data.resourceControl.teamAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerTeamResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.teamId).to.be.a('number');
                  expect(data.teamId).to.be(0);
  
                        }
              }
              expect(data.resourceControl.type).to.be.a('number');
              expect(data.resourceControl.type).to.be(1);
              {
                let dataCtr = data.resourceControl.userAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerUserResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
  
                        }
              }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.swarmId).to.be.a('string');
            expect(data.swarmId).to.be("jpofkc0i9uo9wtx1zesuk649w");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(2);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("admin");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1587399600);
            expect(data.fromAppTemplate).to.be.a('boolean');
            expect(data.fromAppTemplate).to.be(false);
            expect(data.gitConfig).to.be.a(PortainerCeApi.GittypesRepoConfig);
                  expect(data.gitConfig.authentication).to.be.a(PortainerCeApi.GittypesGitAuthentication);
                    expect(data.gitConfig.authentication.gitCredentialID).to.be.a('number');
                expect(data.gitConfig.authentication.gitCredentialID).to.be(0);
                expect(data.gitConfig.authentication.password).to.be.a('string');
                expect(data.gitConfig.authentication.password).to.be("");
                expect(data.gitConfig.authentication.username).to.be.a('string');
                expect(data.gitConfig.authentication.username).to.be("");
              expect(data.gitConfig.configFilePath).to.be.a('string');
              expect(data.gitConfig.configFilePath).to.be("docker-compose.yml");
              expect(data.gitConfig.configHash).to.be.a('string');
              expect(data.gitConfig.configHash).to.be("bc4c183d756879ea4d173315338110b31004b8e0");
              expect(data.gitConfig.referenceName).to.be.a('string');
              expect(data.gitConfig.referenceName).to.be("refs/heads/branch_name");
              expect(data.gitConfig.tlsskipVerify).to.be.a('boolean');
              expect(data.gitConfig.tlsskipVerify).to.be(false);
              expect(data.gitConfig.url).to.be.a('string');
              expect(data.gitConfig.url).to.be("https://github.com/portainer/portainer.git");
            expect(data.isComposeFormat).to.be.a('boolean');
            expect(data.isComposeFormat).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("default");
            expect(data.projectPath).to.be.a('string');
            expect(data.projectPath).to.be("/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w");
            expect(data.updateDate).to.be.a('number');
            expect(data.updateDate).to.be(1587399600);
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("bob");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stackUpdate', function() {
        it('should call stackUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for stackUpdate call and complete the assertions
          /*
          var id = 56;
          var endpointId = 56;
          var body = new PortainerCeApi.StacksUpdateSwarmStackPayload();
          body.env = [new PortainerCeApi.PortainerPair()];
          body.env[0].name = "name";
          body.env[0].value = "value";
          body.prune = true;
          body.pullImage = false;
          body.stackFileContent = "version: 3
 services:
 web:
 image:nginx";

          instance.stackUpdate(id, endpointId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerStack);
            {
              let dataCtr = data.additionalFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.autoUpdate).to.be.a(PortainerCeApi.PortainerAutoUpdateSettings);
                  expect(data.autoUpdate.forcePullImage).to.be.a('boolean');
              expect(data.autoUpdate.forcePullImage).to.be(false);
              expect(data.autoUpdate.forceUpdate).to.be.a('boolean');
              expect(data.autoUpdate.forceUpdate).to.be(false);
              expect(data.autoUpdate.interval).to.be.a('string');
              expect(data.autoUpdate.interval).to.be("1m30s");
              expect(data.autoUpdate.jobID).to.be.a('string');
              expect(data.autoUpdate.jobID).to.be("15");
              expect(data.autoUpdate.webhook).to.be.a('string');
              expect(data.autoUpdate.webhook).to.be("05de31a2-79fa-4644-9c12-faa67e5c49f0");
            expect(data.endpointId).to.be.a('number');
            expect(data.endpointId).to.be(1);
            expect(data.entryPoint).to.be.a('string');
            expect(data.entryPoint).to.be("docker-compose.yml");
            {
              let dataCtr = data.env;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("myStack");
            expect(data.option).to.be.a(PortainerCeApi.PortainerStackOption);
                  expect(data.option.prune).to.be.a('boolean');
              expect(data.option.prune).to.be(false);
            expect(data.resourceControl).to.be.a(PortainerCeApi.PortainerResourceControl);
                  expect(data.resourceControl.accessLevel).to.be.a('number');
              expect(data.resourceControl.accessLevel).to.be(0);
              expect(data.resourceControl.administratorsOnly).to.be.a('boolean');
              expect(data.resourceControl.administratorsOnly).to.be(true);
              expect(data.resourceControl.id).to.be.a('number');
              expect(data.resourceControl.id).to.be(1);
              expect(data.resourceControl.ownerId).to.be.a('number');
              expect(data.resourceControl.ownerId).to.be(0);
              expect(data.resourceControl._public).to.be.a('boolean');
              expect(data.resourceControl._public).to.be(true);
              expect(data.resourceControl.resourceId).to.be.a('string');
              expect(data.resourceControl.resourceId).to.be("617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08");
              {
                let dataCtr = data.resourceControl.subResourceIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.resourceControl.system).to.be.a('boolean');
              expect(data.resourceControl.system).to.be(false);
              {
                let dataCtr = data.resourceControl.teamAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerTeamResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.teamId).to.be.a('number');
                  expect(data.teamId).to.be(0);
  
                        }
              }
              expect(data.resourceControl.type).to.be.a('number');
              expect(data.resourceControl.type).to.be(1);
              {
                let dataCtr = data.resourceControl.userAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerUserResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
  
                        }
              }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.swarmId).to.be.a('string');
            expect(data.swarmId).to.be("jpofkc0i9uo9wtx1zesuk649w");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(2);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("admin");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1587399600);
            expect(data.fromAppTemplate).to.be.a('boolean');
            expect(data.fromAppTemplate).to.be(false);
            expect(data.gitConfig).to.be.a(PortainerCeApi.GittypesRepoConfig);
                  expect(data.gitConfig.authentication).to.be.a(PortainerCeApi.GittypesGitAuthentication);
                    expect(data.gitConfig.authentication.gitCredentialID).to.be.a('number');
                expect(data.gitConfig.authentication.gitCredentialID).to.be(0);
                expect(data.gitConfig.authentication.password).to.be.a('string');
                expect(data.gitConfig.authentication.password).to.be("");
                expect(data.gitConfig.authentication.username).to.be.a('string');
                expect(data.gitConfig.authentication.username).to.be("");
              expect(data.gitConfig.configFilePath).to.be.a('string');
              expect(data.gitConfig.configFilePath).to.be("docker-compose.yml");
              expect(data.gitConfig.configHash).to.be.a('string');
              expect(data.gitConfig.configHash).to.be("bc4c183d756879ea4d173315338110b31004b8e0");
              expect(data.gitConfig.referenceName).to.be.a('string');
              expect(data.gitConfig.referenceName).to.be("refs/heads/branch_name");
              expect(data.gitConfig.tlsskipVerify).to.be.a('boolean');
              expect(data.gitConfig.tlsskipVerify).to.be(false);
              expect(data.gitConfig.url).to.be.a('string');
              expect(data.gitConfig.url).to.be("https://github.com/portainer/portainer.git");
            expect(data.isComposeFormat).to.be.a('boolean');
            expect(data.isComposeFormat).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("default");
            expect(data.projectPath).to.be.a('string');
            expect(data.projectPath).to.be("/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w");
            expect(data.updateDate).to.be.a('number');
            expect(data.updateDate).to.be(1587399600);
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("bob");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stackUpdateGit', function() {
        it('should call stackUpdateGit successfully', function(done) {
          // TODO: uncomment, update parameter values for stackUpdateGit call and complete the assertions
          /*
          var id = 56;
          var body = new PortainerCeApi.StacksStackGitUpdatePayload();
          body.autoUpdate = new PortainerCeApi.PortainerAutoUpdateSettings();
          body.autoUpdate.forcePullImage = false;
          body.autoUpdate.forceUpdate = false;
          body.autoUpdate.interval = "1m30s";
          body.autoUpdate.jobID = "15";
          body.autoUpdate.webhook = "05de31a2-79fa-4644-9c12-faa67e5c49f0";
          body.env = [new PortainerCeApi.PortainerPair()];
          body.env[0].name = "name";
          body.env[0].value = "value";
          body.prune = false;
          body.repositoryAuthentication = false;
          body.repositoryPassword = "";
          body.repositoryReferenceName = "";
          body.repositoryUsername = "";
          body.tlsskipVerify = false;
          var opts = {};
          opts.endpointId = 56;

          instance.stackUpdateGit(id, body, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PortainerCeApi.PortainerStack);
            {
              let dataCtr = data.additionalFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.autoUpdate).to.be.a(PortainerCeApi.PortainerAutoUpdateSettings);
                  expect(data.autoUpdate.forcePullImage).to.be.a('boolean');
              expect(data.autoUpdate.forcePullImage).to.be(false);
              expect(data.autoUpdate.forceUpdate).to.be.a('boolean');
              expect(data.autoUpdate.forceUpdate).to.be(false);
              expect(data.autoUpdate.interval).to.be.a('string');
              expect(data.autoUpdate.interval).to.be("1m30s");
              expect(data.autoUpdate.jobID).to.be.a('string');
              expect(data.autoUpdate.jobID).to.be("15");
              expect(data.autoUpdate.webhook).to.be.a('string');
              expect(data.autoUpdate.webhook).to.be("05de31a2-79fa-4644-9c12-faa67e5c49f0");
            expect(data.endpointId).to.be.a('number');
            expect(data.endpointId).to.be(1);
            expect(data.entryPoint).to.be.a('string');
            expect(data.entryPoint).to.be("docker-compose.yml");
            {
              let dataCtr = data.env;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PortainerCeApi.PortainerPair);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("name");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("value");

                      }
            }
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("myStack");
            expect(data.option).to.be.a(PortainerCeApi.PortainerStackOption);
                  expect(data.option.prune).to.be.a('boolean');
              expect(data.option.prune).to.be(false);
            expect(data.resourceControl).to.be.a(PortainerCeApi.PortainerResourceControl);
                  expect(data.resourceControl.accessLevel).to.be.a('number');
              expect(data.resourceControl.accessLevel).to.be(0);
              expect(data.resourceControl.administratorsOnly).to.be.a('boolean');
              expect(data.resourceControl.administratorsOnly).to.be(true);
              expect(data.resourceControl.id).to.be.a('number');
              expect(data.resourceControl.id).to.be(1);
              expect(data.resourceControl.ownerId).to.be.a('number');
              expect(data.resourceControl.ownerId).to.be(0);
              expect(data.resourceControl._public).to.be.a('boolean');
              expect(data.resourceControl._public).to.be(true);
              expect(data.resourceControl.resourceId).to.be.a('string');
              expect(data.resourceControl.resourceId).to.be("617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08");
              {
                let dataCtr = data.resourceControl.subResourceIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.resourceControl.system).to.be.a('boolean');
              expect(data.resourceControl.system).to.be(false);
              {
                let dataCtr = data.resourceControl.teamAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerTeamResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.teamId).to.be.a('number');
                  expect(data.teamId).to.be(0);
  
                        }
              }
              expect(data.resourceControl.type).to.be.a('number');
              expect(data.resourceControl.type).to.be(1);
              {
                let dataCtr = data.resourceControl.userAccesses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PortainerCeApi.PortainerUserResourceAccess);
                  expect(data.accessLevel).to.be.a('number');
                  expect(data.accessLevel).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
  
                        }
              }
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(1);
            expect(data.swarmId).to.be.a('string');
            expect(data.swarmId).to.be("jpofkc0i9uo9wtx1zesuk649w");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(2);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("admin");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1587399600);
            expect(data.fromAppTemplate).to.be.a('boolean');
            expect(data.fromAppTemplate).to.be(false);
            expect(data.gitConfig).to.be.a(PortainerCeApi.GittypesRepoConfig);
                  expect(data.gitConfig.authentication).to.be.a(PortainerCeApi.GittypesGitAuthentication);
                    expect(data.gitConfig.authentication.gitCredentialID).to.be.a('number');
                expect(data.gitConfig.authentication.gitCredentialID).to.be(0);
                expect(data.gitConfig.authentication.password).to.be.a('string');
                expect(data.gitConfig.authentication.password).to.be("");
                expect(data.gitConfig.authentication.username).to.be.a('string');
                expect(data.gitConfig.authentication.username).to.be("");
              expect(data.gitConfig.configFilePath).to.be.a('string');
              expect(data.gitConfig.configFilePath).to.be("docker-compose.yml");
              expect(data.gitConfig.configHash).to.be.a('string');
              expect(data.gitConfig.configHash).to.be("bc4c183d756879ea4d173315338110b31004b8e0");
              expect(data.gitConfig.referenceName).to.be.a('string');
              expect(data.gitConfig.referenceName).to.be("refs/heads/branch_name");
              expect(data.gitConfig.tlsskipVerify).to.be.a('boolean');
              expect(data.gitConfig.tlsskipVerify).to.be(false);
              expect(data.gitConfig.url).to.be.a('string');
              expect(data.gitConfig.url).to.be("https://github.com/portainer/portainer.git");
            expect(data.isComposeFormat).to.be.a('boolean');
            expect(data.isComposeFormat).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("default");
            expect(data.projectPath).to.be.a('string');
            expect(data.projectPath).to.be("/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w");
            expect(data.updateDate).to.be.a('number');
            expect(data.updateDate).to.be(1587399600);
            expect(data.updatedBy).to.be.a('string');
            expect(data.updatedBy).to.be("bob");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webhookInvoke', function() {
        it('should call webhookInvoke successfully', function(done) {
          // TODO: uncomment, update parameter values for webhookInvoke call
          /*
          var webhookID = "webhookID_example";

          instance.webhookInvoke(webhookID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
