/*
 * PortainerCE API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  # Private Registry  Using private registry, you will need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\>}’ inside the Request Header. The parameter name is \"X-Registry-Auth\". \\<registryID value\\> - The registry ID where the repository was created.  Example:  ``` eyJyZWdpc3RyeUlkIjoxfQ== ```  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/). 
 *
 * OpenAPI spec version: 2.21.3
 * Contact: info@portainer.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PortainerStack', 'model/StacksComposeStackFromFileContentPayload', 'model/StacksComposeStackFromGitRepositoryPayload', 'model/StacksKubernetesGitDeploymentPayload', 'model/StacksKubernetesManifestURLDeploymentPayload', 'model/StacksKubernetesStringDeploymentPayload', 'model/StacksStackFileResponse', 'model/StacksStackGitRedployPayload', 'model/StacksStackGitUpdatePayload', 'model/StacksStackMigratePayload', 'model/StacksSwarmStackFromFileContentPayload', 'model/StacksSwarmStackFromGitRepositoryPayload', 'model/StacksUpdateSwarmStackPayload'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PortainerStack'), require('../model/StacksComposeStackFromFileContentPayload'), require('../model/StacksComposeStackFromGitRepositoryPayload'), require('../model/StacksKubernetesGitDeploymentPayload'), require('../model/StacksKubernetesManifestURLDeploymentPayload'), require('../model/StacksKubernetesStringDeploymentPayload'), require('../model/StacksStackFileResponse'), require('../model/StacksStackGitRedployPayload'), require('../model/StacksStackGitUpdatePayload'), require('../model/StacksStackMigratePayload'), require('../model/StacksSwarmStackFromFileContentPayload'), require('../model/StacksSwarmStackFromGitRepositoryPayload'), require('../model/StacksUpdateSwarmStackPayload'));
  } else {
    // Browser globals (root is window)
    if (!root.PortainerCeApi) {
      root.PortainerCeApi = {};
    }
    root.PortainerCeApi.StacksApi = factory(root.PortainerCeApi.ApiClient, root.PortainerCeApi.PortainerStack, root.PortainerCeApi.StacksComposeStackFromFileContentPayload, root.PortainerCeApi.StacksComposeStackFromGitRepositoryPayload, root.PortainerCeApi.StacksKubernetesGitDeploymentPayload, root.PortainerCeApi.StacksKubernetesManifestURLDeploymentPayload, root.PortainerCeApi.StacksKubernetesStringDeploymentPayload, root.PortainerCeApi.StacksStackFileResponse, root.PortainerCeApi.StacksStackGitRedployPayload, root.PortainerCeApi.StacksStackGitUpdatePayload, root.PortainerCeApi.StacksStackMigratePayload, root.PortainerCeApi.StacksSwarmStackFromFileContentPayload, root.PortainerCeApi.StacksSwarmStackFromGitRepositoryPayload, root.PortainerCeApi.StacksUpdateSwarmStackPayload);
  }
}(this, function(ApiClient, PortainerStack, StacksComposeStackFromFileContentPayload, StacksComposeStackFromGitRepositoryPayload, StacksKubernetesGitDeploymentPayload, StacksKubernetesManifestURLDeploymentPayload, StacksKubernetesStringDeploymentPayload, StacksStackFileResponse, StacksStackGitRedployPayload, StacksStackGitUpdatePayload, StacksStackMigratePayload, StacksSwarmStackFromFileContentPayload, StacksSwarmStackFromGitRepositoryPayload, StacksUpdateSwarmStackPayload) {
  'use strict';

  /**
   * Stacks service.
   * @module api/StacksApi
   * @version 2.21.3
   */

  /**
   * Constructs a new StacksApi. 
   * @alias module:api/StacksApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the stackAssociate operation.
     * @callback module:api/StacksApi~stackAssociateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate an orphaned stack to a new environment(endpoint)
     * **Access policy**: administrator
     * @param {Number} id Stack identifier
     * @param {Number} endpointId Environment identifier
     * @param {Number} swarmId Swarm identifier
     * @param {Boolean} orphanedRunning Indicates whether the stack is orphaned
     * @param {module:api/StacksApi~stackAssociateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerStack}
     */
    this.stackAssociate = function(id, endpointId, swarmId, orphanedRunning, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stackAssociate");
      }

      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling stackAssociate");
      }

      // verify the required parameter 'swarmId' is set
      if (swarmId === undefined || swarmId === null) {
        throw new Error("Missing the required parameter 'swarmId' when calling stackAssociate");
      }

      // verify the required parameter 'orphanedRunning' is set
      if (orphanedRunning === undefined || orphanedRunning === null) {
        throw new Error("Missing the required parameter 'orphanedRunning' when calling stackAssociate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'endpointId': endpointId,
        'swarmId': swarmId,
        'orphanedRunning': orphanedRunning,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PortainerStack;

      return this.apiClient.callApi(
        '/stacks/{id}/associate', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackCreate operation.
     * @callback module:api/StacksApi~stackCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy a new stack
     * Deploy a new stack into a Docker environment(endpoint) specified via the environment(endpoint) identifier. **Access policy**: authenticated
     * @param {Number} type Stack deployment type. Possible values: 1 (Swarm stack), 2 (Compose stack) or 3 (Kubernetes stack).
     * @param {module:model/String} method Stack deployment method. Possible values: file, string, repository or url.
     * @param {Number} endpointId Identifier of the environment(endpoint) that will be used to deploy the stack
     * @param {Object} body for body documentation see the relevant /stacks/create/{type}/{method} endpoint
     * @param {module:api/StacksApi~stackCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerStack}
     */
    this.stackCreate = function(type, method, endpointId, body, callback) {
      var postBody = body;

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling stackCreate");
      }

      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling stackCreate");
      }

      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling stackCreate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stackCreate");
      }


      var pathParams = {
      };
      var queryParams = {
        'type': type,
        'method': method,
        'endpointId': endpointId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json', 'multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = PortainerStack;

      return this.apiClient.callApi(
        '/stacks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackCreateDockerStandaloneFile operation.
     * @callback module:api/StacksApi~stackCreateDockerStandaloneFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy a new compose stack from a file
     * Deploy a new stack into a Docker environment specified via the environment identifier. **Access policy**: authenticated
     * @param {String} name Name of the stack
     * @param {Number} endpointId Identifier of the environment that will be used to deploy the stack
     * @param {Object} opts Optional parameters
     * @param {String} opts.env Environment variables passed during deployment, represented as a JSON array [{'name': 'name', 'value': 'value'}].
     * @param {File} opts.file Stack file
     * @param {module:api/StacksApi~stackCreateDockerStandaloneFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerStack}
     */
    this.stackCreateDockerStandaloneFile = function(name, endpointId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling stackCreateDockerStandaloneFile");
      }

      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling stackCreateDockerStandaloneFile");
      }


      var pathParams = {
      };
      var queryParams = {
        'endpointId': endpointId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'Name': name,
        'Env': opts['env'],
        'file': opts['file']
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = PortainerStack;

      return this.apiClient.callApi(
        '/stacks/create/standalone/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackCreateDockerStandaloneRepository operation.
     * @callback module:api/StacksApi~stackCreateDockerStandaloneRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy a new compose stack from repository
     * Deploy a new stack into a Docker environment specified via the environment identifier. **Access policy**: authenticated
     * @param {Number} endpointId Identifier of the environment that will be used to deploy the stack
     * @param {module:model/StacksComposeStackFromGitRepositoryPayload} body stack config
     * @param {module:api/StacksApi~stackCreateDockerStandaloneRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerStack}
     */
    this.stackCreateDockerStandaloneRepository = function(endpointId, body, callback) {
      var postBody = body;

      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling stackCreateDockerStandaloneRepository");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stackCreateDockerStandaloneRepository");
      }


      var pathParams = {
      };
      var queryParams = {
        'endpointId': endpointId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortainerStack;

      return this.apiClient.callApi(
        '/stacks/create/standalone/repository', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackCreateDockerStandaloneString operation.
     * @callback module:api/StacksApi~stackCreateDockerStandaloneStringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy a new compose stack from a text
     * Deploy a new stack into a Docker environment specified via the environment identifier. **Access policy**: authenticated
     * @param {module:model/StacksComposeStackFromFileContentPayload} body stack config
     * @param {Number} endpointId Identifier of the environment that will be used to deploy the stack
     * @param {module:api/StacksApi~stackCreateDockerStandaloneStringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerStack}
     */
    this.stackCreateDockerStandaloneString = function(body, endpointId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stackCreateDockerStandaloneString");
      }

      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling stackCreateDockerStandaloneString");
      }


      var pathParams = {
      };
      var queryParams = {
        'endpointId': endpointId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortainerStack;

      return this.apiClient.callApi(
        '/stacks/create/standalone/string', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackCreateDockerSwarmFile operation.
     * @callback module:api/StacksApi~stackCreateDockerSwarmFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy a new swarm stack from a file
     * Deploy a new stack into a Docker environment specified via the environment identifier. **Access policy**: authenticated
     * @param {Number} endpointId Identifier of the environment that will be used to deploy the stack
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Name of the stack
     * @param {String} opts.swarmID Swarm cluster identifier.
     * @param {String} opts.env Environment variables passed during deployment, represented as a JSON array [{'name': 'name', 'value': 'value'}]. Optional
     * @param {File} opts.file Stack file
     * @param {module:api/StacksApi~stackCreateDockerSwarmFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerStack}
     */
    this.stackCreateDockerSwarmFile = function(endpointId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling stackCreateDockerSwarmFile");
      }


      var pathParams = {
      };
      var queryParams = {
        'endpointId': endpointId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'Name': opts['name'],
        'SwarmID': opts['swarmID'],
        'Env': opts['env'],
        'file': opts['file']
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = PortainerStack;

      return this.apiClient.callApi(
        '/stacks/create/swarm/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackCreateDockerSwarmRepository operation.
     * @callback module:api/StacksApi~stackCreateDockerSwarmRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy a new swarm stack from a git repository
     * Deploy a new stack into a Docker environment specified via the environment identifier. **Access policy**: authenticated
     * @param {Number} endpointId Identifier of the environment that will be used to deploy the stack
     * @param {module:model/StacksSwarmStackFromGitRepositoryPayload} body stack config
     * @param {module:api/StacksApi~stackCreateDockerSwarmRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerStack}
     */
    this.stackCreateDockerSwarmRepository = function(endpointId, body, callback) {
      var postBody = body;

      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling stackCreateDockerSwarmRepository");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stackCreateDockerSwarmRepository");
      }


      var pathParams = {
      };
      var queryParams = {
        'endpointId': endpointId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortainerStack;

      return this.apiClient.callApi(
        '/stacks/create/swarm/repository', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackCreateDockerSwarmString operation.
     * @callback module:api/StacksApi~stackCreateDockerSwarmStringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy a new swarm stack from a text
     * Deploy a new stack into a Docker environment specified via the environment identifier. **Access policy**: authenticated
     * @param {module:model/StacksSwarmStackFromFileContentPayload} body stack config
     * @param {Number} endpointId Identifier of the environment that will be used to deploy the stack
     * @param {module:api/StacksApi~stackCreateDockerSwarmStringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerStack}
     */
    this.stackCreateDockerSwarmString = function(body, endpointId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stackCreateDockerSwarmString");
      }

      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling stackCreateDockerSwarmString");
      }


      var pathParams = {
      };
      var queryParams = {
        'endpointId': endpointId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortainerStack;

      return this.apiClient.callApi(
        '/stacks/create/swarm/string', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackCreateKubernetesFile operation.
     * @callback module:api/StacksApi~stackCreateKubernetesFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy a new kubernetes stack from a file
     * Deploy a new stack into a Docker environment specified via the environment identifier. **Access policy**: authenticated
     * @param {module:model/StacksKubernetesStringDeploymentPayload} body stack config
     * @param {Number} endpointId Identifier of the environment that will be used to deploy the stack
     * @param {module:api/StacksApi~stackCreateKubernetesFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerStack}
     */
    this.stackCreateKubernetesFile = function(body, endpointId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stackCreateKubernetesFile");
      }

      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling stackCreateKubernetesFile");
      }


      var pathParams = {
      };
      var queryParams = {
        'endpointId': endpointId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PortainerStack;

      return this.apiClient.callApi(
        '/stacks/create/kubernetes/string', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackCreateKubernetesGit operation.
     * @callback module:api/StacksApi~stackCreateKubernetesGitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy a new kubernetes stack from a git repository
     * Deploy a new stack into a Docker environment specified via the environment identifier. **Access policy**: authenticated
     * @param {module:model/StacksKubernetesGitDeploymentPayload} body stack config
     * @param {Number} endpointId Identifier of the environment that will be used to deploy the stack
     * @param {module:api/StacksApi~stackCreateKubernetesGitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerStack}
     */
    this.stackCreateKubernetesGit = function(body, endpointId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stackCreateKubernetesGit");
      }

      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling stackCreateKubernetesGit");
      }


      var pathParams = {
      };
      var queryParams = {
        'endpointId': endpointId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PortainerStack;

      return this.apiClient.callApi(
        '/stacks/create/kubernetes/repository', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackCreateKubernetesUrl operation.
     * @callback module:api/StacksApi~stackCreateKubernetesUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy a new kubernetes stack from a url
     * Deploy a new stack into a Docker environment specified via the environment identifier. **Access policy**: authenticated
     * @param {module:model/StacksKubernetesManifestURLDeploymentPayload} body stack config
     * @param {Number} endpointId Identifier of the environment that will be used to deploy the stack
     * @param {module:api/StacksApi~stackCreateKubernetesUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerStack}
     */
    this.stackCreateKubernetesUrl = function(body, endpointId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stackCreateKubernetesUrl");
      }

      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling stackCreateKubernetesUrl");
      }


      var pathParams = {
      };
      var queryParams = {
        'endpointId': endpointId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PortainerStack;

      return this.apiClient.callApi(
        '/stacks/create/kubernetes/url', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackDelete operation.
     * @callback module:api/StacksApi~stackDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a stack
     * Remove a stack. **Access policy**: restricted
     * @param {Number} id Stack identifier
     * @param {Number} endpointId Environment identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.external Set to true to delete an external stack. Only external Swarm stacks are supported
     * @param {module:api/StacksApi~stackDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.stackDelete = function(id, endpointId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stackDelete");
      }

      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling stackDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'external': opts['external'],
        'endpointId': endpointId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/stacks/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackDeleteKubernetesByName operation.
     * @callback module:api/StacksApi~stackDeleteKubernetesByNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Kubernetes stacks by name
     * Remove a stack. **Access policy**: restricted
     * @param {String} name Stack name
     * @param {Number} endpointId Environment identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.external Set to true to delete an external stack. Only external Swarm stacks are supported
     * @param {module:api/StacksApi~stackDeleteKubernetesByNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.stackDeleteKubernetesByName = function(name, endpointId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling stackDeleteKubernetesByName");
      }

      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling stackDeleteKubernetesByName");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'external': opts['external'],
        'endpointId': endpointId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/stacks/name/{name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackFileInspect operation.
     * @callback module:api/StacksApi~stackFileInspectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StacksStackFileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the content of the Stack file for the specified stack
     * Get Stack file content. **Access policy**: restricted
     * @param {Number} id Stack identifier
     * @param {module:api/StacksApi~stackFileInspectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StacksStackFileResponse}
     */
    this.stackFileInspect = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stackFileInspect");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StacksStackFileResponse;

      return this.apiClient.callApi(
        '/stacks/{id}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackGitRedeploy operation.
     * @callback module:api/StacksApi~stackGitRedeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redeploy a stack
     * Pull and redeploy a stack via Git **Access policy**: authenticated
     * @param {Number} id Stack identifier
     * @param {module:model/StacksStackGitRedployPayload} body Git configs for pull and redeploy of a stack. **StackName** may only be populated for Kuberenetes stacks, and if specified with a blank string, it will be set to blank
     * @param {Object} opts Optional parameters
     * @param {Number} opts.endpointId Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.
     * @param {module:api/StacksApi~stackGitRedeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerStack}
     */
    this.stackGitRedeploy = function(id, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stackGitRedeploy");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stackGitRedeploy");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'endpointId': opts['endpointId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortainerStack;

      return this.apiClient.callApi(
        '/stacks/{id}/git/redeploy', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackInspect operation.
     * @callback module:api/StacksApi~stackInspectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inspect a stack
     * Retrieve details about a stack. **Access policy**: restricted
     * @param {Number} id Stack identifier
     * @param {module:api/StacksApi~stackInspectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerStack}
     */
    this.stackInspect = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stackInspect");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PortainerStack;

      return this.apiClient.callApi(
        '/stacks/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackList operation.
     * @callback module:api/StacksApi~stackListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PortainerStack>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List stacks
     * List all stacks based on the current user authorizations. Will return all stacks if using an administrator account otherwise it will only return the list of stacks the user have access to. Limited stacks will not be returned by this endpoint. **Access policy**: authenticated
     * @param {Object} opts Optional parameters
     * @param {String} opts.filters Filters to process on the stack list. Encoded as JSON (a map[string]string). For example, {'SwarmID': 'jpofkc0i9uo9wtx1zesuk649w'} will only return stacks that are part of the specified Swarm cluster. Available filters: EndpointID, SwarmID.
     * @param {module:api/StacksApi~stackListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PortainerStack>}
     */
    this.stackList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [PortainerStack];

      return this.apiClient.callApi(
        '/stacks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackMigrate operation.
     * @callback module:api/StacksApi~stackMigrateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Migrate a stack to another environment(endpoint)
     * Migrate a stack from an environment(endpoint) to another environment(endpoint). It will re-create the stack inside the target environment(endpoint) before removing the original stack. **Access policy**: authenticated
     * @param {Number} id Stack identifier
     * @param {module:model/StacksStackMigratePayload} body Stack migration details
     * @param {Object} opts Optional parameters
     * @param {Number} opts.endpointId Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.
     * @param {module:api/StacksApi~stackMigrateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerStack}
     */
    this.stackMigrate = function(id, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stackMigrate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stackMigrate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'endpointId': opts['endpointId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PortainerStack;

      return this.apiClient.callApi(
        '/stacks/{id}/migrate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackStart operation.
     * @callback module:api/StacksApi~stackStartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a stopped Stack
     * Starts a stopped Stack. **Access policy**: authenticated
     * @param {Number} id Stack identifier
     * @param {Number} endpointId Environment identifier
     * @param {module:api/StacksApi~stackStartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerStack}
     */
    this.stackStart = function(id, endpointId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stackStart");
      }

      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling stackStart");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'endpointId': endpointId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = [];
      var returnType = PortainerStack;

      return this.apiClient.callApi(
        '/stacks/{id}/start', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackStop operation.
     * @callback module:api/StacksApi~stackStopCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops a stopped Stack
     * Stops a stopped Stack. **Access policy**: authenticated
     * @param {Number} id Stack identifier
     * @param {Number} endpointId Environment identifier
     * @param {module:api/StacksApi~stackStopCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerStack}
     */
    this.stackStop = function(id, endpointId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stackStop");
      }

      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling stackStop");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'endpointId': endpointId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = [];
      var returnType = PortainerStack;

      return this.apiClient.callApi(
        '/stacks/{id}/stop', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackUpdate operation.
     * @callback module:api/StacksApi~stackUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a stack
     * Update a stack, only for file based stacks. **Access policy**: authenticated
     * @param {Number} id Stack identifier
     * @param {Number} endpointId Environment identifier
     * @param {module:model/StacksUpdateSwarmStackPayload} body Stack details
     * @param {module:api/StacksApi~stackUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerStack}
     */
    this.stackUpdate = function(id, endpointId, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stackUpdate");
      }

      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling stackUpdate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stackUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'endpointId': endpointId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortainerStack;

      return this.apiClient.callApi(
        '/stacks/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackUpdateGit operation.
     * @callback module:api/StacksApi~stackUpdateGitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a stack's Git configs
     * Update the Git settings in a stack, e.g., RepositoryReferenceName and AutoUpdate **Access policy**: authenticated
     * @param {Number} id Stack identifier
     * @param {module:model/StacksStackGitUpdatePayload} body Git configs for pull and redeploy a stack
     * @param {Object} opts Optional parameters
     * @param {Number} opts.endpointId Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.
     * @param {module:api/StacksApi~stackUpdateGitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerStack}
     */
    this.stackUpdateGit = function(id, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stackUpdateGit");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stackUpdateGit");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'endpointId': opts['endpointId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortainerStack;

      return this.apiClient.callApi(
        '/stacks/{id}/git', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webhookInvoke operation.
     * @callback module:api/StacksApi~webhookInvokeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Webhook for triggering stack updates from git
     * **Access policy**: public
     * @param {String} webhookID Stack identifier
     * @param {module:api/StacksApi~webhookInvokeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webhookInvoke = function(webhookID, callback) {
      var postBody = null;

      // verify the required parameter 'webhookID' is set
      if (webhookID === undefined || webhookID === null) {
        throw new Error("Missing the required parameter 'webhookID' when calling webhookInvoke");
      }


      var pathParams = {
        'webhookID': webhookID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/stacks/webhooks/{webhookID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
