/*
 * PortainerCE API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  # Private Registry  Using private registry, you will need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\>}’ inside the Request Header. The parameter name is \"X-Registry-Auth\". \\<registryID value\\> - The registry ID where the repository was created.  Example:  ``` eyJyZWdpc3RyeUlkIjoxfQ== ```  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/). 
 *
 * OpenAPI spec version: 2.21.3
 * Contact: info@portainer.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/KubernetesK8sIngressController', 'model/KubernetesK8sIngressDeleteRequests', 'model/KubernetesK8sIngressInfo', 'model/KubernetesK8sNamespaceDetails', 'model/KubernetesK8sServiceDeleteRequests', 'model/KubernetesK8sServiceInfo', 'model/KubernetesNamespacesToggleSystemPayload', 'model/PortainerK8sNamespaceInfo', 'model/PortainerK8sNodesLimits', 'model/V1beta1NodeMetrics', 'model/V1beta1NodeMetricsList', 'model/V1beta1PodMetrics', 'model/V1beta1PodMetricsList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/KubernetesK8sIngressController'), require('../model/KubernetesK8sIngressDeleteRequests'), require('../model/KubernetesK8sIngressInfo'), require('../model/KubernetesK8sNamespaceDetails'), require('../model/KubernetesK8sServiceDeleteRequests'), require('../model/KubernetesK8sServiceInfo'), require('../model/KubernetesNamespacesToggleSystemPayload'), require('../model/PortainerK8sNamespaceInfo'), require('../model/PortainerK8sNodesLimits'), require('../model/V1beta1NodeMetrics'), require('../model/V1beta1NodeMetricsList'), require('../model/V1beta1PodMetrics'), require('../model/V1beta1PodMetricsList'));
  } else {
    // Browser globals (root is window)
    if (!root.PortainerCeApi) {
      root.PortainerCeApi = {};
    }
    root.PortainerCeApi.KubernetesApi = factory(root.PortainerCeApi.ApiClient, root.PortainerCeApi.KubernetesK8sIngressController, root.PortainerCeApi.KubernetesK8sIngressDeleteRequests, root.PortainerCeApi.KubernetesK8sIngressInfo, root.PortainerCeApi.KubernetesK8sNamespaceDetails, root.PortainerCeApi.KubernetesK8sServiceDeleteRequests, root.PortainerCeApi.KubernetesK8sServiceInfo, root.PortainerCeApi.KubernetesNamespacesToggleSystemPayload, root.PortainerCeApi.PortainerK8sNamespaceInfo, root.PortainerCeApi.PortainerK8sNodesLimits, root.PortainerCeApi.V1beta1NodeMetrics, root.PortainerCeApi.V1beta1NodeMetricsList, root.PortainerCeApi.V1beta1PodMetrics, root.PortainerCeApi.V1beta1PodMetricsList);
  }
}(this, function(ApiClient, KubernetesK8sIngressController, KubernetesK8sIngressDeleteRequests, KubernetesK8sIngressInfo, KubernetesK8sNamespaceDetails, KubernetesK8sServiceDeleteRequests, KubernetesK8sServiceInfo, KubernetesNamespacesToggleSystemPayload, PortainerK8sNamespaceInfo, PortainerK8sNodesLimits, V1beta1NodeMetrics, V1beta1NodeMetricsList, V1beta1PodMetrics, V1beta1PodMetricsList) {
  'use strict';

  /**
   * Kubernetes service.
   * @module api/KubernetesApi
   * @version 2.21.3
   */

  /**
   * Constructs a new KubernetesApi. 
   * @alias module:api/KubernetesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createKubernetesIngress operation.
     * @callback module:api/KubernetesApi~createKubernetesIngressCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a kubernetes ingress by namespace
     * Create a kubernetes ingress by namespace for the provided environment **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {String} namespace Namespace name
     * @param {module:model/KubernetesK8sIngressInfo} body Ingress details
     * @param {module:api/KubernetesApi~createKubernetesIngressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.createKubernetesIngress = function(id, namespace, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createKubernetesIngress");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createKubernetesIngress");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createKubernetesIngress");
      }


      var pathParams = {
        'id': id,
        'namespace': namespace
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/kubernetes/{id}/namespaces/{namespace}/ingresses', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createKubernetesNamespace operation.
     * @callback module:api/KubernetesApi~createKubernetesNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a kubernetes namespace
     * Create a kubernetes namespace within the given environment **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {module:model/KubernetesK8sNamespaceDetails} body Namespace configuration details
     * @param {module:api/KubernetesApi~createKubernetesNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.createKubernetesNamespace = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createKubernetesNamespace");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createKubernetesNamespace");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/kubernetes/{id}/namespaces', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createKubernetesService operation.
     * @callback module:api/KubernetesApi~createKubernetesServiceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a kubernetes service
     * Create a kubernetes service within a given namespace **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {String} namespace Namespace name
     * @param {module:model/KubernetesK8sServiceInfo} body Service definition
     * @param {module:api/KubernetesApi~createKubernetesServiceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createKubernetesService = function(id, namespace, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createKubernetesService");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createKubernetesService");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createKubernetesService");
      }


      var pathParams = {
        'id': id,
        'namespace': namespace
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/kubernetes/{id}/namespaces/{namespace}/services', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteKubernetesIngresses operation.
     * @callback module:api/KubernetesApi~deleteKubernetesIngressesCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete kubernetes ingresses
     * Delete kubernetes ingresses for the provided environment **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {module:model/KubernetesK8sIngressDeleteRequests} body Ingress details
     * @param {module:api/KubernetesApi~deleteKubernetesIngressesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteKubernetesIngresses = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteKubernetesIngresses");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteKubernetesIngresses");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/kubernetes/{id}/ingresses/delete', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteKubernetesNamespace operation.
     * @callback module:api/KubernetesApi~deleteKubernetesNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete kubernetes namespace
     * Delete a kubernetes namespace within the given environment **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {String} namespace Namespace
     * @param {module:api/KubernetesApi~deleteKubernetesNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteKubernetesNamespace = function(id, namespace, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteKubernetesNamespace");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteKubernetesNamespace");
      }


      var pathParams = {
        'id': id,
        'namespace': namespace
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/kubernetes/{id}/namespaces/{namespace}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteKubernetesServices operation.
     * @callback module:api/KubernetesApi~deleteKubernetesServicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete kubernetes services
     * Delete the provided list of kubernetes services **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {module:model/KubernetesK8sServiceDeleteRequests} body A map where the key is the namespace and the value is an array of services to delete
     * @param {module:api/KubernetesApi~deleteKubernetesServicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteKubernetesServices = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteKubernetesServices");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteKubernetesServices");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/kubernetes/{id}/services/delete', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getKubernetesConfig operation.
     * @callback module:api/KubernetesApi~getKubernetesConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a kubeconfig file enabling client communication with k8s api server
     * Generate a kubeconfig file enabling client communication with k8s api server **Access policy**: authenticated
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.ids will include only these environments(endpoints)
     * @param {Array.<Number>} opts.excludeIds will exclude these environments(endpoints)
     * @param {module:api/KubernetesApi~getKubernetesConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getKubernetesConfig = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'ids': {
          value: opts['ids'],
          collectionFormat: 'multi'
        },
        'excludeIds': {
          value: opts['excludeIds'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/kubernetes/config', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getKubernetesConfigMapsAndSecrets operation.
     * @callback module:api/KubernetesApi~getKubernetesConfigMapsAndSecretsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<[KubernetesK8sConfigMapOrSecret]>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get ConfigMaps and Secrets
     * Get all ConfigMaps and Secrets for a given namespace **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {String} namespace Namespace name
     * @param {module:api/KubernetesApi~getKubernetesConfigMapsAndSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<[KubernetesK8sConfigMapOrSecret]>}
     */
    this.getKubernetesConfigMapsAndSecrets = function(id, namespace, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getKubernetesConfigMapsAndSecrets");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getKubernetesConfigMapsAndSecrets");
      }


      var pathParams = {
        'id': id,
        'namespace': namespace
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [[KubernetesK8sConfigMapOrSecret]];

      return this.apiClient.callApi(
        '/kubernetes/{id}/namespaces/{namespace}/configuration', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getKubernetesIngressControllers operation.
     * @callback module:api/KubernetesApi~getKubernetesIngressControllersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/KubernetesK8sIngressController>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of ingress controllers
     * Get a list of ingress controllers for the given environment **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.allowedOnly Only return allowed ingress controllers
     * @param {module:api/KubernetesApi~getKubernetesIngressControllersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/KubernetesK8sIngressController>}
     */
    this.getKubernetesIngressControllers = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getKubernetesIngressControllers");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'allowedOnly': opts['allowedOnly'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [KubernetesK8sIngressController];

      return this.apiClient.callApi(
        '/kubernetes/{id}/ingresscontrollers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getKubernetesIngressControllersByNamespace operation.
     * @callback module:api/KubernetesApi~getKubernetesIngressControllersByNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/KubernetesK8sIngressController>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list ingress controllers by namespace
     * Get a list of ingress controllers for the given environment in the provided namespace **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {String} namespace Namespace
     * @param {module:api/KubernetesApi~getKubernetesIngressControllersByNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/KubernetesK8sIngressController>}
     */
    this.getKubernetesIngressControllersByNamespace = function(id, namespace, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getKubernetesIngressControllersByNamespace");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getKubernetesIngressControllersByNamespace");
      }


      var pathParams = {
        'id': id,
        'namespace': namespace
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [KubernetesK8sIngressController];

      return this.apiClient.callApi(
        '/kubernetes/{id}/namespaces/{namespace}/ingresscontrollers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getKubernetesIngresses operation.
     * @callback module:api/KubernetesApi~getKubernetesIngressesCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get kubernetes ingresses by namespace
     * Get kubernetes ingresses by namespace for the provided environment **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {String} namespace Namespace name
     * @param {Array.<module:model/KubernetesK8sIngressInfo>} body Ingress details
     * @param {module:api/KubernetesApi~getKubernetesIngressesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getKubernetesIngresses = function(id, namespace, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getKubernetesIngresses");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getKubernetesIngresses");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getKubernetesIngresses");
      }


      var pathParams = {
        'id': id,
        'namespace': namespace
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/kubernetes/{id}/namespaces/{namespace}/ingresses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getKubernetesMetricsForAllNodes operation.
     * @callback module:api/KubernetesApi~getKubernetesMetricsForAllNodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1NodeMetricsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of nodes with their live metrics
     * Get a list of nodes with their live metrics **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {module:api/KubernetesApi~getKubernetesMetricsForAllNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1NodeMetricsList}
     */
    this.getKubernetesMetricsForAllNodes = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getKubernetesMetricsForAllNodes");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1beta1NodeMetricsList;

      return this.apiClient.callApi(
        '/kubernetes/{id}/metrics/nodes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getKubernetesMetricsForAllPods operation.
     * @callback module:api/KubernetesApi~getKubernetesMetricsForAllPodsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1PodMetricsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of pods with their live metrics
     * Get a list of pods with their live metrics **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {String} namespace Namespace
     * @param {module:api/KubernetesApi~getKubernetesMetricsForAllPodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1PodMetricsList}
     */
    this.getKubernetesMetricsForAllPods = function(id, namespace, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getKubernetesMetricsForAllPods");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getKubernetesMetricsForAllPods");
      }


      var pathParams = {
        'id': id,
        'namespace': namespace
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1beta1PodMetricsList;

      return this.apiClient.callApi(
        '/kubernetes/{id}/metrics/pods/{namespace}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getKubernetesMetricsForNode operation.
     * @callback module:api/KubernetesApi~getKubernetesMetricsForNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1NodeMetrics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get live metrics for a node
     * Get live metrics for a node **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {String} name Node identifier
     * @param {module:api/KubernetesApi~getKubernetesMetricsForNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1NodeMetrics}
     */
    this.getKubernetesMetricsForNode = function(id, name, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getKubernetesMetricsForNode");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getKubernetesMetricsForNode");
      }


      var pathParams = {
        'id': id,
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1beta1NodeMetrics;

      return this.apiClient.callApi(
        '/kubernetes/{id}/metrics/nodes/{name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getKubernetesMetricsForPod operation.
     * @callback module:api/KubernetesApi~getKubernetesMetricsForPodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1beta1PodMetrics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get live metrics for a pod
     * Get live metrics for a pod **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {String} namespace Namespace
     * @param {String} name Pod identifier
     * @param {module:api/KubernetesApi~getKubernetesMetricsForPodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1beta1PodMetrics}
     */
    this.getKubernetesMetricsForPod = function(id, namespace, name, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getKubernetesMetricsForPod");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getKubernetesMetricsForPod");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getKubernetesMetricsForPod");
      }


      var pathParams = {
        'id': id,
        'namespace': namespace,
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1beta1PodMetrics;

      return this.apiClient.callApi(
        '/kubernetes/{id}/metrics/pods/{namespace}/{name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getKubernetesNamespace operation.
     * @callback module:api/KubernetesApi~getKubernetesNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerK8sNamespaceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get kubernetes namespace details
     * Get kubernetes namespace details for the provided namespace within the given environment **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {String} namespace Namespace
     * @param {module:api/KubernetesApi~getKubernetesNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerK8sNamespaceInfo}
     */
    this.getKubernetesNamespace = function(id, namespace, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getKubernetesNamespace");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getKubernetesNamespace");
      }


      var pathParams = {
        'id': id,
        'namespace': namespace
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortainerK8sNamespaceInfo;

      return this.apiClient.callApi(
        '/kubernetes/{id}/namespaces/{namespace}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getKubernetesNamespaces operation.
     * @callback module:api/KubernetesApi~getKubernetesNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{'String': PortainerK8sNamespaceInfo}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of kubernetes namespaces
     * Get a list of all kubernetes namespaces in the cluster **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {module:api/KubernetesApi~getKubernetesNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{'String': PortainerK8sNamespaceInfo}>}
     */
    this.getKubernetesNamespaces = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getKubernetesNamespaces");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': PortainerK8sNamespaceInfo};

      return this.apiClient.callApi(
        '/kubernetes/{id}/namespaces', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getKubernetesNodesLimits operation.
     * @callback module:api/KubernetesApi~getKubernetesNodesLimitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerK8sNodesLimits} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CPU and memory limits of all nodes within k8s cluster
     * Get CPU and memory limits of all nodes within k8s cluster **Access policy**: authenticated
     * @param {Number} id Environment(Endpoint) identifier
     * @param {module:api/KubernetesApi~getKubernetesNodesLimitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerK8sNodesLimits}
     */
    this.getKubernetesNodesLimits = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getKubernetesNodesLimits");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortainerK8sNodesLimits;

      return this.apiClient.callApi(
        '/kubernetes/{id}/nodes_limits', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getKubernetesServices operation.
     * @callback module:api/KubernetesApi~getKubernetesServicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/KubernetesK8sServiceInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of kubernetes services for a given namespace
     * Get a list of kubernetes services for a given namespace **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {String} namespace Namespace name
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.lookupapplications Lookup applications associated with each service
     * @param {module:api/KubernetesApi~getKubernetesServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/KubernetesK8sServiceInfo>}
     */
    this.getKubernetesServices = function(id, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getKubernetesServices");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getKubernetesServices");
      }


      var pathParams = {
        'id': id,
        'namespace': namespace
      };
      var queryParams = {
        'lookupapplications': opts['lookupapplications'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [KubernetesK8sServiceInfo];

      return this.apiClient.callApi(
        '/kubernetes/{id}/namespaces/{namespace}/services', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the kubernetesNamespacesToggleSystem operation.
     * @callback module:api/KubernetesApi~kubernetesNamespacesToggleSystemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Toggle the system state for a namespace
     * Toggle the system state for a namespace **Access policy**: administrator or environment(endpoint) admin
     * @param {Number} id Environment(Endpoint) identifier
     * @param {String} namespace Namespace name
     * @param {module:model/KubernetesNamespacesToggleSystemPayload} body Update details
     * @param {module:api/KubernetesApi~kubernetesNamespacesToggleSystemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.kubernetesNamespacesToggleSystem = function(id, namespace, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling kubernetesNamespacesToggleSystem");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling kubernetesNamespacesToggleSystem");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling kubernetesNamespacesToggleSystem");
      }


      var pathParams = {
        'id': id,
        'namespace': namespace
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/kubernetes/{id}/namespaces/{namespace}/system', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateKubernetesIngress operation.
     * @callback module:api/KubernetesApi~updateKubernetesIngressCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update kubernetes ingress rule
     * Update kubernetes ingress rule for the provided environment **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {String} namespace Namespace name
     * @param {module:model/KubernetesK8sIngressInfo} body Ingress details
     * @param {module:api/KubernetesApi~updateKubernetesIngressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.updateKubernetesIngress = function(id, namespace, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateKubernetesIngress");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling updateKubernetesIngress");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateKubernetesIngress");
      }


      var pathParams = {
        'id': id,
        'namespace': namespace
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/kubernetes/{id}/namespaces/{namespace}/ingresses', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateKubernetesIngressControllers operation.
     * @callback module:api/KubernetesApi~updateKubernetesIngressControllersCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (block/unblock) ingress controllers
     * Update (block/unblock) ingress controllers **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {Array.<module:model/[KubernetesK8sIngressController]>} body Ingress controllers
     * @param {module:api/KubernetesApi~updateKubernetesIngressControllersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.updateKubernetesIngressControllers = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateKubernetesIngressControllers");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateKubernetesIngressControllers");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/kubernetes/{id}/ingresscontrollers', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateKubernetesIngressControllersByNamespace operation.
     * @callback module:api/KubernetesApi~updateKubernetesIngressControllersByNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (block/unblock) ingress controllers by namespace
     * Update (block/unblock) ingress controllers by namespace for the provided environment **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {String} namespace Namespace name
     * @param {Array.<module:model/[KubernetesK8sIngressController]>} body Ingress controllers
     * @param {module:api/KubernetesApi~updateKubernetesIngressControllersByNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.updateKubernetesIngressControllersByNamespace = function(id, namespace, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateKubernetesIngressControllersByNamespace");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling updateKubernetesIngressControllersByNamespace");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateKubernetesIngressControllersByNamespace");
      }


      var pathParams = {
        'id': id,
        'namespace': namespace
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/kubernetes/{id}/namespaces/{namespace}/ingresscontrollers', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateKubernetesNamespace operation.
     * @callback module:api/KubernetesApi~updateKubernetesNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a kubernetes namespace
     * Update a kubernetes namespace within the given environment **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {String} namespace Namespace
     * @param {module:model/KubernetesK8sNamespaceDetails} body Namespace details
     * @param {module:api/KubernetesApi~updateKubernetesNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.updateKubernetesNamespace = function(id, namespace, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateKubernetesNamespace");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling updateKubernetesNamespace");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateKubernetesNamespace");
      }


      var pathParams = {
        'id': id,
        'namespace': namespace
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/kubernetes/{id}/namespaces/{namespace}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateKubernetesService operation.
     * @callback module:api/KubernetesApi~updateKubernetesServiceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a kubernetes service
     * Update a kubernetes service within a given namespace **Access policy**: authenticated
     * @param {Number} id Environment (Endpoint) identifier
     * @param {String} namespace Namespace name
     * @param {module:model/KubernetesK8sServiceInfo} body Service definition
     * @param {module:api/KubernetesApi~updateKubernetesServiceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateKubernetesService = function(id, namespace, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateKubernetesService");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling updateKubernetesService");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateKubernetesService");
      }


      var pathParams = {
        'id': id,
        'namespace': namespace
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/kubernetes/{id}/namespaces/{namespace}/services', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
