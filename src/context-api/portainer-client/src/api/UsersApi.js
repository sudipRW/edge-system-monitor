/*
 * PortainerCE API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  # Private Registry  Using private registry, you will need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\>}’ inside the Request Header. The parameter name is \"X-Registry-Auth\". \\<registryID value\\> - The registry ID where the repository was created.  Example:  ``` eyJyZWdpc3RyeUlkIjoxfQ== ```  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/). 
 *
 * OpenAPI spec version: 2.21.3
 * Contact: info@portainer.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PortainerAPIKey', 'model/PortainerTeamMembership', 'model/PortainerUser', 'model/UsersAccessTokenResponse', 'model/UsersAdminInitPayload', 'model/UsersUserAccessTokenCreatePayload', 'model/UsersUserCreatePayload', 'model/UsersUserUpdatePasswordPayload', 'model/UsersUserUpdatePayload'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PortainerAPIKey'), require('../model/PortainerTeamMembership'), require('../model/PortainerUser'), require('../model/UsersAccessTokenResponse'), require('../model/UsersAdminInitPayload'), require('../model/UsersUserAccessTokenCreatePayload'), require('../model/UsersUserCreatePayload'), require('../model/UsersUserUpdatePasswordPayload'), require('../model/UsersUserUpdatePayload'));
  } else {
    // Browser globals (root is window)
    if (!root.PortainerCeApi) {
      root.PortainerCeApi = {};
    }
    root.PortainerCeApi.UsersApi = factory(root.PortainerCeApi.ApiClient, root.PortainerCeApi.PortainerAPIKey, root.PortainerCeApi.PortainerTeamMembership, root.PortainerCeApi.PortainerUser, root.PortainerCeApi.UsersAccessTokenResponse, root.PortainerCeApi.UsersAdminInitPayload, root.PortainerCeApi.UsersUserAccessTokenCreatePayload, root.PortainerCeApi.UsersUserCreatePayload, root.PortainerCeApi.UsersUserUpdatePasswordPayload, root.PortainerCeApi.UsersUserUpdatePayload);
  }
}(this, function(ApiClient, PortainerAPIKey, PortainerTeamMembership, PortainerUser, UsersAccessTokenResponse, UsersAdminInitPayload, UsersUserAccessTokenCreatePayload, UsersUserCreatePayload, UsersUserUpdatePasswordPayload, UsersUserUpdatePayload) {
  'use strict';

  /**
   * Users service.
   * @module api/UsersApi
   * @version 2.21.3
   */

  /**
   * Constructs a new UsersApi. 
   * @alias module:api/UsersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the currentUserInspect operation.
     * @callback module:api/UsersApi~currentUserInspectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inspect the current user user
     * Retrieve details about the current  user. User passwords are filtered out, and should never be accessible. **Access policy**: authenticated
     * @param {module:api/UsersApi~currentUserInspectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerUser}
     */
    this.currentUserInspect = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PortainerUser;

      return this.apiClient.callApi(
        '/users/me', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userAdminCheck operation.
     * @callback module:api/UsersApi~userAdminCheckCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check administrator account existence
     * Check if an administrator account exists in the database. **Access policy**: public
     * @param {module:api/UsersApi~userAdminCheckCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.userAdminCheck = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/admin/check', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userAdminInit operation.
     * @callback module:api/UsersApi~userAdminInitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initialize administrator account
     * Initialize the 'admin' user account. **Access policy**: public
     * @param {module:model/UsersAdminInitPayload} body User details
     * @param {module:api/UsersApi~userAdminInitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerUser}
     */
    this.userAdminInit = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling userAdminInit");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortainerUser;

      return this.apiClient.callApi(
        '/users/admin/init', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userCreate operation.
     * @callback module:api/UsersApi~userCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new user
     * Create a new Portainer user. Only administrators can create users. **Access policy**: restricted
     * @param {module:model/UsersUserCreatePayload} body User details
     * @param {module:api/UsersApi~userCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerUser}
     */
    this.userCreate = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling userCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortainerUser;

      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userDelete operation.
     * @callback module:api/UsersApi~userDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a user
     * Remove a user. **Access policy**: administrator
     * @param {Number} id User identifier
     * @param {module:api/UsersApi~userDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.userDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userGenerateAPIKey operation.
     * @callback module:api/UsersApi~userGenerateAPIKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersAccessTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate an API key for a user
     * Generates an API key for a user. Only the calling user can generate a token for themselves. Password is required only for internal authentication. **Access policy**: restricted
     * @param {Number} id User identifier
     * @param {module:model/UsersUserAccessTokenCreatePayload} body details
     * @param {module:api/UsersApi~userGenerateAPIKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersAccessTokenResponse}
     */
    this.userGenerateAPIKey = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userGenerateAPIKey");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling userGenerateAPIKey");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersAccessTokenResponse;

      return this.apiClient.callApi(
        '/users/{id}/tokens', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userGetAPIKeys operation.
     * @callback module:api/UsersApi~userGetAPIKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PortainerAPIKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all API keys for a user
     * Gets all API keys for a user. Only the calling user or admin can retrieve api-keys. **Access policy**: authenticated
     * @param {Number} id User identifier
     * @param {module:api/UsersApi~userGetAPIKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PortainerAPIKey>}
     */
    this.userGetAPIKeys = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userGetAPIKeys");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [PortainerAPIKey];

      return this.apiClient.callApi(
        '/users/{id}/tokens', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userInspect operation.
     * @callback module:api/UsersApi~userInspectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inspect a user
     * Retrieve details about a user. User passwords are filtered out, and should never be accessible. **Access policy**: authenticated
     * @param {Number} id User identifier
     * @param {module:api/UsersApi~userInspectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerUser}
     */
    this.userInspect = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userInspect");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PortainerUser;

      return this.apiClient.callApi(
        '/users/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userList operation.
     * @callback module:api/UsersApi~userListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PortainerUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users
     * List Portainer users. Non-administrator users will only be able to list other non-administrator user accounts. User passwords are filtered out, and should never be accessible. **Access policy**: restricted
     * @param {Object} opts Optional parameters
     * @param {Number} opts.environmentId Identifier of the environment(endpoint) that will be used to filter the authorized users
     * @param {module:api/UsersApi~userListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PortainerUser>}
     */
    this.userList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'environmentId': opts['environmentId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [PortainerUser];

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userMembershipsInspect operation.
     * @callback module:api/UsersApi~userMembershipsInspectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerTeamMembership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inspect a user memberships
     * Inspect a user memberships. **Access policy**: restricted
     * @param {Number} id User identifier
     * @param {module:api/UsersApi~userMembershipsInspectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerTeamMembership}
     */
    this.userMembershipsInspect = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userMembershipsInspect");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PortainerTeamMembership;

      return this.apiClient.callApi(
        '/users/{id}/memberships', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userRemoveAPIKey operation.
     * @callback module:api/UsersApi~userRemoveAPIKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an api-key associated to a user
     * Remove an api-key associated to a user.. Only the calling user or admin can remove api-key. **Access policy**: authenticated
     * @param {Number} id User identifier
     * @param {Number} keyID Api Key identifier
     * @param {module:api/UsersApi~userRemoveAPIKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.userRemoveAPIKey = function(id, keyID, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userRemoveAPIKey");
      }

      // verify the required parameter 'keyID' is set
      if (keyID === undefined || keyID === null) {
        throw new Error("Missing the required parameter 'keyID' when calling userRemoveAPIKey");
      }


      var pathParams = {
        'id': id,
        'keyID': keyID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{id}/tokens/{keyID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUpdate operation.
     * @callback module:api/UsersApi~userUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user
     * Update user details. A regular user account can only update his details. A regular user account cannot change their username or role. **Access policy**: authenticated
     * @param {Number} id User identifier
     * @param {module:model/UsersUserUpdatePayload} body User details
     * @param {module:api/UsersApi~userUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerUser}
     */
    this.userUpdate = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userUpdate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling userUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortainerUser;

      return this.apiClient.callApi(
        '/users/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUpdatePassword operation.
     * @callback module:api/UsersApi~userUpdatePasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update password for a user
     * Update password for the specified user. **Access policy**: authenticated
     * @param {Number} id identifier
     * @param {module:model/UsersUserUpdatePasswordPayload} body details
     * @param {module:api/UsersApi~userUpdatePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.userUpdatePassword = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userUpdatePassword");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling userUpdatePassword");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{id}/passwd', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
