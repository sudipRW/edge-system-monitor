/*
 * PortainerCE API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  # Private Registry  Using private registry, you will need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\>}’ inside the Request Header. The parameter name is \"X-Registry-Auth\". \\<registryID value\\> - The registry ID where the repository was created.  Example:  ``` eyJyZWdpc3RyeUlkIjoxfQ== ```  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/). 
 *
 * OpenAPI spec version: 2.21.3
 * Contact: info@portainer.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EdgeStackPayload', 'model/EndpointedgeEndpointEdgeStatusInspectResponse', 'model/EndpointsDockerhubStatusResponse', 'model/EndpointsEndpointCreateGlobalKeyResponse', 'model/EndpointsEndpointDeleteBatchPartialResponse', 'model/EndpointsEndpointDeleteBatchPayload', 'model/EndpointsEndpointSettingsUpdatePayload', 'model/EndpointsEndpointUpdatePayload', 'model/EndpointsEndpointUpdateRelationsPayload', 'model/EndpointsForceUpdateServicePayload', 'model/EndpointsRegistryAccessPayload', 'model/PortainerEndpoint', 'model/PortainerRegistry', 'model/SwarmServiceUpdateResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/EdgeStackPayload'), require('../model/EndpointedgeEndpointEdgeStatusInspectResponse'), require('../model/EndpointsDockerhubStatusResponse'), require('../model/EndpointsEndpointCreateGlobalKeyResponse'), require('../model/EndpointsEndpointDeleteBatchPartialResponse'), require('../model/EndpointsEndpointDeleteBatchPayload'), require('../model/EndpointsEndpointSettingsUpdatePayload'), require('../model/EndpointsEndpointUpdatePayload'), require('../model/EndpointsEndpointUpdateRelationsPayload'), require('../model/EndpointsForceUpdateServicePayload'), require('../model/EndpointsRegistryAccessPayload'), require('../model/PortainerEndpoint'), require('../model/PortainerRegistry'), require('../model/SwarmServiceUpdateResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.PortainerCeApi) {
      root.PortainerCeApi = {};
    }
    root.PortainerCeApi.EndpointsApi = factory(root.PortainerCeApi.ApiClient, root.PortainerCeApi.EdgeStackPayload, root.PortainerCeApi.EndpointedgeEndpointEdgeStatusInspectResponse, root.PortainerCeApi.EndpointsDockerhubStatusResponse, root.PortainerCeApi.EndpointsEndpointCreateGlobalKeyResponse, root.PortainerCeApi.EndpointsEndpointDeleteBatchPartialResponse, root.PortainerCeApi.EndpointsEndpointDeleteBatchPayload, root.PortainerCeApi.EndpointsEndpointSettingsUpdatePayload, root.PortainerCeApi.EndpointsEndpointUpdatePayload, root.PortainerCeApi.EndpointsEndpointUpdateRelationsPayload, root.PortainerCeApi.EndpointsForceUpdateServicePayload, root.PortainerCeApi.EndpointsRegistryAccessPayload, root.PortainerCeApi.PortainerEndpoint, root.PortainerCeApi.PortainerRegistry, root.PortainerCeApi.SwarmServiceUpdateResponse);
  }
}(this, function(ApiClient, EdgeStackPayload, EndpointedgeEndpointEdgeStatusInspectResponse, EndpointsDockerhubStatusResponse, EndpointsEndpointCreateGlobalKeyResponse, EndpointsEndpointDeleteBatchPartialResponse, EndpointsEndpointDeleteBatchPayload, EndpointsEndpointSettingsUpdatePayload, EndpointsEndpointUpdatePayload, EndpointsEndpointUpdateRelationsPayload, EndpointsForceUpdateServicePayload, EndpointsRegistryAccessPayload, PortainerEndpoint, PortainerRegistry, SwarmServiceUpdateResponse) {
  'use strict';

  /**
   * Endpoints service.
   * @module api/EndpointsApi
   * @version 2.21.3
   */

  /**
   * Constructs a new EndpointsApi. 
   * @alias module:api/EndpointsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the endpointAssociationDelete operation.
     * @callback module:api/EndpointsApi~endpointAssociationDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * De-association an edge environment(endpoint)
     * De-association an edge environment(endpoint). **Access policy**: administrator
     * @param {Number} id Environment(Endpoint) identifier
     * @param {module:api/EndpointsApi~endpointAssociationDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.endpointAssociationDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endpointAssociationDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/endpoints/{id}/association', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointCreate operation.
     * @callback module:api/EndpointsApi~endpointCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerEndpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new environment(endpoint)
     * Create a new environment(endpoint) that will be used to manage an environment(endpoint). **Access policy**: administrator
     * @param {String} name Name that will be used to identify this environment(endpoint) (example: my-environment)
     * @param {Number} endpointCreationType Environment(Endpoint) type. Value must be one of: 1 (Local Docker environment), 2 (Agent environment), 3 (Azure environment), 4 (Edge agent environment) or 5 (Local Kubernetes Environment)
     * @param {String} edgeTunnelServerAddress URL or IP address that will be used to establish a reverse tunnel
     * @param {Object} opts Optional parameters
     * @param {String} opts.URL URL or IP address of a Docker host (example: docker.mydomain.tld:2375). Defaults to local if not specified (Linux: /var/run/docker.sock, Windows: //./pipe/docker_engine). Cannot be empty if EndpointCreationType is set to 4 (Edge agent environment)
     * @param {String} opts.publicURL URL or IP address where exposed containers will be reachable. Defaults to URL if not specified (example: docker.mydomain.tld:2375)
     * @param {Number} opts.groupID Environment(Endpoint) group identifier. If not specified will default to 1 (unassigned).
     * @param {Boolean} opts.TLS Require TLS to connect against this environment(endpoint). Must be true if EndpointCreationType is set to 2 (Agent environment)
     * @param {Boolean} opts.tLSSkipVerify Skip server verification when using TLS. Must be true if EndpointCreationType is set to 2 (Agent environment)
     * @param {Boolean} opts.tLSSkipClientVerify Skip client verification when using TLS. Must be true if EndpointCreationType is set to 2 (Agent environment)
     * @param {File} opts.tLSCACertFile TLS CA certificate file
     * @param {File} opts.tLSCertFile TLS client certificate file
     * @param {File} opts.tLSKeyFile TLS client key file
     * @param {String} opts.azureApplicationID Azure application ID. Required if environment(endpoint) type is set to 3
     * @param {String} opts.azureTenantID Azure tenant ID. Required if environment(endpoint) type is set to 3
     * @param {String} opts.azureAuthenticationKey Azure authentication key. Required if environment(endpoint) type is set to 3
     * @param {Array.<Number>} opts.tagIds List of tag identifiers to which this environment(endpoint) is associated
     * @param {Number} opts.edgeCheckinInterval The check in interval for edge agent (in seconds)
     * @param {String} opts.gpus List of GPUs - json stringified array of {name, value} structs
     * @param {module:api/EndpointsApi~endpointCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerEndpoint}
     */
    this.endpointCreate = function(name, endpointCreationType, edgeTunnelServerAddress, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling endpointCreate");
      }

      // verify the required parameter 'endpointCreationType' is set
      if (endpointCreationType === undefined || endpointCreationType === null) {
        throw new Error("Missing the required parameter 'endpointCreationType' when calling endpointCreate");
      }

      // verify the required parameter 'edgeTunnelServerAddress' is set
      if (edgeTunnelServerAddress === undefined || edgeTunnelServerAddress === null) {
        throw new Error("Missing the required parameter 'edgeTunnelServerAddress' when calling endpointCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'Name': name,
        'EndpointCreationType': endpointCreationType,
        'URL': opts['URL'],
        'PublicURL': opts['publicURL'],
        'GroupID': opts['groupID'],
        'TLS': opts['TLS'],
        'TLSSkipVerify': opts['tLSSkipVerify'],
        'TLSSkipClientVerify': opts['tLSSkipClientVerify'],
        'TLSCACertFile': opts['tLSCACertFile'],
        'TLSCertFile': opts['tLSCertFile'],
        'TLSKeyFile': opts['tLSKeyFile'],
        'AzureApplicationID': opts['azureApplicationID'],
        'AzureTenantID': opts['azureTenantID'],
        'AzureAuthenticationKey': opts['azureAuthenticationKey'],
        'TagIds': this.apiClient.buildCollectionParam(opts['tagIds'], 'multi'),
        'EdgeCheckinInterval': opts['edgeCheckinInterval'],
        'EdgeTunnelServerAddress': edgeTunnelServerAddress,
        'Gpus': opts['gpus']
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = PortainerEndpoint;

      return this.apiClient.callApi(
        '/endpoints', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointCreateGlobalKey operation.
     * @callback module:api/EndpointsApi~endpointCreateGlobalKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointsEndpointCreateGlobalKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or retrieve the endpoint for an EdgeID
     * @param {module:api/EndpointsApi~endpointCreateGlobalKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointsEndpointCreateGlobalKeyResponse}
     */
    this.endpointCreateGlobalKey = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = EndpointsEndpointCreateGlobalKeyResponse;

      return this.apiClient.callApi(
        '/endpoints/global-key', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointDelete operation.
     * @callback module:api/EndpointsApi~endpointDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an environment
     * Remove the environment associated to the specified identifier and optionally clean-up associated resources. **Access policy**: Administrator only.
     * @param {Number} id Environment(Endpoint) identifier
     * @param {module:api/EndpointsApi~endpointDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.endpointDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endpointDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/endpoints/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointDeleteBatch operation.
     * @callback module:api/EndpointsApi~endpointDeleteBatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove multiple environments
     * Remove multiple environments and optionally clean-up associated resources. **Access policy**: Administrator only.
     * @param {module:model/EndpointsEndpointDeleteBatchPayload} body List of environments to delete, with optional deleteCluster flag to clean-up assocaited resources (cloud environments only)
     * @param {module:api/EndpointsApi~endpointDeleteBatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.endpointDeleteBatch = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling endpointDeleteBatch");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/endpoints', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointDockerhubStatus operation.
     * @callback module:api/EndpointsApi~endpointDockerhubStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointsDockerhubStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * fetch docker pull limits
     * get docker pull limits for a docker hub registry in the environment **Access policy**:
     * @param {Number} id endpoint ID
     * @param {Number} registryId registry ID
     * @param {module:api/EndpointsApi~endpointDockerhubStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointsDockerhubStatusResponse}
     */
    this.endpointDockerhubStatus = function(id, registryId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endpointDockerhubStatus");
      }

      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling endpointDockerhubStatus");
      }


      var pathParams = {
        'id': id,
        'registryId': registryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EndpointsDockerhubStatusResponse;

      return this.apiClient.callApi(
        '/endpoints/{id}/dockerhub/{registryId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointEdgeStatusInspect operation.
     * @callback module:api/EndpointsApi~endpointEdgeStatusInspectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointedgeEndpointEdgeStatusInspectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get environment(endpoint) status
     * environment(endpoint) for edge agent to check status of environment(endpoint) **Access policy**: restricted only to Edge environments(endpoints)
     * @param {Number} id Environment(Endpoint) identifier
     * @param {module:api/EndpointsApi~endpointEdgeStatusInspectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointedgeEndpointEdgeStatusInspectResponse}
     */
    this.endpointEdgeStatusInspect = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endpointEdgeStatusInspect");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = [];
      var returnType = EndpointedgeEndpointEdgeStatusInspectResponse;

      return this.apiClient.callApi(
        '/endpoints/{id}/edge/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointForceUpdateService operation.
     * @callback module:api/EndpointsApi~endpointForceUpdateServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SwarmServiceUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * force update a docker service
     * force update a docker service **Access policy**: authenticated
     * @param {Number} id endpoint identifier
     * @param {module:model/EndpointsForceUpdateServicePayload} body details
     * @param {module:api/EndpointsApi~endpointForceUpdateServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SwarmServiceUpdateResponse}
     */
    this.endpointForceUpdateService = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endpointForceUpdateService");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling endpointForceUpdateService");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SwarmServiceUpdateResponse;

      return this.apiClient.callApi(
        '/endpoints/{id}/forceupdateservice', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointInspect operation.
     * @callback module:api/EndpointsApi~endpointInspectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerEndpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inspect an environment(endpoint)
     * Retrieve details about an environment(endpoint). **Access policy**: restricted
     * @param {Number} id Environment(Endpoint) identifier
     * @param {module:api/EndpointsApi~endpointInspectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerEndpoint}
     */
    this.endpointInspect = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endpointInspect");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PortainerEndpoint;

      return this.apiClient.callApi(
        '/endpoints/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointList operation.
     * @callback module:api/EndpointsApi~endpointListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PortainerEndpoint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List environments(endpoints)
     * List all environments(endpoints) based on the current user authorizations. Will return all environments(endpoints) if using an administrator or team leader account otherwise it will only return authorized environments(endpoints). **Access policy**: restricted
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Start searching from
     * @param {Number} opts.limit Limit results to this value
     * @param {Number} opts.order Order sorted results by desc/asc
     * @param {String} opts.search Search query
     * @param {Array.<Number>} opts.groupIds List environments(endpoints) of these groups
     * @param {Array.<Number>} opts.status List environments(endpoints) by this status
     * @param {Array.<Number>} opts.types List environments(endpoints) of this type
     * @param {Array.<Number>} opts.tagIds search environments(endpoints) with these tags (depends on tagsPartialMatch)
     * @param {Boolean} opts.tagsPartialMatch If true, will return environment(endpoint) which has one of tagIds, if false (or missing) will return only environments(endpoints) that has all the tags
     * @param {Array.<Number>} opts.endpointIds will return only these environments(endpoints)
     * @param {Boolean} opts.provisioned If true, will return environment(endpoint) that were provisioned
     * @param {Array.<String>} opts.agentVersions will return only environments with on of these agent versions
     * @param {Boolean} opts.edgeAsync if exists true show only edge async agents, false show only standard edge agents. if missing, will show both types (relevant only for edge agents)
     * @param {Boolean} opts.edgeDeviceUntrusted if true, show only untrusted edge agents, if false show only trusted edge agents (relevant only for edge agents)
     * @param {Number} opts.edgeCheckInPassedSeconds if bigger then zero, show only edge agents that checked-in in the last provided seconds (relevant only for edge agents)
     * @param {Boolean} opts.excludeSnapshots if true, the snapshot data won't be retrieved
     * @param {String} opts.name will return only environments(endpoints) with this name
     * @param {String} opts.edgeStackStatus only applied when edgeStackId exists. Filter the returned environments based on their deployment status in the stack (not the environment status!)
     * @param {module:api/EndpointsApi~endpointListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PortainerEndpoint>}
     */
    this.endpointList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'start': opts['start'],
        'limit': opts['limit'],
        'order': opts['order'],
        'search': opts['search'],
        'tagsPartialMatch': opts['tagsPartialMatch'],
        'provisioned': opts['provisioned'],
        'edgeAsync': opts['edgeAsync'],
        'edgeDeviceUntrusted': opts['edgeDeviceUntrusted'],
        'edgeCheckInPassedSeconds': opts['edgeCheckInPassedSeconds'],
        'excludeSnapshots': opts['excludeSnapshots'],
        'name': opts['name'],
        'edgeStackStatus': opts['edgeStackStatus'],
      };
      var collectionQueryParams = {
        'groupIds': {
          value: opts['groupIds'],
          collectionFormat: 'multi'
        },
        'status': {
          value: opts['status'],
          collectionFormat: 'multi'
        },
        'types': {
          value: opts['types'],
          collectionFormat: 'multi'
        },
        'tagIds': {
          value: opts['tagIds'],
          collectionFormat: 'multi'
        },
        'endpointIds': {
          value: opts['endpointIds'],
          collectionFormat: 'multi'
        },
        'agentVersions': {
          value: opts['agentVersions'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [PortainerEndpoint];

      return this.apiClient.callApi(
        '/endpoints', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointRegistriesList operation.
     * @callback module:api/EndpointsApi~endpointRegistriesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PortainerRegistry>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Registries on environment
     * List all registries based on the current user authorizations in current environment. **Access policy**: authenticated
     * @param {Number} id Environment(Endpoint) identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.namespace required if kubernetes environment, will show registries by namespace
     * @param {module:api/EndpointsApi~endpointRegistriesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PortainerRegistry>}
     */
    this.endpointRegistriesList = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endpointRegistriesList");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'namespace': opts['namespace'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [PortainerRegistry];

      return this.apiClient.callApi(
        '/endpoints/{id}/registries', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointRegistryAccess operation.
     * @callback module:api/EndpointsApi~endpointRegistryAccessCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update registry access for environment
     * **Access policy**: authenticated
     * @param {Number} id Environment(Endpoint) identifier
     * @param {Number} registryId Registry identifier
     * @param {module:model/EndpointsRegistryAccessPayload} body details
     * @param {module:api/EndpointsApi~endpointRegistryAccessCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.endpointRegistryAccess = function(id, registryId, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endpointRegistryAccess");
      }

      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling endpointRegistryAccess");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling endpointRegistryAccess");
      }


      var pathParams = {
        'id': id,
        'registryId': registryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/endpoints/{id}/registries/{registryId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointSettingsUpdate operation.
     * @callback module:api/EndpointsApi~endpointSettingsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerEndpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update settings for an environment(endpoint)
     * Update settings for an environment(endpoint). **Access policy**: authenticated
     * @param {Number} id Environment(Endpoint) identifier
     * @param {module:model/EndpointsEndpointSettingsUpdatePayload} body Environment(Endpoint) details
     * @param {module:api/EndpointsApi~endpointSettingsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerEndpoint}
     */
    this.endpointSettingsUpdate = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endpointSettingsUpdate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling endpointSettingsUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortainerEndpoint;

      return this.apiClient.callApi(
        '/endpoints/{id}/settings', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointSnapshot operation.
     * @callback module:api/EndpointsApi~endpointSnapshotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Snapshots an environment(endpoint)
     * Snapshots an environment(endpoint) **Access policy**: administrator
     * @param {Number} id Environment(Endpoint) identifier
     * @param {module:api/EndpointsApi~endpointSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.endpointSnapshot = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endpointSnapshot");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/endpoints/{id}/snapshot', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointSnapshots operation.
     * @callback module:api/EndpointsApi~endpointSnapshotsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Snapshot all environments(endpoints)
     * Snapshot all environments(endpoints) **Access policy**: administrator
     * @param {module:api/EndpointsApi~endpointSnapshotsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.endpointSnapshots = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/endpoints/snapshot', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointUpdate operation.
     * @callback module:api/EndpointsApi~endpointUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerEndpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an environment(endpoint)
     * Update an environment(endpoint). **Access policy**: authenticated
     * @param {Number} id Environment(Endpoint) identifier
     * @param {module:model/EndpointsEndpointUpdatePayload} body Environment(Endpoint) details
     * @param {module:api/EndpointsApi~endpointUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerEndpoint}
     */
    this.endpointUpdate = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endpointUpdate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling endpointUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortainerEndpoint;

      return this.apiClient.callApi(
        '/endpoints/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointUpdateRelations operation.
     * @callback module:api/EndpointsApi~endpointUpdateRelationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update relations for a list of environments
     * Update relations for a list of environments Edge groups, tags and environment group can be updated.  **Access policy**: administrator
     * @param {module:model/EndpointsEndpointUpdateRelationsPayload} body Environment relations data
     * @param {module:api/EndpointsApi~endpointUpdateRelationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.endpointUpdateRelations = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling endpointUpdateRelations");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/endpoints/relations', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointsIdDockerV2BrowsePutPost operation.
     * @callback module:api/EndpointsApi~endpointsIdDockerV2BrowsePutPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a file under a specific path on the file system of an environment (endpoint)
     * Use this environment(endpoint) to upload TLS files. **Access policy**: administrator
     * @param {Number} id Environment(Endpoint) identifier
     * @param {String} path The destination path to upload the file to
     * @param {File} file The file to upload
     * @param {Object} opts Optional parameters
     * @param {String} opts.volumeID Optional volume identifier to upload the file
     * @param {module:api/EndpointsApi~endpointsIdDockerV2BrowsePutPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.endpointsIdDockerV2BrowsePutPost = function(id, path, file, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endpointsIdDockerV2BrowsePutPost");
      }

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling endpointsIdDockerV2BrowsePutPost");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling endpointsIdDockerV2BrowsePutPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'volumeID': opts['volumeID'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'Path': path,
        'file': file
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/endpoints/{id}/docker/v2/browse/put', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointsIdEdgeJobsJobIDLogsPost operation.
     * @callback module:api/EndpointsApi~endpointsIdEdgeJobsJobIDLogsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inspect an EdgeJob Log
     * **Access policy**: public
     * @param {Number} id environment(endpoint) Id
     * @param {Number} jobID Job Id
     * @param {module:api/EndpointsApi~endpointsIdEdgeJobsJobIDLogsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.endpointsIdEdgeJobsJobIDLogsPost = function(id, jobID, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endpointsIdEdgeJobsJobIDLogsPost");
      }

      // verify the required parameter 'jobID' is set
      if (jobID === undefined || jobID === null) {
        throw new Error("Missing the required parameter 'jobID' when calling endpointsIdEdgeJobsJobIDLogsPost");
      }


      var pathParams = {
        'id': id,
        'jobID': jobID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/endpoints/{id}/edge/jobs/{jobID}/logs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointsIdEdgeStacksStackIdGet operation.
     * @callback module:api/EndpointsApi~endpointsIdEdgeStacksStackIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EdgeStackPayload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inspect an Edge Stack for an Environment(Endpoint)
     * **Access policy**: public
     * @param {Number} id environment(endpoint) Id
     * @param {Number} stackId EdgeStack Id
     * @param {module:api/EndpointsApi~endpointsIdEdgeStacksStackIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EdgeStackPayload}
     */
    this.endpointsIdEdgeStacksStackIdGet = function(id, stackId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endpointsIdEdgeStacksStackIdGet");
      }

      // verify the required parameter 'stackId' is set
      if (stackId === undefined || stackId === null) {
        throw new Error("Missing the required parameter 'stackId' when calling endpointsIdEdgeStacksStackIdGet");
      }


      var pathParams = {
        'id': id,
        'stackId': stackId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EdgeStackPayload;

      return this.apiClient.callApi(
        '/endpoints/{id}/edge/stacks/{stackId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
