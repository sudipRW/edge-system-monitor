/*
 * PortainerCE API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  # Private Registry  Using private registry, you will need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\>}’ inside the Request Header. The parameter name is \"X-Registry-Auth\". \\<registryID value\\> - The registry ID where the repository was created.  Example:  ``` eyJyZWdpc3RyeUlkIjoxfQ== ```  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/). 
 *
 * OpenAPI spec version: 2.21.3
 * Contact: info@portainer.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EdgeStackPayload', 'model/EdgestacksEdgeStackFromGitRepositoryPayload', 'model/EdgestacksEdgeStackFromStringPayload', 'model/EdgestacksStackFileResponse', 'model/EdgestacksUpdateEdgeStackPayload', 'model/EdgestacksUpdateStatusPayload', 'model/PortainerEdgeStack'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/EdgeStackPayload'), require('../model/EdgestacksEdgeStackFromGitRepositoryPayload'), require('../model/EdgestacksEdgeStackFromStringPayload'), require('../model/EdgestacksStackFileResponse'), require('../model/EdgestacksUpdateEdgeStackPayload'), require('../model/EdgestacksUpdateStatusPayload'), require('../model/PortainerEdgeStack'));
  } else {
    // Browser globals (root is window)
    if (!root.PortainerCeApi) {
      root.PortainerCeApi = {};
    }
    root.PortainerCeApi.EdgeStacksApi = factory(root.PortainerCeApi.ApiClient, root.PortainerCeApi.EdgeStackPayload, root.PortainerCeApi.EdgestacksEdgeStackFromGitRepositoryPayload, root.PortainerCeApi.EdgestacksEdgeStackFromStringPayload, root.PortainerCeApi.EdgestacksStackFileResponse, root.PortainerCeApi.EdgestacksUpdateEdgeStackPayload, root.PortainerCeApi.EdgestacksUpdateStatusPayload, root.PortainerCeApi.PortainerEdgeStack);
  }
}(this, function(ApiClient, EdgeStackPayload, EdgestacksEdgeStackFromGitRepositoryPayload, EdgestacksEdgeStackFromStringPayload, EdgestacksStackFileResponse, EdgestacksUpdateEdgeStackPayload, EdgestacksUpdateStatusPayload, PortainerEdgeStack) {
  'use strict';

  /**
   * EdgeStacks service.
   * @module api/EdgeStacksApi
   * @version 2.21.3
   */

  /**
   * Constructs a new EdgeStacksApi. 
   * @alias module:api/EdgeStacksApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the edgeStackCreate operation.
     * @callback module:api/EdgeStacksApi~edgeStackCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerEdgeStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an EdgeStack
     * **Access policy**: administrator
     * @param {module:model/String} method Creation Method
     * @param {Object} body for body documentation see the relevant /edge_stacks/create/{method} endpoint
     * @param {module:api/EdgeStacksApi~edgeStackCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerEdgeStack}
     */
    this.edgeStackCreate = function(method, body, callback) {
      var postBody = body;

      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling edgeStackCreate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling edgeStackCreate");
      }


      var pathParams = {
      };
      var queryParams = {
        'method': method,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PortainerEdgeStack;

      return this.apiClient.callApi(
        '/edge_stacks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeStackCreateFile operation.
     * @callback module:api/EdgeStacksApi~edgeStackCreateFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerEdgeStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an EdgeStack from file
     * **Access policy**: administrator
     * @param {String} name Name of the stack
     * @param {File} file Content of the Stack file
     * @param {String} edgeGroups JSON stringified array of Edge Groups ids
     * @param {Number} deploymentType deploy type 0 - 'compose', 1 - 'kubernetes', 2 - 'nomad'
     * @param {Object} opts Optional parameters
     * @param {String} opts.registries JSON stringified array of Registry ids to use for this stack
     * @param {Boolean} opts.useManifestNamespaces Uses the manifest's namespaces instead of the default one, relevant only for kube environments
     * @param {Boolean} opts.prePullImage Pre Pull image
     * @param {Boolean} opts.retryDeploy Retry deploy
     * @param {String} opts.dryrun if true, will not create an edge stack, but just will check the settings and return a non-persisted edge stack object
     * @param {module:api/EdgeStacksApi~edgeStackCreateFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerEdgeStack}
     */
    this.edgeStackCreateFile = function(name, file, edgeGroups, deploymentType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling edgeStackCreateFile");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling edgeStackCreateFile");
      }

      // verify the required parameter 'edgeGroups' is set
      if (edgeGroups === undefined || edgeGroups === null) {
        throw new Error("Missing the required parameter 'edgeGroups' when calling edgeStackCreateFile");
      }

      // verify the required parameter 'deploymentType' is set
      if (deploymentType === undefined || deploymentType === null) {
        throw new Error("Missing the required parameter 'deploymentType' when calling edgeStackCreateFile");
      }


      var pathParams = {
      };
      var queryParams = {
        'dryrun': opts['dryrun'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'Name': name,
        'file': file,
        'EdgeGroups': edgeGroups,
        'DeploymentType': deploymentType,
        'Registries': opts['registries'],
        'UseManifestNamespaces': opts['useManifestNamespaces'],
        'PrePullImage': opts['prePullImage'],
        'RetryDeploy': opts['retryDeploy']
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = PortainerEdgeStack;

      return this.apiClient.callApi(
        '/edge_stacks/create/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeStackCreateRepository operation.
     * @callback module:api/EdgeStacksApi~edgeStackCreateRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerEdgeStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an EdgeStack from a git repository
     * **Access policy**: administrator
     * @param {module:model/EdgestacksEdgeStackFromGitRepositoryPayload} body stack config
     * @param {Object} opts Optional parameters
     * @param {String} opts.dryrun if true, will not create an edge stack, but just will check the settings and return a non-persisted edge stack object
     * @param {module:api/EdgeStacksApi~edgeStackCreateRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerEdgeStack}
     */
    this.edgeStackCreateRepository = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling edgeStackCreateRepository");
      }


      var pathParams = {
      };
      var queryParams = {
        'dryrun': opts['dryrun'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PortainerEdgeStack;

      return this.apiClient.callApi(
        '/edge_stacks/create/repository', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeStackCreateString operation.
     * @callback module:api/EdgeStacksApi~edgeStackCreateStringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerEdgeStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an EdgeStack from a text
     * **Access policy**: administrator
     * @param {module:model/EdgestacksEdgeStackFromStringPayload} body stack config
     * @param {Object} opts Optional parameters
     * @param {String} opts.dryrun if true, will not create an edge stack, but just will check the settings and return a non-persisted edge stack object
     * @param {module:api/EdgeStacksApi~edgeStackCreateStringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerEdgeStack}
     */
    this.edgeStackCreateString = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling edgeStackCreateString");
      }


      var pathParams = {
      };
      var queryParams = {
        'dryrun': opts['dryrun'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PortainerEdgeStack;

      return this.apiClient.callApi(
        '/edge_stacks/create/string', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeStackDelete operation.
     * @callback module:api/EdgeStacksApi~edgeStackDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an EdgeStack
     * **Access policy**: administrator
     * @param {Number} id EdgeStack Id
     * @param {module:api/EdgeStacksApi~edgeStackDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.edgeStackDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling edgeStackDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/edge_stacks/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeStackFile operation.
     * @callback module:api/EdgeStacksApi~edgeStackFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EdgestacksStackFileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches the stack file for an EdgeStack
     * **Access policy**: administrator
     * @param {Number} id EdgeStack Id
     * @param {module:api/EdgeStacksApi~edgeStackFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EdgestacksStackFileResponse}
     */
    this.edgeStackFile = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling edgeStackFile");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EdgestacksStackFileResponse;

      return this.apiClient.callApi(
        '/edge_stacks/{id}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeStackInspect operation.
     * @callback module:api/EdgeStacksApi~edgeStackInspectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerEdgeStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inspect an EdgeStack
     * **Access policy**: administrator
     * @param {Number} id EdgeStack Id
     * @param {module:api/EdgeStacksApi~edgeStackInspectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerEdgeStack}
     */
    this.edgeStackInspect = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling edgeStackInspect");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PortainerEdgeStack;

      return this.apiClient.callApi(
        '/edge_stacks/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeStackList operation.
     * @callback module:api/EdgeStacksApi~edgeStackListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PortainerEdgeStack>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches the list of EdgeStacks
     * **Access policy**: administrator
     * @param {module:api/EdgeStacksApi~edgeStackListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PortainerEdgeStack>}
     */
    this.edgeStackList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [PortainerEdgeStack];

      return this.apiClient.callApi(
        '/edge_stacks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeStackStatusDelete operation.
     * @callback module:api/EdgeStacksApi~edgeStackStatusDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerEdgeStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an EdgeStack status
     * Authorized only if the request is done by an Edge Environment(Endpoint)
     * @param {Number} id EdgeStack Id
     * @param {Number} environmentId Environment identifier
     * @param {module:api/EdgeStacksApi~edgeStackStatusDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerEdgeStack}
     */
    this.edgeStackStatusDelete = function(id, environmentId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling edgeStackStatusDelete");
      }

      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling edgeStackStatusDelete");
      }


      var pathParams = {
        'id': id,
        'environmentId': environmentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PortainerEdgeStack;

      return this.apiClient.callApi(
        '/edge_stacks/{id}/status/{environmentId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeStackStatusUpdate operation.
     * @callback module:api/EdgeStacksApi~edgeStackStatusUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerEdgeStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an EdgeStack status
     * Authorized only if the request is done by an Edge Environment(Endpoint)
     * @param {Number} id EdgeStack Id
     * @param {module:model/EdgestacksUpdateStatusPayload} body EdgeStack status payload
     * @param {module:api/EdgeStacksApi~edgeStackStatusUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerEdgeStack}
     */
    this.edgeStackStatusUpdate = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling edgeStackStatusUpdate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling edgeStackStatusUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortainerEdgeStack;

      return this.apiClient.callApi(
        '/edge_stacks/{id}/status', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeStackUpdate operation.
     * @callback module:api/EdgeStacksApi~edgeStackUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortainerEdgeStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an EdgeStack
     * **Access policy**: administrator
     * @param {Number} id EdgeStack Id
     * @param {module:model/EdgestacksUpdateEdgeStackPayload} body EdgeStack data
     * @param {module:api/EdgeStacksApi~edgeStackUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortainerEdgeStack}
     */
    this.edgeStackUpdate = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling edgeStackUpdate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling edgeStackUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth', 'jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortainerEdgeStack;

      return this.apiClient.callApi(
        '/edge_stacks/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointsIdEdgeStacksStackIdGet operation.
     * @callback module:api/EdgeStacksApi~endpointsIdEdgeStacksStackIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EdgeStackPayload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inspect an Edge Stack for an Environment(Endpoint)
     * **Access policy**: public
     * @param {Number} id environment(endpoint) Id
     * @param {Number} stackId EdgeStack Id
     * @param {module:api/EdgeStacksApi~endpointsIdEdgeStacksStackIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EdgeStackPayload}
     */
    this.endpointsIdEdgeStacksStackIdGet = function(id, stackId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endpointsIdEdgeStacksStackIdGet");
      }

      // verify the required parameter 'stackId' is set
      if (stackId === undefined || stackId === null) {
        throw new Error("Missing the required parameter 'stackId' when calling endpointsIdEdgeStacksStackIdGet");
      }


      var pathParams = {
        'id': id,
        'stackId': stackId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EdgeStackPayload;

      return this.apiClient.callApi(
        '/endpoints/{id}/edge/stacks/{stackId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
